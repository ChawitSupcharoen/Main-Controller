
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800579c  0800579c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a4  080057a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  080057b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080057b8  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012509  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023fa  00000000  00000000  00032588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00034988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce0  00000000  00000000  000359f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025827  00000000  00000000  000366d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013081  00000000  00000000  0005bef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7e3d  00000000  00000000  0006ef78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045e0  00000000  00000000  00166db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0016b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800573c 	.word	0x0800573c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800573c 	.word	0x0800573c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd4f 	bl	8000fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f83a 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa76 	bl	8000a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fa42 	bl	80009ac <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000528:	f000 f9a8 	bl	800087c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f9f2 	bl	8000914 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000530:	f000 f87c 	bl	800062c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000534:	f000 f94e 	bl	80007d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 10);
 8000538:	220a      	movs	r2, #10
 800053a:	4911      	ldr	r1, [pc, #68]	; (8000580 <main+0x6c>)
 800053c:	4811      	ldr	r0, [pc, #68]	; (8000584 <main+0x70>)
 800053e:	f004 f869 	bl	8004614 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system


  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8000542:	4811      	ldr	r0, [pc, #68]	; (8000588 <main+0x74>)
 8000544:	f002 fb5a 	bl	8002bfc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000548:	2100      	movs	r1, #0
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <main+0x74>)
 800054c:	f002 fc28 	bl	8002da0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000550:	2104      	movs	r1, #4
 8000552:	480d      	ldr	r0, [pc, #52]	; (8000588 <main+0x74>)
 8000554:	f002 fc24 	bl	8002da0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65535);
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x74>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 65535);
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <main+0x74>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800056a:	639a      	str	r2, [r3, #56]	; 0x38

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800056c:	213c      	movs	r1, #60	; 0x3c
 800056e:	4807      	ldr	r0, [pc, #28]	; (800058c <main+0x78>)
 8000570:	f002 fdce 	bl	8003110 <HAL_TIM_Encoder_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // TODO: Test encoder QEI, remove later
	  qeiRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <main+0x78>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <main+0x7c>)
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e7f9      	b.n	8000574 <main+0x60>
 8000580:	200002a8 	.word	0x200002a8
 8000584:	200000c0 	.word	0x200000c0
 8000588:	20000028 	.word	0x20000028
 800058c:	20000074 	.word	0x20000074
 8000590:	200002b4 	.word	0x200002b4

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	2238      	movs	r2, #56	; 0x38
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 f89e 	bl	80056e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f001 fa98 	bl	8001aec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005d6:	2355      	movs	r3, #85	; 0x55
 80005d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fb32 	bl	8001c54 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005f6:	f000 fa85 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2104      	movs	r1, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fe30 	bl	8002278 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800061e:	f000 fa71 	bl	8000b04 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09e      	sub	sp, #120	; 0x78
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800064c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
 8000668:	615a      	str	r2, [r3, #20]
 800066a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2234      	movs	r2, #52	; 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 f836 	bl	80056e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000678:	4b54      	ldr	r3, [pc, #336]	; (80007cc <MX_TIM1_Init+0x1a0>)
 800067a:	4a55      	ldr	r2, [pc, #340]	; (80007d0 <MX_TIM1_Init+0x1a4>)
 800067c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800067e:	4b53      	ldr	r3, [pc, #332]	; (80007cc <MX_TIM1_Init+0x1a0>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b51      	ldr	r3, [pc, #324]	; (80007cc <MX_TIM1_Init+0x1a0>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800068a:	4b50      	ldr	r3, [pc, #320]	; (80007cc <MX_TIM1_Init+0x1a0>)
 800068c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000690:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000692:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <MX_TIM1_Init+0x1a0>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000698:	4b4c      	ldr	r3, [pc, #304]	; (80007cc <MX_TIM1_Init+0x1a0>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b4b      	ldr	r3, [pc, #300]	; (80007cc <MX_TIM1_Init+0x1a0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a4:	4849      	ldr	r0, [pc, #292]	; (80007cc <MX_TIM1_Init+0x1a0>)
 80006a6:	f002 fa51 	bl	8002b4c <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80006b0:	f000 fa28 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006be:	4619      	mov	r1, r3
 80006c0:	4842      	ldr	r0, [pc, #264]	; (80007cc <MX_TIM1_Init+0x1a0>)
 80006c2:	f002 fec7 	bl	8003454 <HAL_TIM_ConfigClockSource>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006cc:	f000 fa1a 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006d0:	483e      	ldr	r0, [pc, #248]	; (80007cc <MX_TIM1_Init+0x1a0>)
 80006d2:	f002 fb03 	bl	8002cdc <HAL_TIM_PWM_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80006dc:	f000 fa12 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006f0:	4619      	mov	r1, r3
 80006f2:	4836      	ldr	r0, [pc, #216]	; (80007cc <MX_TIM1_Init+0x1a0>)
 80006f4:	f003 fc64 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80006fe:	f000 fa01 	bl	8000b04 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000702:	2301      	movs	r3, #1
 8000704:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000706:	2301      	movs	r3, #1
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800070a:	2300      	movs	r3, #0
 800070c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800070e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000712:	461a      	mov	r2, r3
 8000714:	2101      	movs	r1, #1
 8000716:	482d      	ldr	r0, [pc, #180]	; (80007cc <MX_TIM1_Init+0x1a0>)
 8000718:	f003 fd7c 	bl	8004214 <HAL_TIMEx_ConfigBreakInput>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000722:	f000 f9ef 	bl	8000b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000726:	2360      	movs	r3, #96	; 0x60
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072e:	2300      	movs	r3, #0
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000732:	2300      	movs	r3, #0
 8000734:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000742:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	4820      	ldr	r0, [pc, #128]	; (80007cc <MX_TIM1_Init+0x1a0>)
 800074c:	f002 fd6e 	bl	800322c <HAL_TIM_PWM_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000756:	f000 f9d5 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800075a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800075e:	2204      	movs	r2, #4
 8000760:	4619      	mov	r1, r3
 8000762:	481a      	ldr	r0, [pc, #104]	; (80007cc <MX_TIM1_Init+0x1a0>)
 8000764:	f002 fd62 	bl	800322c <HAL_TIM_PWM_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800076e:	f000 f9c9 	bl	8000b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000798:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM1_Init+0x1a0>)
 80007b0:	f003 fc9c 	bl	80040ec <HAL_TIMEx_ConfigBreakDeadTime>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80007ba:	f000 f9a3 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM1_Init+0x1a0>)
 80007c0:	f000 fa4c 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 80007c4:	bf00      	nop
 80007c6:	3778      	adds	r7, #120	; 0x78
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000028 	.word	0x20000028
 80007d0:	40012c00 	.word	0x40012c00

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2224      	movs	r2, #36	; 0x24
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 ff7e 	bl	80056e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_TIM2_Init+0xa4>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_TIM2_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_TIM2_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_TIM2_Init+0xa4>)
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_TIM2_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_TIM2_Init+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800081a:	2303      	movs	r3, #3
 800081c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000822:	2301      	movs	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000832:	2301      	movs	r3, #1
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_TIM2_Init+0xa4>)
 8000846:	f002 fbbd 	bl	8002fc4 <HAL_TIM_Encoder_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000850:	f000 f958 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_TIM2_Init+0xa4>)
 8000862:	f003 fbad 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800086c:	f000 f94a 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	; 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000074 	.word	0x20000074

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_USART1_UART_Init+0x90>)
 8000882:	4a23      	ldr	r2, [pc, #140]	; (8000910 <MX_USART1_UART_Init+0x94>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_USART1_UART_Init+0x90>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_USART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008c6:	f003 fdc7 	bl	8004458 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f918 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008d8:	f004 fe39 	bl	800554e <HAL_UARTEx_SetTxFifoThreshold>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f000 f90f 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4808      	ldr	r0, [pc, #32]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008ea:	f004 fe6e 	bl	80055ca <HAL_UARTEx_SetRxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f906 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008fa:	f004 fdef 	bl	80054dc <HAL_UARTEx_DisableFifoMode>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 f8fe 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000c0 	.word	0x200000c0
 8000910:	40013800 	.word	0x40013800

08000914 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 800091a:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <MX_USART2_UART_Init+0x94>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 800095e:	f003 fd7b 	bl	8004458 <HAL_UART_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000968:	f000 f8cc 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000970:	f004 fded 	bl	800554e <HAL_UARTEx_SetTxFifoThreshold>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800097a:	f000 f8c3 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000982:	f004 fe22 	bl	80055ca <HAL_UARTEx_SetRxFifoThreshold>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800098c:	f000 f8ba 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_USART2_UART_Init+0x90>)
 8000992:	f004 fda3 	bl	80054dc <HAL_UARTEx_DisableFifoMode>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800099c:	f000 f8b2 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000154 	.word	0x20000154
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_DMA_Init+0x60>)
 80009b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <MX_DMA_Init+0x60>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6493      	str	r3, [r2, #72]	; 0x48
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_DMA_Init+0x60>)
 80009c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_DMA_Init+0x60>)
 80009cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_DMA_Init+0x60>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6493      	str	r3, [r2, #72]	; 0x48
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_DMA_Init+0x60>)
 80009d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	200b      	movs	r0, #11
 80009e8:	f000 fc33 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009ec:	200b      	movs	r0, #11
 80009ee:	f000 fc4a 	bl	8001286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	200c      	movs	r0, #12
 80009f8:	f000 fc2b 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009fc:	200c      	movs	r0, #12
 80009fe:	f000 fc42 	bl	8001286 <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a24      	ldr	r2, [pc, #144]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a44:	f043 0320 	orr.w	r3, r3, #32
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_GPIO_Init+0xac>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <MX_GPIO_Init+0xb0>)
 8000a9e:	f000 fe7f 	bl	80017a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2028      	movs	r0, #40	; 0x28
 8000aa8:	f000 fbd3 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aac:	2028      	movs	r0, #40	; 0x28
 8000aae:	f000 fbea 	bl	8001286 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000800 	.word	0x48000800

08000ac4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// @User : Test for UART2 ablility to send data through usb cable
// TODO: remove later
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if (huart == &huart1){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_UART_RxCpltCallback+0x34>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d10d      	bne.n	8000af0 <HAL_UART_RxCpltCallback+0x2c>
		uint8_t payload[] = "GotData";
 8000ad4:	4a09      	ldr	r2, [pc, #36]	; (8000afc <HAL_UART_RxCpltCallback+0x38>)
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ade:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_UART_Transmit(&huart2, payload, sizeof(payload), 20);
 8000ae2:	f107 0108 	add.w	r1, r7, #8
 8000ae6:	2314      	movs	r3, #20
 8000ae8:	2208      	movs	r2, #8
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_UART_RxCpltCallback+0x3c>)
 8000aec:	f003 fd04 	bl	80044f8 <HAL_UART_Transmit>
	}
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000c0 	.word	0x200000c0
 8000afc:	08005754 	.word	0x08005754
 8000b00:	20000154 	.word	0x20000154

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	; 0x60
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b46:	f001 f875 	bl	8001c34 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_TIM_Base_MspInit+0x7c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d128      	bne.n	8000bcc <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_TIM_Base_MspInit+0x80>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <HAL_TIM_Base_MspInit+0x80>)
 8000b80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b84:	6613      	str	r3, [r2, #96]	; 0x60
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_TIM_Base_MspInit+0x80>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_TIM_Base_MspInit+0x80>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_TIM_Base_MspInit+0x80>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_TIM_Base_MspInit+0x80>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f000 fdea 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40012c00 	.word	0x40012c00
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bfc:	d128      	bne.n	8000c50 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000c2e:	2322      	movs	r3, #34	; 0x22
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4c:	f000 fda8 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <HAL_TIM_MspPostInit+0x68>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d11d      	bne.n	8000cba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_TIM_MspPostInit+0x6c>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_TIM_MspPostInit+0x6c>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_TIM_MspPostInit+0x6c>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ca8:	2306      	movs	r3, #6
 8000caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f000 fd73 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40012c00 	.word	0x40012c00
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0a0      	sub	sp, #128	; 0x80
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	2254      	movs	r2, #84	; 0x54
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 fcf9 	bl	80056e4 <memset>
  if(huart->Instance==USART1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a68      	ldr	r2, [pc, #416]	; (8000e98 <HAL_UART_MspInit+0x1cc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d161      	bne.n	8000dc0 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fcd1 	bl	80026b0 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d14:	f7ff fef6 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d18:	4b60      	ldr	r3, [pc, #384]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1c:	4a5f      	ldr	r2, [pc, #380]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d22:	6613      	str	r3, [r2, #96]	; 0x60
 8000d24:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	4b5a      	ldr	r3, [pc, #360]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d34:	4a59      	ldr	r2, [pc, #356]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3c:	4b57      	ldr	r3, [pc, #348]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d48:	2330      	movs	r3, #48	; 0x30
 8000d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d60:	4619      	mov	r1, r3
 8000d62:	484f      	ldr	r0, [pc, #316]	; (8000ea0 <HAL_UART_MspInit+0x1d4>)
 8000d64:	f000 fd1c 	bl	80017a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000d68:	4b4e      	ldr	r3, [pc, #312]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <HAL_UART_MspInit+0x1dc>)
 8000d6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000d6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000d70:	2218      	movs	r2, #24
 8000d72:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d74:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d80:	4b48      	ldr	r3, [pc, #288]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8c:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000d94:	2220      	movs	r2, #32
 8000d96:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d98:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000da0:	4840      	ldr	r0, [pc, #256]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000da2:	f000 fa8b 	bl	80012bc <HAL_DMA_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8000dac:	f7ff feaa 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a3c      	ldr	r2, [pc, #240]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000db8:	4a3a      	ldr	r2, [pc, #232]	; (8000ea4 <HAL_UART_MspInit+0x1d8>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbe:	e066      	b.n	8000e8e <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a39      	ldr	r2, [pc, #228]	; (8000eac <HAL_UART_MspInit+0x1e0>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d161      	bne.n	8000e8e <HAL_UART_MspInit+0x1c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fc6a 	bl	80026b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 8000de2:	f7ff fe8f 	bl	8000b04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de6:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	4a2c      	ldr	r2, [pc, #176]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6593      	str	r3, [r2, #88]	; 0x58
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <HAL_UART_MspInit+0x1d0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e16:	230c      	movs	r3, #12
 8000e18:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e26:	2307      	movs	r3, #7
 8000e28:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f000 fcb4 	bl	80017a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_UART_MspInit+0x1e8>)
 8000e3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e40:	221a      	movs	r2, #26
 8000e42:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e64:	2220      	movs	r2, #32
 8000e66:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e6a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e72:	f000 fa23 	bl	80012bc <HAL_DMA_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8000e7c:	f7ff fe42 	bl	8000b04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000e88:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_UART_MspInit+0x1e4>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e8e:	bf00      	nop
 8000e90:	3780      	adds	r7, #128	; 0x80
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	200001e8 	.word	0x200001e8
 8000ea8:	4002001c 	.word	0x4002001c
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	20000248 	.word	0x20000248
 8000eb4:	40020008 	.word	0x40020008

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f8ac 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <DMA1_Channel1_IRQHandler+0x10>)
 8000f12:	f000 faf6 	bl	8001502 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000248 	.word	0x20000248

08000f20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DMA1_Channel2_IRQHandler+0x10>)
 8000f26:	f000 faec 	bl	8001502 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200001e8 	.word	0x200001e8

08000f34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f3c:	f000 fdb2 	bl	8001aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f004 fbad 	bl	80056f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f9a:	f7ff fabb 	bl	8000514 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   r0, =_estack
 8000fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fac:	080057ac 	.word	0x080057ac
  ldr r2, =_sbss
 8000fb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fb4:	200002bc 	.word	0x200002bc

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>

08000fba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f939 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f80e 	bl	8000fec <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	e001      	b.n	8000fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fdc:	f7ff fd98 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]

}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_InitTick+0x68>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d022      	beq.n	8001046 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_InitTick+0x6c>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_InitTick+0x68>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800100c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001010:	fbb2 f3f3 	udiv	r3, r2, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f944 	bl	80012a2 <HAL_SYSTICK_Config>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10f      	bne.n	8001040 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	d809      	bhi.n	800103a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001026:	2200      	movs	r2, #0
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	f04f 30ff 	mov.w	r0, #4294967295
 800102e:	f000 f910 	bl	8001252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_InitTick+0x70>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e007      	b.n	800104a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e004      	b.n	800104a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e001      	b.n	800104a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000008 	.word	0x20000008
 8001058:	20000000 	.word	0x20000000
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x1c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x20>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4413      	add	r3, r2
 800106e:	4a03      	ldr	r2, [pc, #12]	; (800107c <HAL_IncTick+0x1c>)
 8001070:	6013      	str	r3, [r2, #0]
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	200002b8 	.word	0x200002b8
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200002b8 	.word	0x200002b8

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff29 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001260:	f7ff ff40 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f7ff ff90 	bl	8001190 <NVIC_EncodePriority>
 8001270:	4602      	mov	r2, r0
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff5f 	bl	800113c <__NVIC_SetPriority>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff33 	bl	8001100 <__NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffa4 	bl	80011f8 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e08d      	b.n	80013ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <HAL_DMA_Init+0x138>)
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d80f      	bhi.n	80012fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <HAL_DMA_Init+0x13c>)
 80012e2:	4413      	add	r3, r2
 80012e4:	4a45      	ldr	r2, [pc, #276]	; (80013fc <HAL_DMA_Init+0x140>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	009a      	lsls	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a42      	ldr	r2, [pc, #264]	; (8001400 <HAL_DMA_Init+0x144>)
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
 80012f8:	e00e      	b.n	8001318 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4b40      	ldr	r3, [pc, #256]	; (8001404 <HAL_DMA_Init+0x148>)
 8001302:	4413      	add	r3, r2
 8001304:	4a3d      	ldr	r2, [pc, #244]	; (80013fc <HAL_DMA_Init+0x140>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	009a      	lsls	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a3c      	ldr	r2, [pc, #240]	; (8001408 <HAL_DMA_Init+0x14c>)
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800132e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001332:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800133c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f9b6 	bl	80016dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001378:	d102      	bne.n	8001380 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001394:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d010      	beq.n	80013c0 <HAL_DMA_Init+0x104>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d80c      	bhi.n	80013c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f9d6 	bl	8001758 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	e008      	b.n	80013d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020407 	.word	0x40020407
 80013f8:	bffdfff8 	.word	0xbffdfff8
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	40020000 	.word	0x40020000
 8001404:	bffdfbf8 	.word	0xbffdfbf8
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_DMA_Start_IT+0x20>
 8001428:	2302      	movs	r3, #2
 800142a:	e066      	b.n	80014fa <HAL_DMA_Start_IT+0xee>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d155      	bne.n	80014ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0201 	bic.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 f8fb 	bl	8001660 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	2b00      	cmp	r3, #0
 8001470:	d008      	beq.n	8001484 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 020e 	orr.w	r2, r2, #14
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e00f      	b.n	80014a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0204 	bic.w	r2, r2, #4
 8001492:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 020a 	orr.w	r2, r2, #10
 80014a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0201 	orr.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e005      	b.n	80014f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014f4:	2302      	movs	r3, #2
 80014f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	2204      	movs	r2, #4
 8001524:	409a      	lsls	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4013      	ands	r3, r2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d026      	beq.n	800157c <HAL_DMA_IRQHandler+0x7a>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d021      	beq.n	800157c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	2b00      	cmp	r3, #0
 8001544:	d107      	bne.n	8001556 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0204 	bic.w	r2, r2, #4
 8001554:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f003 021f 	and.w	r2, r3, #31
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	2104      	movs	r1, #4
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	2b00      	cmp	r3, #0
 8001570:	d071      	beq.n	8001656 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800157a:	e06c      	b.n	8001656 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	2202      	movs	r2, #2
 8001586:	409a      	lsls	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d02e      	beq.n	80015ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d029      	beq.n	80015ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10b      	bne.n	80015c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 020a 	bic.w	r2, r2, #10
 80015b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	2102      	movs	r1, #2
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d038      	beq.n	8001656 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015ec:	e033      	b.n	8001656 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2208      	movs	r2, #8
 80015f8:	409a      	lsls	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d02a      	beq.n	8001658 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d025      	beq.n	8001658 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020e 	bic.w	r2, r2, #14
 800161a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f202 	lsl.w	r2, r1, r2
 800162e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001656:	bf00      	nop
 8001658:	bf00      	nop
}
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001676:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001688:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f003 021f 	and.w	r2, r3, #31
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d108      	bne.n	80016c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016be:	e007      	b.n	80016d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d802      	bhi.n	80016f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e001      	b.n	80016fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3b08      	subs	r3, #8
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	009a      	lsls	r2, r3, #2
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4413      	add	r3, r2
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001726:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	2201      	movs	r2, #1
 8001730:	409a      	lsls	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40020407 	.word	0x40020407
 8001748:	40020800 	.word	0x40020800
 800174c:	40020820 	.word	0x40020820
 8001750:	cccccccd 	.word	0xcccccccd
 8001754:	40020880 	.word	0x40020880

08001758 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800177a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3b01      	subs	r3, #1
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	2201      	movs	r2, #1
 8001786:	409a      	lsls	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	1000823f 	.word	0x1000823f
 800179c:	40020940 	.word	0x40020940

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ae:	e15a      	b.n	8001a66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 814c 	beq.w	8001a60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d005      	beq.n	80017e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d130      	bne.n	8001842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001816:	2201      	movs	r2, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 0201 	and.w	r2, r3, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b03      	cmp	r3, #3
 800184c:	d017      	beq.n	800187e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d123      	bne.n	80018d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	6939      	ldr	r1, [r7, #16]
 80018ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0203 	and.w	r2, r3, #3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80a6 	beq.w	8001a60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 8001916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001918:	4a5a      	ldr	r2, [pc, #360]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6613      	str	r3, [r2, #96]	; 0x60
 8001920:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <HAL_GPIO_Init+0x2e4>)
 8001922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800192c:	4a56      	ldr	r2, [pc, #344]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001956:	d01f      	beq.n	8001998 <HAL_GPIO_Init+0x1f8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a4c      	ldr	r2, [pc, #304]	; (8001a8c <HAL_GPIO_Init+0x2ec>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d019      	beq.n	8001994 <HAL_GPIO_Init+0x1f4>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a4b      	ldr	r2, [pc, #300]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d013      	beq.n	8001990 <HAL_GPIO_Init+0x1f0>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <HAL_GPIO_Init+0x2f4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00d      	beq.n	800198c <HAL_GPIO_Init+0x1ec>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a49      	ldr	r2, [pc, #292]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x1e8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_GPIO_Init+0x2fc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_GPIO_Init+0x1e4>
 8001980:	2305      	movs	r3, #5
 8001982:	e00a      	b.n	800199a <HAL_GPIO_Init+0x1fa>
 8001984:	2306      	movs	r3, #6
 8001986:	e008      	b.n	800199a <HAL_GPIO_Init+0x1fa>
 8001988:	2304      	movs	r3, #4
 800198a:	e006      	b.n	800199a <HAL_GPIO_Init+0x1fa>
 800198c:	2303      	movs	r3, #3
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1fa>
 8001990:	2302      	movs	r3, #2
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1fa>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1fa>
 8001998:	2300      	movs	r3, #0
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019aa:	4937      	ldr	r1, [pc, #220]	; (8001a88 <HAL_GPIO_Init+0x2e8>)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b8:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019dc:	4a30      	ldr	r2, [pc, #192]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019e2:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a06:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f47f ae9d 	bne.w	80017b0 <HAL_GPIO_Init+0x10>
  }
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	48000400 	.word	0x48000400
 8001a90:	48000800 	.word	0x48000800
 8001a94:	48000c00 	.word	0x48000c00
 8001a98:	48001000 	.word	0x48001000
 8001a9c:	48001400 	.word	0x48001400
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d006      	beq.n	8001ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f806 	bl	8001ad4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d141      	bne.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001afa:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b06:	d131      	bne.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b08:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b0e:	4a46      	ldr	r2, [pc, #280]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b20:	4a41      	ldr	r2, [pc, #260]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b28:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2232      	movs	r2, #50	; 0x32
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	4a3f      	ldr	r2, [pc, #252]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	0c9b      	lsrs	r3, r3, #18
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3e:	e002      	b.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b46:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b52:	d102      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f2      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b5a:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b66:	d158      	bne.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e057      	b.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a2d      	ldr	r2, [pc, #180]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b7c:	e04d      	b.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b84:	d141      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d131      	bne.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b9a:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bac:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2232      	movs	r2, #50	; 0x32
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	0c9b      	lsrs	r3, r3, #18
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bca:	e002      	b.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bde:	d102      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f2      	bne.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf2:	d112      	bne.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e011      	b.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c08:	e007      	b.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	431bde83 	.word	0x431bde83

08001c34 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c42:	6093      	str	r3, [r2, #8]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40007000 	.word	0x40007000

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e2fe      	b.n	8002264 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d075      	beq.n	8001d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c72:	4b97      	ldr	r3, [pc, #604]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c7c:	4b94      	ldr	r3, [pc, #592]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d102      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3e>
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d002      	beq.n	8001c98 <HAL_RCC_OscConfig+0x44>
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	4b8d      	ldr	r3, [pc, #564]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d05b      	beq.n	8001d5c <HAL_RCC_OscConfig+0x108>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d157      	bne.n	8001d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e2d9      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x74>
 8001cba:	4b85      	ldr	r3, [pc, #532]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a84      	ldr	r2, [pc, #528]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x98>
 8001cd2:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a7e      	ldr	r2, [pc, #504]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a7b      	ldr	r2, [pc, #492]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cec:	4b78      	ldr	r3, [pc, #480]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a77      	ldr	r2, [pc, #476]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a74      	ldr	r2, [pc, #464]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f9ba 	bl	8001084 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f9b6 	bl	8001084 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e29e      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d26:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xc0>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f9a6 	bl	8001084 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f9a2 	bl	8001084 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e28a      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d4e:	4b60      	ldr	r3, [pc, #384]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0xe8>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d075      	beq.n	8001e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6a:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d74:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d102      	bne.n	8001d8a <HAL_RCC_OscConfig+0x136>
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_OscConfig+0x13c>
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d11f      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d90:	4b4f      	ldr	r3, [pc, #316]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_OscConfig+0x154>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e25d      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	4946      	ldr	r1, [pc, #280]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dbc:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f913 	bl	8000fec <HAL_InitTick>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d043      	beq.n	8001e54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e249      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d023      	beq.n	8001e20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd8:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a3c      	ldr	r2, [pc, #240]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f94e 	bl	8001084 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff f94a 	bl	8001084 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e232      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfe:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	061b      	lsls	r3, r3, #24
 8001e18:	492d      	ldr	r1, [pc, #180]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
 8001e1e:	e01a      	b.n	8001e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f92a 	bl	8001084 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff f926 	bl	8001084 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e20e      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e46:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1e0>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d041      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d01c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e70:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f903 	bl	8001084 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e82:	f7ff f8ff 	bl	8001084 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e1e7      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0ef      	beq.n	8001e82 <HAL_RCC_OscConfig+0x22e>
 8001ea2:	e020      	b.n	8001ee6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f8e6 	bl	8001084 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eba:	e00d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebc:	f7ff f8e2 	bl	8001084 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d906      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1ca      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	4b8c      	ldr	r3, [pc, #560]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ea      	bne.n	8001ebc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80a6 	beq.w	8002040 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ef8:	4b84      	ldr	r3, [pc, #528]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x2b4>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x2b6>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	4a7e      	ldr	r2, [pc, #504]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1a:	4b7c      	ldr	r3, [pc, #496]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2a:	4b79      	ldr	r3, [pc, #484]	; (8002110 <HAL_RCC_OscConfig+0x4bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f36:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x4bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	; (8002110 <HAL_RCC_OscConfig+0x4bc>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7ff f89f 	bl	8001084 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7ff f89b 	bl	8001084 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e183      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5c:	4b6c      	ldr	r3, [pc, #432]	; (8002110 <HAL_RCC_OscConfig+0x4bc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d108      	bne.n	8001f82 <HAL_RCC_OscConfig+0x32e>
 8001f70:	4b66      	ldr	r3, [pc, #408]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a65      	ldr	r2, [pc, #404]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f80:	e024      	b.n	8001fcc <HAL_RCC_OscConfig+0x378>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d110      	bne.n	8001fac <HAL_RCC_OscConfig+0x358>
 8001f8a:	4b60      	ldr	r3, [pc, #384]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	4a5e      	ldr	r2, [pc, #376]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	4a5a      	ldr	r2, [pc, #360]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001faa:	e00f      	b.n	8001fcc <HAL_RCC_OscConfig+0x378>
 8001fac:	4b57      	ldr	r3, [pc, #348]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	4a56      	ldr	r2, [pc, #344]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d016      	beq.n	8002002 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f856 	bl	8001084 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7ff f852 	bl	8001084 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e138      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff2:	4b46      	ldr	r3, [pc, #280]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0ed      	beq.n	8001fdc <HAL_RCC_OscConfig+0x388>
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7ff f83f 	bl	8001084 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff f83b 	bl	8001084 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	; 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e121      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1ed      	bne.n	800200a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800202e:	7ffb      	ldrb	r3, [r7, #31]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d105      	bne.n	8002040 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002034:	4b35      	ldr	r3, [pc, #212]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	4a34      	ldr	r2, [pc, #208]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 800203a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800203e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b00      	cmp	r3, #0
 800204a:	d03c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01c      	beq.n	800208e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205a:	4a2c      	ldr	r2, [pc, #176]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff f80e 	bl	8001084 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206c:	f7ff f80a 	bl	8001084 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0f2      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ef      	beq.n	800206c <HAL_RCC_OscConfig+0x418>
 800208c:	e01b      	b.n	80020c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8002090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7fe fff1 	bl	8001084 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a6:	f7fe ffed 	bl	8001084 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0d5      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ef      	bne.n	80020a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80c9 	beq.w	8002262 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	f000 8083 	beq.w	80021e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d15e      	bne.n	80021a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_RCC_OscConfig+0x4b8>)
 80020ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe ffc7 	bl	8001084 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f8:	e00c      	b.n	8002114 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fa:	f7fe ffc3 	bl	8001084 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d905      	bls.n	8002114 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0ab      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	4b55      	ldr	r3, [pc, #340]	; (800226c <HAL_RCC_OscConfig+0x618>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1ec      	bne.n	80020fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002120:	4b52      	ldr	r3, [pc, #328]	; (800226c <HAL_RCC_OscConfig+0x618>)
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_RCC_OscConfig+0x61c>)
 8002126:	4013      	ands	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6a11      	ldr	r1, [r2, #32]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002130:	3a01      	subs	r2, #1
 8002132:	0112      	lsls	r2, r2, #4
 8002134:	4311      	orrs	r1, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800213a:	0212      	lsls	r2, r2, #8
 800213c:	4311      	orrs	r1, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002142:	0852      	lsrs	r2, r2, #1
 8002144:	3a01      	subs	r2, #1
 8002146:	0552      	lsls	r2, r2, #21
 8002148:	4311      	orrs	r1, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800214e:	0852      	lsrs	r2, r2, #1
 8002150:	3a01      	subs	r2, #1
 8002152:	0652      	lsls	r2, r2, #25
 8002154:	4311      	orrs	r1, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800215a:	06d2      	lsls	r2, r2, #27
 800215c:	430a      	orrs	r2, r1
 800215e:	4943      	ldr	r1, [pc, #268]	; (800226c <HAL_RCC_OscConfig+0x618>)
 8002160:	4313      	orrs	r3, r2
 8002162:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002164:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_RCC_OscConfig+0x618>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a40      	ldr	r2, [pc, #256]	; (800226c <HAL_RCC_OscConfig+0x618>)
 800216a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002170:	4b3e      	ldr	r3, [pc, #248]	; (800226c <HAL_RCC_OscConfig+0x618>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a3d      	ldr	r2, [pc, #244]	; (800226c <HAL_RCC_OscConfig+0x618>)
 8002176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe ff82 	bl	8001084 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7fe ff7e 	bl	8001084 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e066      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	4b35      	ldr	r3, [pc, #212]	; (800226c <HAL_RCC_OscConfig+0x618>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x530>
 80021a2:	e05e      	b.n	8002262 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a4:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_RCC_OscConfig+0x618>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a30      	ldr	r2, [pc, #192]	; (800226c <HAL_RCC_OscConfig+0x618>)
 80021aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe ff68 	bl	8001084 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7fe ff64 	bl	8001084 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e04c      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_RCC_OscConfig+0x618>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_OscConfig+0x618>)
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4924      	ldr	r1, [pc, #144]	; (800226c <HAL_RCC_OscConfig+0x618>)
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_OscConfig+0x620>)
 80021de:	4013      	ands	r3, r2
 80021e0:	60cb      	str	r3, [r1, #12]
 80021e2:	e03e      	b.n	8002262 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e039      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_RCC_OscConfig+0x618>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0203 	and.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	429a      	cmp	r2, r3
 8002202:	d12c      	bne.n	800225e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	3b01      	subs	r3, #1
 8002210:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d123      	bne.n	800225e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d11b      	bne.n	800225e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d113      	bne.n	800225e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d109      	bne.n	800225e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	3b01      	subs	r3, #1
 8002258:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	019f800c 	.word	0x019f800c
 8002274:	feeefffc 	.word	0xfeeefffc

08002278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e11e      	b.n	80024ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b91      	ldr	r3, [pc, #580]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b8e      	ldr	r3, [pc, #568]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 020f 	bic.w	r2, r3, #15
 80022a6:	498c      	ldr	r1, [pc, #560]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b8a      	ldr	r3, [pc, #552]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e106      	b.n	80024ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d073      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d129      	bne.n	8002328 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d4:	4b81      	ldr	r3, [pc, #516]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0f4      	b.n	80024ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022e4:	f000 f99e 	bl	8002624 <RCC_GetSysClockFreqFromPLLSource>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4a7c      	ldr	r2, [pc, #496]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d93f      	bls.n	8002372 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022f2:	4b7a      	ldr	r3, [pc, #488]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002306:	2b00      	cmp	r3, #0
 8002308:	d033      	beq.n	8002372 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800230e:	2b00      	cmp	r3, #0
 8002310:	d12f      	bne.n	8002372 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231a:	4a70      	ldr	r2, [pc, #448]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 800231c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002320:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e024      	b.n	8002372 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d107      	bne.n	8002340 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0c6      	b.n	80024ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002340:	4b66      	ldr	r3, [pc, #408]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0be      	b.n	80024ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002350:	f000 f8ce 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8002354:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4a61      	ldr	r2, [pc, #388]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d909      	bls.n	8002372 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800235e:	4b5f      	ldr	r3, [pc, #380]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002366:	4a5d      	ldr	r2, [pc, #372]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002372:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f023 0203 	bic.w	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4957      	ldr	r1, [pc, #348]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002384:	f7fe fe7e 	bl	8001084 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238c:	f7fe fe7a 	bl	8001084 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e095      	b.n	80024ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	4b4e      	ldr	r3, [pc, #312]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 020c 	and.w	r2, r3, #12
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1eb      	bne.n	800238c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d023      	beq.n	8002408 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023cc:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a42      	ldr	r2, [pc, #264]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80023d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023e4:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80023ec:	4a3b      	ldr	r2, [pc, #236]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80023ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4936      	ldr	r1, [pc, #216]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
 8002406:	e008      	b.n	800241a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b80      	cmp	r3, #128	; 0x80
 800240c:	d105      	bne.n	800241a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800240e:	4b33      	ldr	r3, [pc, #204]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4a32      	ldr	r2, [pc, #200]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002418:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241a:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d21d      	bcs.n	8002464 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002428:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 020f 	bic.w	r2, r3, #15
 8002430:	4929      	ldr	r1, [pc, #164]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002438:	f7fe fe24 	bl	8001084 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7fe fe20 	bl	8001084 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e03b      	b.n	80024ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_RCC_ClockConfig+0x260>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d1ed      	bne.n	8002440 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4917      	ldr	r1, [pc, #92]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	490f      	ldr	r1, [pc, #60]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024a2:	f000 f825 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	490c      	ldr	r1, [pc, #48]	; (80024e4 <HAL_RCC_ClockConfig+0x26c>)
 80024b4:	5ccb      	ldrb	r3, [r1, r3]
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_RCC_ClockConfig+0x270>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x274>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd90 	bl	8000fec <HAL_InitTick>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	04c4b400 	.word	0x04c4b400
 80024e4:	0800575c 	.word	0x0800575c
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d102      	bne.n	8002508 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	e047      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d102      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e03e      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800251a:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d136      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3301      	adds	r3, #1
 800253c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d10c      	bne.n	800255e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002544:	4a1a      	ldr	r2, [pc, #104]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254e:	68d2      	ldr	r2, [r2, #12]
 8002550:	0a12      	lsrs	r2, r2, #8
 8002552:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
      break;
 800255c:	e00c      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800255e:	4a13      	ldr	r2, [pc, #76]	; (80025ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	68d2      	ldr	r2, [r2, #12]
 800256a:	0a12      	lsrs	r2, r2, #8
 800256c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
      break;
 8002576:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0e5b      	lsrs	r3, r3, #25
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	3301      	adds	r3, #1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	e001      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002598:	693b      	ldr	r3, [r7, #16]
}
 800259a:	4618      	mov	r0, r3
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	00f42400 	.word	0x00f42400
 80025b0:	016e3600 	.word	0x016e3600

080025b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4904      	ldr	r1, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	0800576c 	.word	0x0800576c

080025f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025fc:	f7ff ffda 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0adb      	lsrs	r3, r3, #11
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4904      	ldr	r1, [pc, #16]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	0800576c 	.word	0x0800576c

08002624 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3301      	adds	r3, #1
 8002640:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d10c      	bne.n	8002662 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002648:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002652:	68d2      	ldr	r2, [r2, #12]
 8002654:	0a12      	lsrs	r2, r2, #8
 8002656:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
    break;
 8002660:	e00c      	b.n	800267c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002662:	4a12      	ldr	r2, [pc, #72]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800266c:	68d2      	ldr	r2, [r2, #12]
 800266e:	0a12      	lsrs	r2, r2, #8
 8002670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
    break;
 800267a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0e5b      	lsrs	r3, r3, #25
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002696:	687b      	ldr	r3, [r7, #4]
}
 8002698:	4618      	mov	r0, r3
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40021000 	.word	0x40021000
 80026a8:	016e3600 	.word	0x016e3600
 80026ac:	00f42400 	.word	0x00f42400

080026b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b8:	2300      	movs	r3, #0
 80026ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026bc:	2300      	movs	r3, #0
 80026be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8098 	beq.w	80027fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	4a3f      	ldr	r2, [pc, #252]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6593      	str	r3, [r2, #88]	; 0x58
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026fa:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a39      	ldr	r2, [pc, #228]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002706:	f7fe fcbd 	bl	8001084 <HAL_GetTick>
 800270a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800270c:	e009      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7fe fcb9 	bl	8001084 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d902      	bls.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	74fb      	strb	r3, [r7, #19]
        break;
 8002720:	e005      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002722:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0ef      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d159      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002734:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01e      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	d019      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002750:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800277c:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fc79 	bl	8001084 <HAL_GetTick>
 8002792:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002794:	e00b      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe fc75 	bl	8001084 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d902      	bls.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	74fb      	strb	r3, [r7, #19]
            break;
 80027ac:	e006      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ec      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d0:	4903      	ldr	r1, [pc, #12]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027d8:	e008      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	74bb      	strb	r3, [r7, #18]
 80027de:	e005      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ec:	7c7b      	ldrb	r3, [r7, #17]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4ba7      	ldr	r3, [pc, #668]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	4aa6      	ldr	r2, [pc, #664]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800280a:	4ba1      	ldr	r3, [pc, #644]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002810:	f023 0203 	bic.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	499d      	ldr	r1, [pc, #628]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800282c:	4b98      	ldr	r3, [pc, #608]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f023 020c 	bic.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4995      	ldr	r1, [pc, #596]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800284e:	4b90      	ldr	r3, [pc, #576]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	498c      	ldr	r1, [pc, #560]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002870:	4b87      	ldr	r3, [pc, #540]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	4984      	ldr	r1, [pc, #528]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002892:	4b7f      	ldr	r3, [pc, #508]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	497b      	ldr	r1, [pc, #492]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028b4:	4b76      	ldr	r3, [pc, #472]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	4973      	ldr	r1, [pc, #460]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028d6:	4b6e      	ldr	r3, [pc, #440]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	496a      	ldr	r1, [pc, #424]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028f8:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4962      	ldr	r1, [pc, #392]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800291a:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	4959      	ldr	r1, [pc, #356]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800293c:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	4951      	ldr	r1, [pc, #324]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800295e:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	4948      	ldr	r1, [pc, #288]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4940      	ldr	r1, [pc, #256]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299e:	d105      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a3a      	ldr	r2, [pc, #232]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	4932      	ldr	r1, [pc, #200]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d6:	d105      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029f0:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	4924      	ldr	r1, [pc, #144]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a1e      	ldr	r2, [pc, #120]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	4916      	ldr	r1, [pc, #88]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d019      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4908      	ldr	r1, [pc, #32]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7e:	d109      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a02      	ldr	r2, [pc, #8]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
 8002a8c:	e002      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4926      	ldr	r1, [pc, #152]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002abe:	d105      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae6:	4918      	ldr	r1, [pc, #96]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d105      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000

08002b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e049      	b.n	8002bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fd fff0 	bl	8000b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f000 fd78 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d001      	beq.n	8002c14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e04c      	b.n	8002cae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <HAL_TIM_Base_Start+0xc0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d022      	beq.n	8002c6c <HAL_TIM_Base_Start+0x70>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d01d      	beq.n	8002c6c <HAL_TIM_Base_Start+0x70>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <HAL_TIM_Base_Start+0xc4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d018      	beq.n	8002c6c <HAL_TIM_Base_Start+0x70>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_TIM_Base_Start+0xc8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d013      	beq.n	8002c6c <HAL_TIM_Base_Start+0x70>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <HAL_TIM_Base_Start+0xcc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00e      	beq.n	8002c6c <HAL_TIM_Base_Start+0x70>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <HAL_TIM_Base_Start+0xd0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d009      	beq.n	8002c6c <HAL_TIM_Base_Start+0x70>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_TIM_Base_Start+0xd4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d004      	beq.n	8002c6c <HAL_TIM_Base_Start+0x70>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <HAL_TIM_Base_Start+0xd8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d115      	bne.n	8002c98 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_TIM_Base_Start+0xdc>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d015      	beq.n	8002caa <HAL_TIM_Base_Start+0xae>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c84:	d011      	beq.n	8002caa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c96:	e008      	b.n	8002caa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e000      	b.n	8002cac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002caa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40000800 	.word	0x40000800
 8002cc8:	40000c00 	.word	0x40000c00
 8002ccc:	40013400 	.word	0x40013400
 8002cd0:	40014000 	.word	0x40014000
 8002cd4:	40015000 	.word	0x40015000
 8002cd8:	00010007 	.word	0x00010007

08002cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e049      	b.n	8002d82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f841 	bl	8002d8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f000 fcb0 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_TIM_PWM_Start+0x24>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e03c      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d109      	bne.n	8002dde <HAL_TIM_PWM_Start+0x3e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	e02f      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d109      	bne.n	8002df8 <HAL_TIM_PWM_Start+0x58>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e022      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d109      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x72>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e015      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d109      	bne.n	8002e2c <HAL_TIM_PWM_Start+0x8c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e008      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0a6      	b.n	8002f94 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_PWM_Start+0xb6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e54:	e023      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_PWM_Start+0xc6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e64:	e01b      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_PWM_Start+0xd6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e74:	e013      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_PWM_Start+0xe6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e84:	e00b      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_PWM_Start+0xf6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e94:	e003      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	6839      	ldr	r1, [r7, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 f864 	bl	8003f74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <HAL_TIM_PWM_Start+0x1fc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d018      	beq.n	8002ee8 <HAL_TIM_PWM_Start+0x148>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a39      	ldr	r2, [pc, #228]	; (8002fa0 <HAL_TIM_PWM_Start+0x200>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d013      	beq.n	8002ee8 <HAL_TIM_PWM_Start+0x148>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a37      	ldr	r2, [pc, #220]	; (8002fa4 <HAL_TIM_PWM_Start+0x204>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_TIM_PWM_Start+0x148>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a36      	ldr	r2, [pc, #216]	; (8002fa8 <HAL_TIM_PWM_Start+0x208>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <HAL_TIM_PWM_Start+0x148>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a34      	ldr	r2, [pc, #208]	; (8002fac <HAL_TIM_PWM_Start+0x20c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_TIM_PWM_Start+0x148>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a33      	ldr	r2, [pc, #204]	; (8002fb0 <HAL_TIM_PWM_Start+0x210>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_TIM_PWM_Start+0x14c>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_TIM_PWM_Start+0x14e>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a25      	ldr	r2, [pc, #148]	; (8002f9c <HAL_TIM_PWM_Start+0x1fc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x1b2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f14:	d01d      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x1b2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <HAL_TIM_PWM_Start+0x214>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x1b2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <HAL_TIM_PWM_Start+0x218>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x1b2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_TIM_PWM_Start+0x21c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x1b2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_TIM_PWM_Start+0x200>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x1b2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_TIM_PWM_Start+0x204>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x1b2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_TIM_PWM_Start+0x210>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d115      	bne.n	8002f7e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_TIM_PWM_Start+0x220>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d015      	beq.n	8002f90 <HAL_TIM_PWM_Start+0x1f0>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d011      	beq.n	8002f90 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	e008      	b.n	8002f90 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	e000      	b.n	8002f92 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40013400 	.word	0x40013400
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40014400 	.word	0x40014400
 8002fac:	40014800 	.word	0x40014800
 8002fb0:	40015000 	.word	0x40015000
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40000c00 	.word	0x40000c00
 8002fc0:	00010007 	.word	0x00010007

08002fc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e097      	b.n	8003108 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7fd fdf5 	bl	8000bdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003008:	f023 0307 	bic.w	r3, r3, #7
 800300c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	4619      	mov	r1, r3
 8003018:	4610      	mov	r0, r2
 800301a:	f000 fb31 	bl	8003680 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	4313      	orrs	r3, r2
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003064:	f023 030c 	bic.w	r3, r3, #12
 8003068:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003074:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	4313      	orrs	r3, r2
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	011a      	lsls	r2, r3, #4
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	031b      	lsls	r3, r3, #12
 8003094:	4313      	orrs	r3, r2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80030a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	4313      	orrs	r3, r2
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003120:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003128:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003130:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003138:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d110      	bne.n	8003162 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003146:	7b7b      	ldrb	r3, [r7, #13]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d001      	beq.n	8003150 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e069      	b.n	8003224 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003160:	e031      	b.n	80031c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d110      	bne.n	800318a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d102      	bne.n	8003174 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800316e:	7b3b      	ldrb	r3, [r7, #12]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d001      	beq.n	8003178 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e055      	b.n	8003224 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003188:	e01d      	b.n	80031c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d108      	bne.n	80031a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003190:	7bbb      	ldrb	r3, [r7, #14]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003196:	7b7b      	ldrb	r3, [r7, #13]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d102      	bne.n	80031a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800319c:	7b3b      	ldrb	r3, [r7, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d001      	beq.n	80031a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e03e      	b.n	8003224 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_TIM_Encoder_Start+0xc4>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d008      	beq.n	80031e4 <HAL_TIM_Encoder_Start+0xd4>
 80031d2:	e00f      	b.n	80031f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2201      	movs	r2, #1
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fec9 	bl	8003f74 <TIM_CCxChannelCmd>
      break;
 80031e2:	e016      	b.n	8003212 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	2104      	movs	r1, #4
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fec1 	bl	8003f74 <TIM_CCxChannelCmd>
      break;
 80031f2:	e00e      	b.n	8003212 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2201      	movs	r2, #1
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 feb9 	bl	8003f74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	2104      	movs	r1, #4
 800320a:	4618      	mov	r0, r3
 800320c:	f000 feb2 	bl	8003f74 <TIM_CCxChannelCmd>
      break;
 8003210:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003246:	2302      	movs	r3, #2
 8003248:	e0ff      	b.n	800344a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b14      	cmp	r3, #20
 8003256:	f200 80f0 	bhi.w	800343a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	080032b5 	.word	0x080032b5
 8003264:	0800343b 	.word	0x0800343b
 8003268:	0800343b 	.word	0x0800343b
 800326c:	0800343b 	.word	0x0800343b
 8003270:	080032f5 	.word	0x080032f5
 8003274:	0800343b 	.word	0x0800343b
 8003278:	0800343b 	.word	0x0800343b
 800327c:	0800343b 	.word	0x0800343b
 8003280:	08003337 	.word	0x08003337
 8003284:	0800343b 	.word	0x0800343b
 8003288:	0800343b 	.word	0x0800343b
 800328c:	0800343b 	.word	0x0800343b
 8003290:	08003377 	.word	0x08003377
 8003294:	0800343b 	.word	0x0800343b
 8003298:	0800343b 	.word	0x0800343b
 800329c:	0800343b 	.word	0x0800343b
 80032a0:	080033b9 	.word	0x080033b9
 80032a4:	0800343b 	.word	0x0800343b
 80032a8:	0800343b 	.word	0x0800343b
 80032ac:	0800343b 	.word	0x0800343b
 80032b0:	080033f9 	.word	0x080033f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fa94 	bl	80037e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0208 	orr.w	r2, r2, #8
 80032ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6999      	ldr	r1, [r3, #24]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
      break;
 80032f2:	e0a5      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fb0e 	bl	800391c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	619a      	str	r2, [r3, #24]
      break;
 8003334:	e084      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fb81 	bl	8003a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0208 	orr.w	r2, r2, #8
 8003350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0204 	bic.w	r2, r2, #4
 8003360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69d9      	ldr	r1, [r3, #28]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	61da      	str	r2, [r3, #28]
      break;
 8003374:	e064      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fbf3 	bl	8003b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	61da      	str	r2, [r3, #28]
      break;
 80033b6:	e043      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fc66 	bl	8003c90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0204 	bic.w	r2, r2, #4
 80033e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033f6:	e023      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fcb0 	bl	8003d64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003412:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003422:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	021a      	lsls	r2, r3, #8
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003438:	e002      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
      break;
 800343e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003448:	7dfb      	ldrb	r3, [r7, #23]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop

08003454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_TIM_ConfigClockSource+0x1c>
 800346c:	2302      	movs	r3, #2
 800346e:	e0f6      	b.n	800365e <HAL_TIM_ConfigClockSource+0x20a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800348e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800349a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6f      	ldr	r2, [pc, #444]	; (8003668 <HAL_TIM_ConfigClockSource+0x214>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	f000 80c1 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 80034b0:	4a6d      	ldr	r2, [pc, #436]	; (8003668 <HAL_TIM_ConfigClockSource+0x214>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	f200 80c6 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 80034b8:	4a6c      	ldr	r2, [pc, #432]	; (800366c <HAL_TIM_ConfigClockSource+0x218>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	f000 80b9 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 80034c0:	4a6a      	ldr	r2, [pc, #424]	; (800366c <HAL_TIM_ConfigClockSource+0x218>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	f200 80be 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 80034c8:	4a69      	ldr	r2, [pc, #420]	; (8003670 <HAL_TIM_ConfigClockSource+0x21c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	f000 80b1 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 80034d0:	4a67      	ldr	r2, [pc, #412]	; (8003670 <HAL_TIM_ConfigClockSource+0x21c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f200 80b6 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 80034d8:	4a66      	ldr	r2, [pc, #408]	; (8003674 <HAL_TIM_ConfigClockSource+0x220>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	f000 80a9 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 80034e0:	4a64      	ldr	r2, [pc, #400]	; (8003674 <HAL_TIM_ConfigClockSource+0x220>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	f200 80ae 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 80034e8:	4a63      	ldr	r2, [pc, #396]	; (8003678 <HAL_TIM_ConfigClockSource+0x224>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f000 80a1 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 80034f0:	4a61      	ldr	r2, [pc, #388]	; (8003678 <HAL_TIM_ConfigClockSource+0x224>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	f200 80a6 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 80034f8:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_TIM_ConfigClockSource+0x228>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f000 8099 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 8003500:	4a5e      	ldr	r2, [pc, #376]	; (800367c <HAL_TIM_ConfigClockSource+0x228>)
 8003502:	4293      	cmp	r3, r2
 8003504:	f200 809e 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 8003508:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800350c:	f000 8091 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 8003510:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003514:	f200 8096 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	f000 8089 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 8003520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003524:	f200 808e 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 8003528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352c:	d03e      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x158>
 800352e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003532:	f200 8087 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353a:	f000 8086 	beq.w	800364a <HAL_TIM_ConfigClockSource+0x1f6>
 800353e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003542:	d87f      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 8003544:	2b70      	cmp	r3, #112	; 0x70
 8003546:	d01a      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x12a>
 8003548:	2b70      	cmp	r3, #112	; 0x70
 800354a:	d87b      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 800354c:	2b60      	cmp	r3, #96	; 0x60
 800354e:	d050      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x19e>
 8003550:	2b60      	cmp	r3, #96	; 0x60
 8003552:	d877      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 8003554:	2b50      	cmp	r3, #80	; 0x50
 8003556:	d03c      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x17e>
 8003558:	2b50      	cmp	r3, #80	; 0x50
 800355a:	d873      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d058      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x1be>
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d86f      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d064      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 8003568:	2b30      	cmp	r3, #48	; 0x30
 800356a:	d86b      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d060      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 8003570:	2b20      	cmp	r3, #32
 8003572:	d867      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05c      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 8003578:	2b10      	cmp	r3, #16
 800357a:	d05a      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x1de>
 800357c:	e062      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800358e:	f000 fcd1 	bl	8003f34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	609a      	str	r2, [r3, #8]
      break;
 80035aa:	e04f      	b.n	800364c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035bc:	f000 fcba 	bl	8003f34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ce:	609a      	str	r2, [r3, #8]
      break;
 80035d0:	e03c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	461a      	mov	r2, r3
 80035e0:	f000 fc2c 	bl	8003e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2150      	movs	r1, #80	; 0x50
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fc85 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80035f0:	e02c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fe:	461a      	mov	r2, r3
 8003600:	f000 fc4b 	bl	8003e9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2160      	movs	r1, #96	; 0x60
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fc75 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 8003610:	e01c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361e:	461a      	mov	r2, r3
 8003620:	f000 fc0c 	bl	8003e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2140      	movs	r1, #64	; 0x40
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fc65 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 8003630:	e00c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f000 fc5c 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 8003642:	e003      	b.n	800364c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      break;
 8003648:	e000      	b.n	800364c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800364a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	00100070 	.word	0x00100070
 800366c:	00100060 	.word	0x00100060
 8003670:	00100050 	.word	0x00100050
 8003674:	00100040 	.word	0x00100040
 8003678:	00100030 	.word	0x00100030
 800367c:	00100020 	.word	0x00100020

08003680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a4c      	ldr	r2, [pc, #304]	; (80037c4 <TIM_Base_SetConfig+0x144>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d017      	beq.n	80036c8 <TIM_Base_SetConfig+0x48>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369e:	d013      	beq.n	80036c8 <TIM_Base_SetConfig+0x48>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a49      	ldr	r2, [pc, #292]	; (80037c8 <TIM_Base_SetConfig+0x148>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00f      	beq.n	80036c8 <TIM_Base_SetConfig+0x48>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a48      	ldr	r2, [pc, #288]	; (80037cc <TIM_Base_SetConfig+0x14c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00b      	beq.n	80036c8 <TIM_Base_SetConfig+0x48>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a47      	ldr	r2, [pc, #284]	; (80037d0 <TIM_Base_SetConfig+0x150>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_Base_SetConfig+0x48>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a46      	ldr	r2, [pc, #280]	; (80037d4 <TIM_Base_SetConfig+0x154>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0x48>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a45      	ldr	r2, [pc, #276]	; (80037d8 <TIM_Base_SetConfig+0x158>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d108      	bne.n	80036da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a39      	ldr	r2, [pc, #228]	; (80037c4 <TIM_Base_SetConfig+0x144>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d023      	beq.n	800372a <TIM_Base_SetConfig+0xaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d01f      	beq.n	800372a <TIM_Base_SetConfig+0xaa>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a36      	ldr	r2, [pc, #216]	; (80037c8 <TIM_Base_SetConfig+0x148>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01b      	beq.n	800372a <TIM_Base_SetConfig+0xaa>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a35      	ldr	r2, [pc, #212]	; (80037cc <TIM_Base_SetConfig+0x14c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d017      	beq.n	800372a <TIM_Base_SetConfig+0xaa>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a34      	ldr	r2, [pc, #208]	; (80037d0 <TIM_Base_SetConfig+0x150>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <TIM_Base_SetConfig+0xaa>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a33      	ldr	r2, [pc, #204]	; (80037d4 <TIM_Base_SetConfig+0x154>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00f      	beq.n	800372a <TIM_Base_SetConfig+0xaa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a33      	ldr	r2, [pc, #204]	; (80037dc <TIM_Base_SetConfig+0x15c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00b      	beq.n	800372a <TIM_Base_SetConfig+0xaa>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a32      	ldr	r2, [pc, #200]	; (80037e0 <TIM_Base_SetConfig+0x160>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d007      	beq.n	800372a <TIM_Base_SetConfig+0xaa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a31      	ldr	r2, [pc, #196]	; (80037e4 <TIM_Base_SetConfig+0x164>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d003      	beq.n	800372a <TIM_Base_SetConfig+0xaa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2c      	ldr	r2, [pc, #176]	; (80037d8 <TIM_Base_SetConfig+0x158>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d108      	bne.n	800373c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <TIM_Base_SetConfig+0x144>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <TIM_Base_SetConfig+0x110>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <TIM_Base_SetConfig+0x154>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00f      	beq.n	8003790 <TIM_Base_SetConfig+0x110>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <TIM_Base_SetConfig+0x15c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00b      	beq.n	8003790 <TIM_Base_SetConfig+0x110>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <TIM_Base_SetConfig+0x160>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <TIM_Base_SetConfig+0x110>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <TIM_Base_SetConfig+0x164>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_Base_SetConfig+0x110>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <TIM_Base_SetConfig+0x158>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d103      	bne.n	8003798 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d105      	bne.n	80037b6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f023 0201 	bic.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	611a      	str	r2, [r3, #16]
  }
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800
 80037d0:	40000c00 	.word	0x40000c00
 80037d4:	40013400 	.word	0x40013400
 80037d8:	40015000 	.word	0x40015000
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800

080037e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f023 0201 	bic.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f023 0302 	bic.w	r3, r3, #2
 8003834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a30      	ldr	r2, [pc, #192]	; (8003904 <TIM_OC1_SetConfig+0x11c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <TIM_OC1_SetConfig+0x88>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a2f      	ldr	r2, [pc, #188]	; (8003908 <TIM_OC1_SetConfig+0x120>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00f      	beq.n	8003870 <TIM_OC1_SetConfig+0x88>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a2e      	ldr	r2, [pc, #184]	; (800390c <TIM_OC1_SetConfig+0x124>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <TIM_OC1_SetConfig+0x88>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a2d      	ldr	r2, [pc, #180]	; (8003910 <TIM_OC1_SetConfig+0x128>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <TIM_OC1_SetConfig+0x88>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <TIM_OC1_SetConfig+0x12c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_OC1_SetConfig+0x88>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a2b      	ldr	r2, [pc, #172]	; (8003918 <TIM_OC1_SetConfig+0x130>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d10c      	bne.n	800388a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f023 0308 	bic.w	r3, r3, #8
 8003876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <TIM_OC1_SetConfig+0x11c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <TIM_OC1_SetConfig+0xd2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <TIM_OC1_SetConfig+0x120>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00f      	beq.n	80038ba <TIM_OC1_SetConfig+0xd2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1b      	ldr	r2, [pc, #108]	; (800390c <TIM_OC1_SetConfig+0x124>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00b      	beq.n	80038ba <TIM_OC1_SetConfig+0xd2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <TIM_OC1_SetConfig+0x128>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <TIM_OC1_SetConfig+0xd2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a19      	ldr	r2, [pc, #100]	; (8003914 <TIM_OC1_SetConfig+0x12c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_OC1_SetConfig+0xd2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a18      	ldr	r2, [pc, #96]	; (8003918 <TIM_OC1_SetConfig+0x130>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d111      	bne.n	80038de <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40013400 	.word	0x40013400
 800390c:	40014000 	.word	0x40014000
 8003910:	40014400 	.word	0x40014400
 8003914:	40014800 	.word	0x40014800
 8003918:	40015000 	.word	0x40015000

0800391c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f023 0210 	bic.w	r2, r3, #16
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0320 	bic.w	r3, r3, #32
 800396a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <TIM_OC2_SetConfig+0x110>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_OC2_SetConfig+0x74>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <TIM_OC2_SetConfig+0x114>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_OC2_SetConfig+0x74>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a2a      	ldr	r2, [pc, #168]	; (8003a34 <TIM_OC2_SetConfig+0x118>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10d      	bne.n	80039ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <TIM_OC2_SetConfig+0x110>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <TIM_OC2_SetConfig+0xc0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a1e      	ldr	r2, [pc, #120]	; (8003a30 <TIM_OC2_SetConfig+0x114>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00f      	beq.n	80039dc <TIM_OC2_SetConfig+0xc0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1e      	ldr	r2, [pc, #120]	; (8003a38 <TIM_OC2_SetConfig+0x11c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00b      	beq.n	80039dc <TIM_OC2_SetConfig+0xc0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <TIM_OC2_SetConfig+0x120>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <TIM_OC2_SetConfig+0xc0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <TIM_OC2_SetConfig+0x124>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_OC2_SetConfig+0xc0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <TIM_OC2_SetConfig+0x118>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d113      	bne.n	8003a04 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40013400 	.word	0x40013400
 8003a34:	40015000 	.word	0x40015000
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800

08003a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <TIM_OC3_SetConfig+0x10c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <TIM_OC3_SetConfig+0x72>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2a      	ldr	r2, [pc, #168]	; (8003b54 <TIM_OC3_SetConfig+0x110>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <TIM_OC3_SetConfig+0x72>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <TIM_OC3_SetConfig+0x114>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10d      	bne.n	8003ad2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <TIM_OC3_SetConfig+0x10c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <TIM_OC3_SetConfig+0xbe>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <TIM_OC3_SetConfig+0x110>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00f      	beq.n	8003b02 <TIM_OC3_SetConfig+0xbe>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <TIM_OC3_SetConfig+0x118>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_OC3_SetConfig+0xbe>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <TIM_OC3_SetConfig+0x11c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_OC3_SetConfig+0xbe>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <TIM_OC3_SetConfig+0x120>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_OC3_SetConfig+0xbe>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a16      	ldr	r2, [pc, #88]	; (8003b58 <TIM_OC3_SetConfig+0x114>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d113      	bne.n	8003b2a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40013400 	.word	0x40013400
 8003b58:	40015000 	.word	0x40015000
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40014800 	.word	0x40014800

08003b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	031b      	lsls	r3, r3, #12
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <TIM_OC4_SetConfig+0x110>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_OC4_SetConfig+0x74>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <TIM_OC4_SetConfig+0x114>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC4_SetConfig+0x74>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <TIM_OC4_SetConfig+0x118>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10d      	bne.n	8003bf8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	031b      	lsls	r3, r3, #12
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <TIM_OC4_SetConfig+0x110>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <TIM_OC4_SetConfig+0xc0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <TIM_OC4_SetConfig+0x114>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00f      	beq.n	8003c28 <TIM_OC4_SetConfig+0xc0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <TIM_OC4_SetConfig+0x11c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <TIM_OC4_SetConfig+0xc0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <TIM_OC4_SetConfig+0x120>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_OC4_SetConfig+0xc0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <TIM_OC4_SetConfig+0x124>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_OC4_SetConfig+0xc0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <TIM_OC4_SetConfig+0x118>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d113      	bne.n	8003c50 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c36:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40013400 	.word	0x40013400
 8003c80:	40015000 	.word	0x40015000
 8003c84:	40014000 	.word	0x40014000
 8003c88:	40014400 	.word	0x40014400
 8003c8c:	40014800 	.word	0x40014800

08003c90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <TIM_OC5_SetConfig+0xbc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <TIM_OC5_SetConfig+0x82>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <TIM_OC5_SetConfig+0xc0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00f      	beq.n	8003d12 <TIM_OC5_SetConfig+0x82>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <TIM_OC5_SetConfig+0xc4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <TIM_OC5_SetConfig+0x82>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <TIM_OC5_SetConfig+0xc8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d007      	beq.n	8003d12 <TIM_OC5_SetConfig+0x82>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <TIM_OC5_SetConfig+0xcc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_OC5_SetConfig+0x82>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <TIM_OC5_SetConfig+0xd0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d109      	bne.n	8003d26 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	621a      	str	r2, [r3, #32]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40013400 	.word	0x40013400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800
 8003d60:	40015000 	.word	0x40015000

08003d64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	051b      	lsls	r3, r3, #20
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a1a      	ldr	r2, [pc, #104]	; (8003e24 <TIM_OC6_SetConfig+0xc0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <TIM_OC6_SetConfig+0x84>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <TIM_OC6_SetConfig+0xc4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00f      	beq.n	8003de8 <TIM_OC6_SetConfig+0x84>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <TIM_OC6_SetConfig+0xc8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00b      	beq.n	8003de8 <TIM_OC6_SetConfig+0x84>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <TIM_OC6_SetConfig+0xcc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_OC6_SetConfig+0x84>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <TIM_OC6_SetConfig+0xd0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_OC6_SetConfig+0x84>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <TIM_OC6_SetConfig+0xd4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d109      	bne.n	8003dfc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	029b      	lsls	r3, r3, #10
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40013400 	.word	0x40013400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800
 8003e38:	40015000 	.word	0x40015000

08003e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0201 	bic.w	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 030a 	bic.w	r3, r3, #10
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b087      	sub	sp, #28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 0210 	bic.w	r2, r3, #16
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f043 0307 	orr.w	r3, r3, #7
 8003f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	609a      	str	r2, [r3, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	609a      	str	r2, [r3, #8]
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	2201      	movs	r2, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1a      	ldr	r2, [r3, #32]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	401a      	ands	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1a      	ldr	r2, [r3, #32]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e074      	b.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a33      	ldr	r2, [pc, #204]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a31      	ldr	r2, [pc, #196]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d108      	bne.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800401c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d01d      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10c      	bne.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40013400 	.word	0x40013400
 80040d8:	40015000 	.word	0x40015000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40014000 	.word	0x40014000

080040ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004104:	2302      	movs	r3, #2
 8004106:	e078      	b.n	80041fa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1b      	ldr	r2, [pc, #108]	; (800420c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a19      	ldr	r2, [pc, #100]	; (8004210 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d11c      	bne.n	80041e8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	051b      	lsls	r3, r3, #20
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40013400 	.word	0x40013400
 8004210:	40015000 	.word	0x40015000

08004214 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8004214:	b480      	push	{r7}
 8004216:	b08b      	sub	sp, #44	; 0x2c
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIMEx_ConfigBreakInput+0x20>
 8004230:	2302      	movs	r3, #2
 8004232:	e10b      	b.n	800444c <HAL_TIMEx_ConfigBreakInput+0x238>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	f000 8096 	beq.w	8004372 <HAL_TIMEx_ConfigBreakInput+0x15e>
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	f200 809c 	bhi.w	8004384 <HAL_TIMEx_ConfigBreakInput+0x170>
 800424c:	2b20      	cmp	r3, #32
 800424e:	d849      	bhi.n	80042e4 <HAL_TIMEx_ConfigBreakInput+0xd0>
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8097 	beq.w	8004384 <HAL_TIMEx_ConfigBreakInput+0x170>
 8004256:	3b01      	subs	r3, #1
 8004258:	2b1f      	cmp	r3, #31
 800425a:	f200 8093 	bhi.w	8004384 <HAL_TIMEx_ConfigBreakInput+0x170>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <HAL_TIMEx_ConfigBreakInput+0x50>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	080042eb 	.word	0x080042eb
 8004268:	080042ff 	.word	0x080042ff
 800426c:	08004385 	.word	0x08004385
 8004270:	08004313 	.word	0x08004313
 8004274:	08004385 	.word	0x08004385
 8004278:	08004385 	.word	0x08004385
 800427c:	08004385 	.word	0x08004385
 8004280:	08004327 	.word	0x08004327
 8004284:	08004385 	.word	0x08004385
 8004288:	08004385 	.word	0x08004385
 800428c:	08004385 	.word	0x08004385
 8004290:	08004385 	.word	0x08004385
 8004294:	08004385 	.word	0x08004385
 8004298:	08004385 	.word	0x08004385
 800429c:	08004385 	.word	0x08004385
 80042a0:	0800433b 	.word	0x0800433b
 80042a4:	08004385 	.word	0x08004385
 80042a8:	08004385 	.word	0x08004385
 80042ac:	08004385 	.word	0x08004385
 80042b0:	08004385 	.word	0x08004385
 80042b4:	08004385 	.word	0x08004385
 80042b8:	08004385 	.word	0x08004385
 80042bc:	08004385 	.word	0x08004385
 80042c0:	08004385 	.word	0x08004385
 80042c4:	08004385 	.word	0x08004385
 80042c8:	08004385 	.word	0x08004385
 80042cc:	08004385 	.word	0x08004385
 80042d0:	08004385 	.word	0x08004385
 80042d4:	08004385 	.word	0x08004385
 80042d8:	08004385 	.word	0x08004385
 80042dc:	08004385 	.word	0x08004385
 80042e0:	0800434f 	.word	0x0800434f
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d03b      	beq.n	8004360 <HAL_TIMEx_ConfigBreakInput+0x14c>
 80042e8:	e04c      	b.n	8004384 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80042ea:	2301      	movs	r3, #1
 80042ec:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80042f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80042f8:	2309      	movs	r3, #9
 80042fa:	617b      	str	r3, [r7, #20]
      break;
 80042fc:	e04b      	b.n	8004396 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 80042fe:	2302      	movs	r3, #2
 8004300:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8004302:	2301      	movs	r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8004306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800430a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800430c:	230a      	movs	r3, #10
 800430e:	617b      	str	r3, [r7, #20]
      break;
 8004310:	e041      	b.n	8004396 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8004312:	2304      	movs	r3, #4
 8004314:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8004316:	2302      	movs	r3, #2
 8004318:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800431a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800431e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8004320:	230b      	movs	r3, #11
 8004322:	617b      	str	r3, [r7, #20]
      break;
 8004324:	e037      	b.n	8004396 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8004326:	2308      	movs	r3, #8
 8004328:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800432a:	2303      	movs	r3, #3
 800432c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800432e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004332:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8004334:	230c      	movs	r3, #12
 8004336:	617b      	str	r3, [r7, #20]
      break;
 8004338:	e02d      	b.n	8004396 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800433a:	2310      	movs	r3, #16
 800433c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800433e:	2304      	movs	r3, #4
 8004340:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8004342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004346:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8004348:	230d      	movs	r3, #13
 800434a:	617b      	str	r3, [r7, #20]
      break;
 800434c:	e023      	b.n	8004396 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 800434e:	2320      	movs	r3, #32
 8004350:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8004352:	2305      	movs	r3, #5
 8004354:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
      break;
 800435e:	e01a      	b.n	8004396 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 8004360:	2340      	movs	r3, #64	; 0x40
 8004362:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8004364:	2306      	movs	r3, #6
 8004366:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
      break;
 8004370:	e011      	b.n	8004396 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8004376:	2307      	movs	r3, #7
 8004378:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
      break;
 8004382:	e008      	b.n	8004396 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
      break;
 8004394:	bf00      	nop
    }
  }

  switch (BreakInput)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d003      	beq.n	80043a4 <HAL_TIMEx_ConfigBreakInput+0x190>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d025      	beq.n	80043ee <HAL_TIMEx_ConfigBreakInput+0x1da>
 80043a2:	e049      	b.n	8004438 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043aa:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	409a      	lsls	r2, r3
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	4013      	ands	r3, r2
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4013      	ands	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	409a      	lsls	r2, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4013      	ands	r3, r2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80043ec:	e028      	b.n	8004440 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f4:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	43db      	mvns	r3, r3
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	409a      	lsls	r2, r3
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	4013      	ands	r3, r2
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	43db      	mvns	r3, r3
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	409a      	lsls	r2, r3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	4013      	ands	r3, r2
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8004436:	e003      	b.n	8004440 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800443e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800444c:	4618      	mov	r0, r3
 800444e:	372c      	adds	r7, #44	; 0x2c
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e042      	b.n	80044f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fc fc25 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2224      	movs	r2, #36	; 0x24
 8004486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fc1e 	bl	8004ce4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f91f 	bl	80046ec <UART_SetConfig>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e01b      	b.n	80044f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fc9d 	bl	8004e28 <UART_CheckIdleState>
 80044ee:	4603      	mov	r3, r0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	2b20      	cmp	r3, #32
 8004510:	d17b      	bne.n	800460a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_UART_Transmit+0x26>
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e074      	b.n	800460c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2221      	movs	r2, #33	; 0x21
 800452e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004532:	f7fc fda7 	bl	8001084 <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004550:	d108      	bne.n	8004564 <HAL_UART_Transmit+0x6c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e003      	b.n	800456c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800456c:	e030      	b.n	80045d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fcff 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e03d      	b.n	800460c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	3302      	adds	r3, #2
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	e007      	b.n	80045be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1c8      	bne.n	800456e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2200      	movs	r2, #0
 80045e4:	2140      	movs	r1, #64	; 0x40
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fcc8 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e006      	b.n	800460c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004628:	2b20      	cmp	r3, #32
 800462a:	d137      	bne.n	800469c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_UART_Receive_DMA+0x24>
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e030      	b.n	800469e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_UART_Receive_DMA+0x94>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01f      	beq.n	800468c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d018      	beq.n	800468c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	613b      	str	r3, [r7, #16]
   return(result);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	623b      	str	r3, [r7, #32]
 800467a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	69f9      	ldr	r1, [r7, #28]
 800467e:	6a3a      	ldr	r2, [r7, #32]
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	61bb      	str	r3, [r7, #24]
   return(result);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e6      	bne.n	800465a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	461a      	mov	r2, r3
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fce0 	bl	8005058 <UART_Start_Receive_DMA>
 8004698:	4603      	mov	r3, r0
 800469a:	e000      	b.n	800469e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40008000 	.word	0x40008000

080046ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f0:	b08c      	sub	sp, #48	; 0x30
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	431a      	orrs	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	431a      	orrs	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	4313      	orrs	r3, r2
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4baa      	ldr	r3, [pc, #680]	; (80049c4 <UART_SetConfig+0x2d8>)
 800471c:	4013      	ands	r3, r2
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004724:	430b      	orrs	r3, r1
 8004726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a9f      	ldr	r2, [pc, #636]	; (80049c8 <UART_SetConfig+0x2dc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004754:	4313      	orrs	r3, r2
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004762:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800476c:	430b      	orrs	r3, r1
 800476e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f023 010f 	bic.w	r1, r3, #15
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a90      	ldr	r2, [pc, #576]	; (80049cc <UART_SetConfig+0x2e0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d125      	bne.n	80047dc <UART_SetConfig+0xf0>
 8004790:	4b8f      	ldr	r3, [pc, #572]	; (80049d0 <UART_SetConfig+0x2e4>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b03      	cmp	r3, #3
 800479c:	d81a      	bhi.n	80047d4 <UART_SetConfig+0xe8>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <UART_SetConfig+0xb8>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047c5 	.word	0x080047c5
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047cd 	.word	0x080047cd
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ba:	e116      	b.n	80049ea <UART_SetConfig+0x2fe>
 80047bc:	2302      	movs	r3, #2
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047c2:	e112      	b.n	80049ea <UART_SetConfig+0x2fe>
 80047c4:	2304      	movs	r3, #4
 80047c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ca:	e10e      	b.n	80049ea <UART_SetConfig+0x2fe>
 80047cc:	2308      	movs	r3, #8
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d2:	e10a      	b.n	80049ea <UART_SetConfig+0x2fe>
 80047d4:	2310      	movs	r3, #16
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047da:	e106      	b.n	80049ea <UART_SetConfig+0x2fe>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a7c      	ldr	r2, [pc, #496]	; (80049d4 <UART_SetConfig+0x2e8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d138      	bne.n	8004858 <UART_SetConfig+0x16c>
 80047e6:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <UART_SetConfig+0x2e4>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	d82d      	bhi.n	8004850 <UART_SetConfig+0x164>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x110>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004851 	.word	0x08004851
 8004804:	08004851 	.word	0x08004851
 8004808:	08004851 	.word	0x08004851
 800480c:	08004841 	.word	0x08004841
 8004810:	08004851 	.word	0x08004851
 8004814:	08004851 	.word	0x08004851
 8004818:	08004851 	.word	0x08004851
 800481c:	08004839 	.word	0x08004839
 8004820:	08004851 	.word	0x08004851
 8004824:	08004851 	.word	0x08004851
 8004828:	08004851 	.word	0x08004851
 800482c:	08004849 	.word	0x08004849
 8004830:	2300      	movs	r3, #0
 8004832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004836:	e0d8      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004838:	2302      	movs	r3, #2
 800483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800483e:	e0d4      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004840:	2304      	movs	r3, #4
 8004842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004846:	e0d0      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004848:	2308      	movs	r3, #8
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484e:	e0cc      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004850:	2310      	movs	r3, #16
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004856:	e0c8      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5e      	ldr	r2, [pc, #376]	; (80049d8 <UART_SetConfig+0x2ec>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d125      	bne.n	80048ae <UART_SetConfig+0x1c2>
 8004862:	4b5b      	ldr	r3, [pc, #364]	; (80049d0 <UART_SetConfig+0x2e4>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d016      	beq.n	800489e <UART_SetConfig+0x1b2>
 8004870:	2b30      	cmp	r3, #48	; 0x30
 8004872:	d818      	bhi.n	80048a6 <UART_SetConfig+0x1ba>
 8004874:	2b20      	cmp	r3, #32
 8004876:	d00a      	beq.n	800488e <UART_SetConfig+0x1a2>
 8004878:	2b20      	cmp	r3, #32
 800487a:	d814      	bhi.n	80048a6 <UART_SetConfig+0x1ba>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <UART_SetConfig+0x19a>
 8004880:	2b10      	cmp	r3, #16
 8004882:	d008      	beq.n	8004896 <UART_SetConfig+0x1aa>
 8004884:	e00f      	b.n	80048a6 <UART_SetConfig+0x1ba>
 8004886:	2300      	movs	r3, #0
 8004888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488c:	e0ad      	b.n	80049ea <UART_SetConfig+0x2fe>
 800488e:	2302      	movs	r3, #2
 8004890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004894:	e0a9      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004896:	2304      	movs	r3, #4
 8004898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489c:	e0a5      	b.n	80049ea <UART_SetConfig+0x2fe>
 800489e:	2308      	movs	r3, #8
 80048a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a4:	e0a1      	b.n	80049ea <UART_SetConfig+0x2fe>
 80048a6:	2310      	movs	r3, #16
 80048a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ac:	e09d      	b.n	80049ea <UART_SetConfig+0x2fe>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a4a      	ldr	r2, [pc, #296]	; (80049dc <UART_SetConfig+0x2f0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d125      	bne.n	8004904 <UART_SetConfig+0x218>
 80048b8:	4b45      	ldr	r3, [pc, #276]	; (80049d0 <UART_SetConfig+0x2e4>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048c2:	2bc0      	cmp	r3, #192	; 0xc0
 80048c4:	d016      	beq.n	80048f4 <UART_SetConfig+0x208>
 80048c6:	2bc0      	cmp	r3, #192	; 0xc0
 80048c8:	d818      	bhi.n	80048fc <UART_SetConfig+0x210>
 80048ca:	2b80      	cmp	r3, #128	; 0x80
 80048cc:	d00a      	beq.n	80048e4 <UART_SetConfig+0x1f8>
 80048ce:	2b80      	cmp	r3, #128	; 0x80
 80048d0:	d814      	bhi.n	80048fc <UART_SetConfig+0x210>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <UART_SetConfig+0x1f0>
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d008      	beq.n	80048ec <UART_SetConfig+0x200>
 80048da:	e00f      	b.n	80048fc <UART_SetConfig+0x210>
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e082      	b.n	80049ea <UART_SetConfig+0x2fe>
 80048e4:	2302      	movs	r3, #2
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e07e      	b.n	80049ea <UART_SetConfig+0x2fe>
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f2:	e07a      	b.n	80049ea <UART_SetConfig+0x2fe>
 80048f4:	2308      	movs	r3, #8
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fa:	e076      	b.n	80049ea <UART_SetConfig+0x2fe>
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004902:	e072      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a35      	ldr	r2, [pc, #212]	; (80049e0 <UART_SetConfig+0x2f4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d12a      	bne.n	8004964 <UART_SetConfig+0x278>
 800490e:	4b30      	ldr	r3, [pc, #192]	; (80049d0 <UART_SetConfig+0x2e4>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800491c:	d01a      	beq.n	8004954 <UART_SetConfig+0x268>
 800491e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004922:	d81b      	bhi.n	800495c <UART_SetConfig+0x270>
 8004924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004928:	d00c      	beq.n	8004944 <UART_SetConfig+0x258>
 800492a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492e:	d815      	bhi.n	800495c <UART_SetConfig+0x270>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <UART_SetConfig+0x250>
 8004934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004938:	d008      	beq.n	800494c <UART_SetConfig+0x260>
 800493a:	e00f      	b.n	800495c <UART_SetConfig+0x270>
 800493c:	2300      	movs	r3, #0
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004942:	e052      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004944:	2302      	movs	r3, #2
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494a:	e04e      	b.n	80049ea <UART_SetConfig+0x2fe>
 800494c:	2304      	movs	r3, #4
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004952:	e04a      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004954:	2308      	movs	r3, #8
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495a:	e046      	b.n	80049ea <UART_SetConfig+0x2fe>
 800495c:	2310      	movs	r3, #16
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004962:	e042      	b.n	80049ea <UART_SetConfig+0x2fe>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <UART_SetConfig+0x2dc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d13a      	bne.n	80049e4 <UART_SetConfig+0x2f8>
 800496e:	4b18      	ldr	r3, [pc, #96]	; (80049d0 <UART_SetConfig+0x2e4>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004974:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004978:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800497c:	d01a      	beq.n	80049b4 <UART_SetConfig+0x2c8>
 800497e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004982:	d81b      	bhi.n	80049bc <UART_SetConfig+0x2d0>
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004988:	d00c      	beq.n	80049a4 <UART_SetConfig+0x2b8>
 800498a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498e:	d815      	bhi.n	80049bc <UART_SetConfig+0x2d0>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <UART_SetConfig+0x2b0>
 8004994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004998:	d008      	beq.n	80049ac <UART_SetConfig+0x2c0>
 800499a:	e00f      	b.n	80049bc <UART_SetConfig+0x2d0>
 800499c:	2300      	movs	r3, #0
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a2:	e022      	b.n	80049ea <UART_SetConfig+0x2fe>
 80049a4:	2302      	movs	r3, #2
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049aa:	e01e      	b.n	80049ea <UART_SetConfig+0x2fe>
 80049ac:	2304      	movs	r3, #4
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b2:	e01a      	b.n	80049ea <UART_SetConfig+0x2fe>
 80049b4:	2308      	movs	r3, #8
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ba:	e016      	b.n	80049ea <UART_SetConfig+0x2fe>
 80049bc:	2310      	movs	r3, #16
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c2:	e012      	b.n	80049ea <UART_SetConfig+0x2fe>
 80049c4:	cfff69f3 	.word	0xcfff69f3
 80049c8:	40008000 	.word	0x40008000
 80049cc:	40013800 	.word	0x40013800
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40004400 	.word	0x40004400
 80049d8:	40004800 	.word	0x40004800
 80049dc:	40004c00 	.word	0x40004c00
 80049e0:	40005000 	.word	0x40005000
 80049e4:	2310      	movs	r3, #16
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4aae      	ldr	r2, [pc, #696]	; (8004ca8 <UART_SetConfig+0x5bc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	f040 8097 	bne.w	8004b24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d823      	bhi.n	8004a46 <UART_SetConfig+0x35a>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0x318>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a29 	.word	0x08004a29
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a37 	.word	0x08004a37
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a47 	.word	0x08004a47
 8004a20:	08004a47 	.word	0x08004a47
 8004a24:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a28:	f7fd fdd0 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8004a2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a2e:	e010      	b.n	8004a52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b9e      	ldr	r3, [pc, #632]	; (8004cac <UART_SetConfig+0x5c0>)
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a34:	e00d      	b.n	8004a52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fd fd5b 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8004a3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a3c:	e009      	b.n	8004a52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a44:	e005      	b.n	8004a52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8130 	beq.w	8004cba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	4a94      	ldr	r2, [pc, #592]	; (8004cb0 <UART_SetConfig+0x5c4>)
 8004a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	4413      	add	r3, r2
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d305      	bcc.n	8004a8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d903      	bls.n	8004a92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a90:	e113      	b.n	8004cba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	2200      	movs	r2, #0
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	60fa      	str	r2, [r7, #12]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	4a84      	ldr	r2, [pc, #528]	; (8004cb0 <UART_SetConfig+0x5c4>)
 8004aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ab4:	f7fb fbb0 	bl	8000218 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	020b      	lsls	r3, r1, #8
 8004aca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ace:	0202      	lsls	r2, r0, #8
 8004ad0:	6979      	ldr	r1, [r7, #20]
 8004ad2:	6849      	ldr	r1, [r1, #4]
 8004ad4:	0849      	lsrs	r1, r1, #1
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	460c      	mov	r4, r1
 8004ada:	4605      	mov	r5, r0
 8004adc:	eb12 0804 	adds.w	r8, r2, r4
 8004ae0:	eb43 0905 	adc.w	r9, r3, r5
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	469a      	mov	sl, r3
 8004aec:	4693      	mov	fp, r2
 8004aee:	4652      	mov	r2, sl
 8004af0:	465b      	mov	r3, fp
 8004af2:	4640      	mov	r0, r8
 8004af4:	4649      	mov	r1, r9
 8004af6:	f7fb fb8f 	bl	8000218 <__aeabi_uldivmod>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4613      	mov	r3, r2
 8004b00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b08:	d308      	bcc.n	8004b1c <UART_SetConfig+0x430>
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b10:	d204      	bcs.n	8004b1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a3a      	ldr	r2, [r7, #32]
 8004b18:	60da      	str	r2, [r3, #12]
 8004b1a:	e0ce      	b.n	8004cba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b22:	e0ca      	b.n	8004cba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2c:	d166      	bne.n	8004bfc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004b2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d827      	bhi.n	8004b86 <UART_SetConfig+0x49a>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0x450>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b71 	.word	0x08004b71
 8004b48:	08004b87 	.word	0x08004b87
 8004b4c:	08004b77 	.word	0x08004b77
 8004b50:	08004b87 	.word	0x08004b87
 8004b54:	08004b87 	.word	0x08004b87
 8004b58:	08004b87 	.word	0x08004b87
 8004b5c:	08004b7f 	.word	0x08004b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b60:	f7fd fd34 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8004b64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b66:	e014      	b.n	8004b92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7fd fd46 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b6e:	e010      	b.n	8004b92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b70:	4b4e      	ldr	r3, [pc, #312]	; (8004cac <UART_SetConfig+0x5c0>)
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b74:	e00d      	b.n	8004b92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b76:	f7fd fcbb 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8004b7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b7c:	e009      	b.n	8004b92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b84:	e005      	b.n	8004b92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8090 	beq.w	8004cba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	4a44      	ldr	r2, [pc, #272]	; (8004cb0 <UART_SetConfig+0x5c4>)
 8004ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bac:	005a      	lsls	r2, r3, #1
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	441a      	add	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	2b0f      	cmp	r3, #15
 8004bc4:	d916      	bls.n	8004bf4 <UART_SetConfig+0x508>
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bcc:	d212      	bcs.n	8004bf4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f023 030f 	bic.w	r3, r3, #15
 8004bd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	8bfb      	ldrh	r3, [r7, #30]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	8bfa      	ldrh	r2, [r7, #30]
 8004bf0:	60da      	str	r2, [r3, #12]
 8004bf2:	e062      	b.n	8004cba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bfa:	e05e      	b.n	8004cba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d828      	bhi.n	8004c56 <UART_SetConfig+0x56a>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <UART_SetConfig+0x520>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c57 	.word	0x08004c57
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c57 	.word	0x08004c57
 8004c2c:	08004c4f 	.word	0x08004c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7fd fccc 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c36:	e014      	b.n	8004c62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c38:	f7fd fcde 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 8004c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c3e:	e010      	b.n	8004c62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <UART_SetConfig+0x5c0>)
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c44:	e00d      	b.n	8004c62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c46:	f7fd fc53 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8004c4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c4c:	e009      	b.n	8004c62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c54:	e005      	b.n	8004c62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c60:	bf00      	nop
    }

    if (pclk != 0U)
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d028      	beq.n	8004cba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	4a10      	ldr	r2, [pc, #64]	; (8004cb0 <UART_SetConfig+0x5c4>)
 8004c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c72:	461a      	mov	r2, r3
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	441a      	add	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	d910      	bls.n	8004cb4 <UART_SetConfig+0x5c8>
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d20c      	bcs.n	8004cb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	e009      	b.n	8004cba <UART_SetConfig+0x5ce>
 8004ca6:	bf00      	nop
 8004ca8:	40008000 	.word	0x40008000
 8004cac:	00f42400 	.word	0x00f42400
 8004cb0:	08005774 	.word	0x08005774
      }
      else
      {
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3730      	adds	r7, #48	; 0x30
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de2:	d10a      	bne.n	8004dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b098      	sub	sp, #96	; 0x60
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e38:	f7fc f924 	bl	8001084 <HAL_GetTick>
 8004e3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d12f      	bne.n	8004eac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e54:	2200      	movs	r2, #0
 8004e56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f88e 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d022      	beq.n	8004eac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e84:	647b      	str	r3, [r7, #68]	; 0x44
 8004e86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e6      	bne.n	8004e66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e063      	b.n	8004f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d149      	bne.n	8004f4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f857 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d03c      	beq.n	8004f4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ef4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e6      	bne.n	8004ed4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f26:	61fa      	str	r2, [r7, #28]
 8004f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	69b9      	ldr	r1, [r7, #24]
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	617b      	str	r3, [r7, #20]
   return(result);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e5      	bne.n	8004f06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e012      	b.n	8004f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3758      	adds	r7, #88	; 0x58
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	e04f      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d04b      	beq.n	800502e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fc f875 	bl	8001084 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e04e      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d037      	beq.n	800502e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d034      	beq.n	800502e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d031      	beq.n	800502e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d110      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f920 	bl	8005226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e029      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005008:	d111      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f906 	bl	8005226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e00f      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4013      	ands	r3, r2
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	bf0c      	ite	eq
 800503e:	2301      	moveq	r3, #1
 8005040:	2300      	movne	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	429a      	cmp	r2, r3
 800504a:	d0a0      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b096      	sub	sp, #88	; 0x58
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2222      	movs	r2, #34	; 0x22
 8005080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02d      	beq.n	80050ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005094:	4a40      	ldr	r2, [pc, #256]	; (8005198 <UART_Start_Receive_DMA+0x140>)
 8005096:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509e:	4a3f      	ldr	r2, [pc, #252]	; (800519c <UART_Start_Receive_DMA+0x144>)
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a8:	4a3d      	ldr	r2, [pc, #244]	; (80051a0 <UART_Start_Receive_DMA+0x148>)
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b2:	2200      	movs	r2, #0
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3324      	adds	r3, #36	; 0x24
 80050c2:	4619      	mov	r1, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	461a      	mov	r2, r3
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	f7fc f99e 	bl	800140c <HAL_DMA_Start_IT>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2210      	movs	r2, #16
 80050da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e051      	b.n	800518e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d018      	beq.n	8005124 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005106:	657b      	str	r3, [r7, #84]	; 0x54
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005110:	64bb      	str	r3, [r7, #72]	; 0x48
 8005112:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800511e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e6      	bne.n	80050f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	653b      	str	r3, [r7, #80]	; 0x50
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005144:	637a      	str	r2, [r7, #52]	; 0x34
 8005146:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800514a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e5      	bne.n	8005124 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	613b      	str	r3, [r7, #16]
   return(result);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005178:	623a      	str	r2, [r7, #32]
 800517a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	6a3a      	ldr	r2, [r7, #32]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	61bb      	str	r3, [r7, #24]
   return(result);
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e5      	bne.n	8005158 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3758      	adds	r7, #88	; 0x58
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	080052f3 	.word	0x080052f3
 800519c:	0800541f 	.word	0x0800541f
 80051a0:	0800545d 	.word	0x0800545d

080051a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b08f      	sub	sp, #60	; 0x3c
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e6      	bne.n	80051ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fe:	61ba      	str	r2, [r7, #24]
 8005200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	6979      	ldr	r1, [r7, #20]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	613b      	str	r3, [r7, #16]
   return(result);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e5      	bne.n	80051de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800521a:	bf00      	nop
 800521c:	373c      	adds	r7, #60	; 0x3c
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005226:	b480      	push	{r7}
 8005228:	b095      	sub	sp, #84	; 0x54
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524c:	643b      	str	r3, [r7, #64]	; 0x40
 800524e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e6      	bne.n	800522e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3308      	adds	r3, #8
 8005266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005276:	f023 0301 	bic.w	r3, r3, #1
 800527a:	64bb      	str	r3, [r7, #72]	; 0x48
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800528a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e3      	bne.n	8005260 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d118      	bne.n	80052d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f023 0310 	bic.w	r3, r3, #16
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6979      	ldr	r1, [r7, #20]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	613b      	str	r3, [r7, #16]
   return(result);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e6      	bne.n	80052a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052e6:	bf00      	nop
 80052e8:	3754      	adds	r7, #84	; 0x54
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b09c      	sub	sp, #112	; 0x70
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d171      	bne.n	80053f2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800530e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005310:	2200      	movs	r2, #0
 8005312:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800532a:	66bb      	str	r3, [r7, #104]	; 0x68
 800532c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005334:	65bb      	str	r3, [r7, #88]	; 0x58
 8005336:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800533a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e6      	bne.n	8005316 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	667b      	str	r3, [r7, #100]	; 0x64
 8005360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005368:	647a      	str	r2, [r7, #68]	; 0x44
 800536a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800536e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3308      	adds	r3, #8
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	623b      	str	r3, [r7, #32]
   return(result);
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005392:	663b      	str	r3, [r7, #96]	; 0x60
 8005394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800539c:	633a      	str	r2, [r7, #48]	; 0x30
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b2:	2220      	movs	r2, #32
 80053b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d118      	bne.n	80053f2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f023 0310 	bic.w	r3, r3, #16
 80053d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	69b9      	ldr	r1, [r7, #24]
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	617b      	str	r3, [r7, #20]
   return(result);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e6      	bne.n	80053c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f4:	2200      	movs	r2, #0
 80053f6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005406:	4619      	mov	r1, r3
 8005408:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800540a:	f7ff f963 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800540e:	e002      	b.n	8005416 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005410:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005412:	f7fb fb57 	bl	8000ac4 <HAL_UART_RxCpltCallback>
}
 8005416:	bf00      	nop
 8005418:	3770      	adds	r7, #112	; 0x70
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005436:	2b01      	cmp	r3, #1
 8005438:	d109      	bne.n	800544e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	b29b      	uxth	r3, r3
 8005444:	4619      	mov	r1, r3
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff f944 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800544c:	e002      	b.n	8005454 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7ff f92c 	bl	80046ac <HAL_UART_RxHalfCpltCallback>
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d109      	bne.n	800549c <UART_DMAError+0x40>
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	2b21      	cmp	r3, #33	; 0x21
 800548c:	d106      	bne.n	800549c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2200      	movs	r2, #0
 8005492:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005496:	6978      	ldr	r0, [r7, #20]
 8005498:	f7ff fe84 	bl	80051a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d109      	bne.n	80054be <UART_DMAError+0x62>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b22      	cmp	r3, #34	; 0x22
 80054ae:	d106      	bne.n	80054be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80054b8:	6978      	ldr	r0, [r7, #20]
 80054ba:	f7ff feb4 	bl	8005226 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f043 0210 	orr.w	r2, r3, #16
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ce:	6978      	ldr	r0, [r7, #20]
 80054d0:	f7ff f8f6 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d4:	bf00      	nop
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e027      	b.n	8005542 <HAL_UARTEx_DisableFifoMode+0x66>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2224      	movs	r2, #36	; 0x24
 80054fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005520:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005562:	2302      	movs	r3, #2
 8005564:	e02d      	b.n	80055c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2224      	movs	r2, #36	; 0x24
 8005572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f850 	bl	8005648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055de:	2302      	movs	r3, #2
 80055e0:	e02d      	b.n	800563e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2224      	movs	r2, #36	; 0x24
 80055ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f812 	bl	8005648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005654:	2b00      	cmp	r3, #0
 8005656:	d108      	bne.n	800566a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005668:	e031      	b.n	80056ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800566a:	2308      	movs	r3, #8
 800566c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800566e:	2308      	movs	r3, #8
 8005670:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	0e5b      	lsrs	r3, r3, #25
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	0f5b      	lsrs	r3, r3, #29
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	7b3a      	ldrb	r2, [r7, #12]
 8005696:	4911      	ldr	r1, [pc, #68]	; (80056dc <UARTEx_SetNbDataToProcess+0x94>)
 8005698:	5c8a      	ldrb	r2, [r1, r2]
 800569a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800569e:	7b3a      	ldrb	r2, [r7, #12]
 80056a0:	490f      	ldr	r1, [pc, #60]	; (80056e0 <UARTEx_SetNbDataToProcess+0x98>)
 80056a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	7b7a      	ldrb	r2, [r7, #13]
 80056b4:	4909      	ldr	r1, [pc, #36]	; (80056dc <UARTEx_SetNbDataToProcess+0x94>)
 80056b6:	5c8a      	ldrb	r2, [r1, r2]
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056bc:	7b7a      	ldrb	r2, [r7, #13]
 80056be:	4908      	ldr	r1, [pc, #32]	; (80056e0 <UARTEx_SetNbDataToProcess+0x98>)
 80056c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	0800578c 	.word	0x0800578c
 80056e0:	08005794 	.word	0x08005794

080056e4 <memset>:
 80056e4:	4402      	add	r2, r0
 80056e6:	4603      	mov	r3, r0
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d100      	bne.n	80056ee <memset+0xa>
 80056ec:	4770      	bx	lr
 80056ee:	f803 1b01 	strb.w	r1, [r3], #1
 80056f2:	e7f9      	b.n	80056e8 <memset+0x4>

080056f4 <__libc_init_array>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	4d0d      	ldr	r5, [pc, #52]	; (800572c <__libc_init_array+0x38>)
 80056f8:	4c0d      	ldr	r4, [pc, #52]	; (8005730 <__libc_init_array+0x3c>)
 80056fa:	1b64      	subs	r4, r4, r5
 80056fc:	10a4      	asrs	r4, r4, #2
 80056fe:	2600      	movs	r6, #0
 8005700:	42a6      	cmp	r6, r4
 8005702:	d109      	bne.n	8005718 <__libc_init_array+0x24>
 8005704:	4d0b      	ldr	r5, [pc, #44]	; (8005734 <__libc_init_array+0x40>)
 8005706:	4c0c      	ldr	r4, [pc, #48]	; (8005738 <__libc_init_array+0x44>)
 8005708:	f000 f818 	bl	800573c <_init>
 800570c:	1b64      	subs	r4, r4, r5
 800570e:	10a4      	asrs	r4, r4, #2
 8005710:	2600      	movs	r6, #0
 8005712:	42a6      	cmp	r6, r4
 8005714:	d105      	bne.n	8005722 <__libc_init_array+0x2e>
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	f855 3b04 	ldr.w	r3, [r5], #4
 800571c:	4798      	blx	r3
 800571e:	3601      	adds	r6, #1
 8005720:	e7ee      	b.n	8005700 <__libc_init_array+0xc>
 8005722:	f855 3b04 	ldr.w	r3, [r5], #4
 8005726:	4798      	blx	r3
 8005728:	3601      	adds	r6, #1
 800572a:	e7f2      	b.n	8005712 <__libc_init_array+0x1e>
 800572c:	080057a4 	.word	0x080057a4
 8005730:	080057a4 	.word	0x080057a4
 8005734:	080057a4 	.word	0x080057a4
 8005738:	080057a8 	.word	0x080057a8

0800573c <_init>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr

08005748 <_fini>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr
