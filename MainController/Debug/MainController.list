
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad4  08003ad4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003adc  08003adc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  08003af0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003af0  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd77  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d94  00000000  00000000  0002cdf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0002eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bd  00000000  00000000  0002f5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002405c  00000000  00000000  0002fd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca62  00000000  00000000  00053db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5acd  00000000  00000000  0006081b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002850  00000000  00000000  001462e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00148b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003a74 	.word	0x08003a74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003a74 	.word	0x08003a74

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb59 	bl	8000bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f812 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f926 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f8f2 	bl	800070c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000528:	f000 f858 	bl	80005dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f8a2 	bl	8000674 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 10);
 8000530:	220a      	movs	r2, #10
 8000532:	4902      	ldr	r1, [pc, #8]	; (800053c <main+0x28>)
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <main+0x2c>)
 8000536:	f002 fa09 	bl	800294c <HAL_UART_Receive_DMA>
  // @User: Setup UART 2 for communication with Base system
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x26>
 800053c:	20000210 	.word	0x20000210
 8000540:	20000028 	.word	0x20000028

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	2238      	movs	r2, #56	; 0x38
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 fa62 	bl	8003a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000566:	2000      	movs	r0, #0
 8000568:	f001 f8e2 	bl	8001730 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2340      	movs	r3, #64	; 0x40
 8000578:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000582:	2304      	movs	r3, #4
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000586:	2355      	movs	r3, #85	; 0x55
 8000588:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f97c 	bl	8001898 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005a6:	f000 f971 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2303      	movs	r3, #3
 80005b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2104      	movs	r1, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fc7a 	bl	8001ebc <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ce:	f000 f95d 	bl	800088c <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <MX_USART1_UART_Init+0x90>)
 80005e2:	4a23      	ldr	r2, [pc, #140]	; (8000670 <MX_USART1_UART_Init+0x94>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_USART1_UART_Init+0x90>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_USART1_UART_Init+0x90>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_USART1_UART_Init+0x90>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_USART1_UART_Init+0x90>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_USART1_UART_Init+0x90>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_USART1_UART_Init+0x90>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_USART1_UART_Init+0x90>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_USART1_UART_Init+0x90>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_USART1_UART_Init+0x90>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_USART1_UART_Init+0x90>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000624:	4811      	ldr	r0, [pc, #68]	; (800066c <MX_USART1_UART_Init+0x90>)
 8000626:	f002 f8b3 	bl	8002790 <HAL_UART_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000630:	f000 f92c 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000634:	2100      	movs	r1, #0
 8000636:	480d      	ldr	r0, [pc, #52]	; (800066c <MX_USART1_UART_Init+0x90>)
 8000638:	f003 f925 	bl	8003886 <HAL_UARTEx_SetTxFifoThreshold>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000642:	f000 f923 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000646:	2100      	movs	r1, #0
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <MX_USART1_UART_Init+0x90>)
 800064a:	f003 f95a 	bl	8003902 <HAL_UARTEx_SetRxFifoThreshold>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000654:	f000 f91a 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_USART1_UART_Init+0x90>)
 800065a:	f003 f8db 	bl	8003814 <HAL_UARTEx_DisableFifoMode>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000664:	f000 f912 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40013800 	.word	0x40013800

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_USART2_UART_Init+0x90>)
 800067a:	4a23      	ldr	r2, [pc, #140]	; (8000708 <MX_USART2_UART_Init+0x94>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_USART2_UART_Init+0x90>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_USART2_UART_Init+0x90>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_USART2_UART_Init+0x90>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_USART2_UART_Init+0x90>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_USART2_UART_Init+0x90>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_USART2_UART_Init+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_USART2_UART_Init+0x90>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_USART2_UART_Init+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART2_UART_Init+0x90>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART2_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006bc:	4811      	ldr	r0, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x90>)
 80006be:	f002 f867 	bl	8002790 <HAL_UART_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006c8:	f000 f8e0 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_USART2_UART_Init+0x90>)
 80006d0:	f003 f8d9 	bl	8003886 <HAL_UARTEx_SetTxFifoThreshold>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006da:	f000 f8d7 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x90>)
 80006e2:	f003 f90e 	bl	8003902 <HAL_UARTEx_SetRxFifoThreshold>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006ec:	f000 f8ce 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_USART2_UART_Init+0x90>)
 80006f2:	f003 f88f 	bl	8003814 <HAL_UARTEx_DisableFifoMode>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006fc:	f000 f8c6 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000bc 	.word	0x200000bc
 8000708:	40004400 	.word	0x40004400

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_DMA_Init+0x60>)
 8000714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_DMA_Init+0x60>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6493      	str	r3, [r2, #72]	; 0x48
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_DMA_Init+0x60>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_DMA_Init+0x60>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MX_DMA_Init+0x60>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6493      	str	r3, [r2, #72]	; 0x48
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_DMA_Init+0x60>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	200b      	movs	r0, #11
 8000748:	f000 fb8d 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800074c:	200b      	movs	r0, #11
 800074e:	f000 fba4 	bl	8000e9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	200c      	movs	r0, #12
 8000758:	f000 fb85 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800075c:	200c      	movs	r0, #12
 800075e:	f000 fb9c 	bl	8000e9a <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <MX_GPIO_Init+0xd4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <MX_GPIO_Init+0xd4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a28      	ldr	r2, [pc, #160]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 ff63 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_GPIO_Init+0xd8>)
 800080a:	f000 fdd3 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080e:	2320      	movs	r3, #32
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f000 fdc4 	bl	80013b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	2028      	movs	r0, #40	; 0x28
 8000832:	f000 fb18 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000836:	2028      	movs	r0, #40	; 0x28
 8000838:	f000 fb2f 	bl	8000e9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000
 8000848:	48000800 	.word	0x48000800

0800084c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	if (huart == &huart1){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_UART_RxCpltCallback+0x34>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d10d      	bne.n	8000878 <HAL_UART_RxCpltCallback+0x2c>
		uint8_t payload[] = "GotData";
 800085c:	4a09      	ldr	r2, [pc, #36]	; (8000884 <HAL_UART_RxCpltCallback+0x38>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000866:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_UART_Transmit(&huart2, payload, sizeof(payload), 20);
 800086a:	f107 0108 	add.w	r1, r7, #8
 800086e:	2314      	movs	r3, #20
 8000870:	2208      	movs	r2, #8
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <HAL_UART_RxCpltCallback+0x3c>)
 8000874:	f001 ffdc 	bl	8002830 <HAL_UART_Transmit>
	}
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000028 	.word	0x20000028
 8000884:	08003a8c 	.word	0x08003a8c
 8000888:	200000bc 	.word	0x200000bc

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ce:	f000 ffd3 	bl	8001878 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b0a0      	sub	sp, #128	; 0x80
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	2254      	movs	r2, #84	; 0x54
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f003 f88b 	bl	8003a1c <memset>
  if(huart->Instance==USART1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a68      	ldr	r2, [pc, #416]	; (8000aac <HAL_UART_MspInit+0x1cc>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d161      	bne.n	80009d4 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fce9 	bl	80022f4 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000928:	f7ff ffb0 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092c:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000930:	4a5f      	ldr	r2, [pc, #380]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 8000932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000936:	6613      	str	r3, [r2, #96]	; 0x60
 8000938:	4b5d      	ldr	r3, [pc, #372]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 800093a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	4b5a      	ldr	r3, [pc, #360]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	4a59      	ldr	r2, [pc, #356]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000950:	4b57      	ldr	r3, [pc, #348]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800095c:	2330      	movs	r3, #48	; 0x30
 800095e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800096c:	2307      	movs	r3, #7
 800096e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000974:	4619      	mov	r1, r3
 8000976:	484f      	ldr	r0, [pc, #316]	; (8000ab4 <HAL_UART_MspInit+0x1d4>)
 8000978:	f000 fd1c 	bl	80013b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800097c:	4b4e      	ldr	r3, [pc, #312]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 800097e:	4a4f      	ldr	r2, [pc, #316]	; (8000abc <HAL_UART_MspInit+0x1dc>)
 8000980:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000982:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 8000984:	2218      	movs	r2, #24
 8000986:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000988:	4b4b      	ldr	r3, [pc, #300]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000994:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800099a:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a0:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80009a6:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 80009a8:	2220      	movs	r2, #32
 80009aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80009ac:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 80009ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009b4:	4840      	ldr	r0, [pc, #256]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 80009b6:	f000 fa8b 	bl	8000ed0 <HAL_DMA_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80009c0:	f7ff ff64 	bl	800088c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a3c      	ldr	r2, [pc, #240]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 80009c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80009cc:	4a3a      	ldr	r2, [pc, #232]	; (8000ab8 <HAL_UART_MspInit+0x1d8>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d2:	e066      	b.n	8000aa2 <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a39      	ldr	r2, [pc, #228]	; (8000ac0 <HAL_UART_MspInit+0x1e0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d161      	bne.n	8000aa2 <HAL_UART_MspInit+0x1c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 fc82 	bl	80022f4 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_UART_MspInit+0x11a>
      Error_Handler();
 80009f6:	f7ff ff49 	bl	800088c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	6593      	str	r3, [r2, #88]	; 0x58
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <HAL_UART_MspInit+0x1d0>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f000 fcb4 	bl	80013b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <HAL_UART_MspInit+0x1e8>)
 8000a50:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a54:	221a      	movs	r2, #26
 8000a56:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a78:	2220      	movs	r2, #32
 8000a7a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a7e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000a82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a84:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a86:	f000 fa23 	bl	8000ed0 <HAL_DMA_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8000a90:	f7ff fefc 	bl	800088c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <HAL_UART_MspInit+0x1e4>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000aa2:	bf00      	nop
 8000aa4:	3780      	adds	r7, #128	; 0x80
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000800 	.word	0x48000800
 8000ab8:	20000150 	.word	0x20000150
 8000abc:	4002001c 	.word	0x4002001c
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	200001b0 	.word	0x200001b0
 8000ac8:	40020008 	.word	0x40020008

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f8ac 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <DMA1_Channel1_IRQHandler+0x10>)
 8000b26:	f000 faf6 	bl	8001116 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200001b0 	.word	0x200001b0

08000b34 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DMA1_Channel2_IRQHandler+0x10>)
 8000b3a:	f000 faec 	bl	8001116 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000150 	.word	0x20000150

08000b48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b50:	f000 fdca 	bl	80016e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b80:	f7ff ffea 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f002 ff3f 	bl	8003a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fcb1 	bl	8000514 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   r0, =_estack
 8000bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc0:	08003ae4 	.word	0x08003ae4
  ldr r2, =_sbss
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc8:	20000220 	.word	0x20000220

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>

08000bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f939 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 f80e 	bl	8000c00 <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e001      	b.n	8000bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf0:	f7ff fe52 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]

}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_InitTick+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d022      	beq.n	8000c5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_InitTick+0x6c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f944 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10f      	bne.n	8000c54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	d809      	bhi.n	8000c4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c42:	f000 f910 	bl	8000e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_InitTick+0x70>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e007      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e004      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e001      	b.n	8000c5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c84:	6013      	str	r3, [r2, #0]
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	2000021c 	.word	0x2000021c
 8000c94:	20000008 	.word	0x20000008

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000021c 	.word	0x2000021c

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff8e 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff29 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff40 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff90 	bl	8000da4 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5f 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff33 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffa4 	bl	8000e0c <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e08d      	b.n	8000ffe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b47      	ldr	r3, [pc, #284]	; (8001008 <HAL_DMA_Init+0x138>)
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d80f      	bhi.n	8000f0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b45      	ldr	r3, [pc, #276]	; (800100c <HAL_DMA_Init+0x13c>)
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a45      	ldr	r2, [pc, #276]	; (8001010 <HAL_DMA_Init+0x140>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	009a      	lsls	r2, r3, #2
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a42      	ldr	r2, [pc, #264]	; (8001014 <HAL_DMA_Init+0x144>)
 8000f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0c:	e00e      	b.n	8000f2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b40      	ldr	r3, [pc, #256]	; (8001018 <HAL_DMA_Init+0x148>)
 8000f16:	4413      	add	r3, r2
 8000f18:	4a3d      	ldr	r2, [pc, #244]	; (8001010 <HAL_DMA_Init+0x140>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	009a      	lsls	r2, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a3c      	ldr	r2, [pc, #240]	; (800101c <HAL_DMA_Init+0x14c>)
 8000f2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f9b6 	bl	80012f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f8c:	d102      	bne.n	8000f94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000fa8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d010      	beq.n	8000fd4 <HAL_DMA_Init+0x104>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d80c      	bhi.n	8000fd4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f9d6 	bl	800136c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	e008      	b.n	8000fe6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020407 	.word	0x40020407
 800100c:	bffdfff8 	.word	0xbffdfff8
 8001010:	cccccccd 	.word	0xcccccccd
 8001014:	40020000 	.word	0x40020000
 8001018:	bffdfbf8 	.word	0xbffdfbf8
 800101c:	40020400 	.word	0x40020400

08001020 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <HAL_DMA_Start_IT+0x20>
 800103c:	2302      	movs	r3, #2
 800103e:	e066      	b.n	800110e <HAL_DMA_Start_IT+0xee>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d155      	bne.n	8001100 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2202      	movs	r2, #2
 8001058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0201 	bic.w	r2, r2, #1
 8001070:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 f8fb 	bl	8001274 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	2b00      	cmp	r3, #0
 8001084:	d008      	beq.n	8001098 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 020e 	orr.w	r2, r2, #14
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e00f      	b.n	80010b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0204 	bic.w	r2, r2, #4
 80010a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 020a 	orr.w	r2, r2, #10
 80010b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d007      	beq.n	80010d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0201 	orr.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e005      	b.n	800110c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001108:	2302      	movs	r3, #2
 800110a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800110c:	7dfb      	ldrb	r3, [r7, #23]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	2204      	movs	r2, #4
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d026      	beq.n	8001190 <HAL_DMA_IRQHandler+0x7a>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d021      	beq.n	8001190 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0204 	bic.w	r2, r2, #4
 8001168:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f003 021f 	and.w	r2, r3, #31
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	2104      	movs	r1, #4
 8001178:	fa01 f202 	lsl.w	r2, r1, r2
 800117c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	2b00      	cmp	r3, #0
 8001184:	d071      	beq.n	800126a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800118e:	e06c      	b.n	800126a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	2202      	movs	r2, #2
 800119a:	409a      	lsls	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d02e      	beq.n	8001202 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d029      	beq.n	8001202 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10b      	bne.n	80011d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 020a 	bic.w	r2, r2, #10
 80011ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	2102      	movs	r1, #2
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d038      	beq.n	800126a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001200:	e033      	b.n	800126a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 031f 	and.w	r3, r3, #31
 800120a:	2208      	movs	r2, #8
 800120c:	409a      	lsls	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d02a      	beq.n	800126c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d025      	beq.n	800126c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 020e 	bic.w	r2, r2, #14
 800122e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	f003 021f 	and.w	r2, r3, #31
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800126a:	bf00      	nop
 800126c:	bf00      	nop
}
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800128a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800129c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f003 021f 	and.w	r2, r3, #31
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d108      	bne.n	80012d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012d2:	e007      	b.n	80012e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	60da      	str	r2, [r3, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001300:	429a      	cmp	r2, r3
 8001302:	d802      	bhi.n	800130a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e001      	b.n	800130e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800130c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3b08      	subs	r3, #8
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	009a      	lsls	r2, r3, #2
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800133a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	2201      	movs	r2, #1
 8001344:	409a      	lsls	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	651a      	str	r2, [r3, #80]	; 0x50
}
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40020407 	.word	0x40020407
 800135c:	40020800 	.word	0x40020800
 8001360:	40020820 	.word	0x40020820
 8001364:	cccccccd 	.word	0xcccccccd
 8001368:	40020880 	.word	0x40020880

0800136c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800138e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3b01      	subs	r3, #1
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2201      	movs	r2, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	1000823f 	.word	0x1000823f
 80013b0:	40020940 	.word	0x40020940

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013c2:	e15a      	b.n	800167a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 814c 	beq.w	8001674 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	f003 0201 	and.w	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b03      	cmp	r3, #3
 8001460:	d017      	beq.n	8001492 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d123      	bne.n	80014e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0203 	and.w	r2, r3, #3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80a6 	beq.w	8001674 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <HAL_GPIO_Init+0x2e4>)
 800152a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152c:	4a5a      	ldr	r2, [pc, #360]	; (8001698 <HAL_GPIO_Init+0x2e4>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6613      	str	r3, [r2, #96]	; 0x60
 8001534:	4b58      	ldr	r3, [pc, #352]	; (8001698 <HAL_GPIO_Init+0x2e4>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001540:	4a56      	ldr	r2, [pc, #344]	; (800169c <HAL_GPIO_Init+0x2e8>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800156a:	d01f      	beq.n	80015ac <HAL_GPIO_Init+0x1f8>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_GPIO_Init+0x2ec>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d019      	beq.n	80015a8 <HAL_GPIO_Init+0x1f4>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_GPIO_Init+0x2f0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d013      	beq.n	80015a4 <HAL_GPIO_Init+0x1f0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <HAL_GPIO_Init+0x2f4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d00d      	beq.n	80015a0 <HAL_GPIO_Init+0x1ec>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a49      	ldr	r2, [pc, #292]	; (80016ac <HAL_GPIO_Init+0x2f8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d007      	beq.n	800159c <HAL_GPIO_Init+0x1e8>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a48      	ldr	r2, [pc, #288]	; (80016b0 <HAL_GPIO_Init+0x2fc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d101      	bne.n	8001598 <HAL_GPIO_Init+0x1e4>
 8001594:	2305      	movs	r3, #5
 8001596:	e00a      	b.n	80015ae <HAL_GPIO_Init+0x1fa>
 8001598:	2306      	movs	r3, #6
 800159a:	e008      	b.n	80015ae <HAL_GPIO_Init+0x1fa>
 800159c:	2304      	movs	r3, #4
 800159e:	e006      	b.n	80015ae <HAL_GPIO_Init+0x1fa>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x1fa>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x1fa>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x1fa>
 80015ac:	2300      	movs	r3, #0
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015be:	4937      	ldr	r1, [pc, #220]	; (800169c <HAL_GPIO_Init+0x2e8>)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015cc:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <HAL_GPIO_Init+0x300>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f0:	4a30      	ldr	r2, [pc, #192]	; (80016b4 <HAL_GPIO_Init+0x300>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015f6:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <HAL_GPIO_Init+0x300>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800161a:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <HAL_GPIO_Init+0x300>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001644:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_GPIO_Init+0x300>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	f47f ae9d 	bne.w	80013c4 <HAL_GPIO_Init+0x10>
  }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	48000800 	.word	0x48000800
 80016a8:	48000c00 	.word	0x48000c00
 80016ac:	48001000 	.word	0x48001000
 80016b0:	48001400 	.word	0x48001400
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f806 	bl	8001718 <HAL_GPIO_EXTI_Callback>
  }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d141      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800173e:	4b4b      	ldr	r3, [pc, #300]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174a:	d131      	bne.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800174c:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001752:	4a46      	ldr	r2, [pc, #280]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001764:	4a41      	ldr	r2, [pc, #260]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800176c:	4b40      	ldr	r3, [pc, #256]	; (8001870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2232      	movs	r2, #50	; 0x32
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	4a3f      	ldr	r2, [pc, #252]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	0c9b      	lsrs	r3, r3, #18
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001782:	e002      	b.n	800178a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3b01      	subs	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001796:	d102      	bne.n	800179e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f2      	bne.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017aa:	d158      	bne.n	800185e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e057      	b.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b0:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017b6:	4a2d      	ldr	r2, [pc, #180]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017c0:	e04d      	b.n	800185e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c8:	d141      	bne.n	800184e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d6:	d131      	bne.n	800183c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f0:	4a1e      	ldr	r2, [pc, #120]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2232      	movs	r2, #50	; 0x32
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	0c9b      	lsrs	r3, r3, #18
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180e:	e002      	b.n	8001816 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3b01      	subs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001822:	d102      	bne.n	800182a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f2      	bne.n	8001810 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001836:	d112      	bne.n	800185e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e011      	b.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800184c:	e007      	b.n	800185e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	40007000 	.word	0x40007000
 8001870:	20000000 	.word	0x20000000
 8001874:	431bde83 	.word	0x431bde83

08001878 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001886:	6093      	str	r3, [r2, #8]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000

08001898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e2fe      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d075      	beq.n	80019a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b6:	4b97      	ldr	r3, [pc, #604]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c0:	4b94      	ldr	r3, [pc, #592]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2b0c      	cmp	r3, #12
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x3e>
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d002      	beq.n	80018dc <HAL_RCC_OscConfig+0x44>
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d10b      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	4b8d      	ldr	r3, [pc, #564]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d05b      	beq.n	80019a0 <HAL_RCC_OscConfig+0x108>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d157      	bne.n	80019a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e2d9      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d106      	bne.n	800190c <HAL_RCC_OscConfig+0x74>
 80018fe:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a84      	ldr	r2, [pc, #528]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xb0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x98>
 8001916:	4b7f      	ldr	r3, [pc, #508]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a7e      	ldr	r2, [pc, #504]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b7c      	ldr	r3, [pc, #496]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a7b      	ldr	r2, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xb0>
 8001930:	4b78      	ldr	r3, [pc, #480]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a77      	ldr	r2, [pc, #476]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a74      	ldr	r2, [pc, #464]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f9a2 	bl	8000c98 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff f99e 	bl	8000c98 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e29e      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196a:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xc0>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f98e 	bl	8000c98 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f98a 	bl	8000c98 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e28a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001992:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0xe8>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d075      	beq.n	8001a9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ae:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b8:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d102      	bne.n	80019ce <HAL_RCC_OscConfig+0x136>
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d002      	beq.n	80019d4 <HAL_RCC_OscConfig+0x13c>
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d11f      	bne.n	8001a14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d4:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x154>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e25d      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b49      	ldr	r3, [pc, #292]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	4946      	ldr	r1, [pc, #280]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a00:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f8fb 	bl	8000c00 <HAL_InitTick>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d043      	beq.n	8001a98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e249      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d023      	beq.n	8001a64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a3c      	ldr	r2, [pc, #240]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f936 	bl	8000c98 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff f932 	bl	8000c98 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e232      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	492d      	ldr	r1, [pc, #180]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
 8001a62:	e01a      	b.n	8001a9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f912 	bl	8000c98 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff f90e 	bl	8000c98 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e20e      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1e0>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d041      	beq.n	8001b2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d01c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab4:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abe:	f7ff f8eb 	bl	8000c98 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f8e7 	bl	8000c98 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e1e7      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0ef      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x22e>
 8001ae6:	e020      	b.n	8001b2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f8ce 	bl	8000c98 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001afe:	e00d      	b.n	8001b1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f8ca 	bl	8000c98 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d906      	bls.n	8001b1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1ca      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1c:	4b8c      	ldr	r3, [pc, #560]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ea      	bne.n	8001b00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80a6 	beq.w	8001c84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b3c:	4b84      	ldr	r3, [pc, #528]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_OscConfig+0x2b4>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x2b6>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00d      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	4a7e      	ldr	r2, [pc, #504]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6e:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <HAL_RCC_OscConfig+0x4bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x4bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a75      	ldr	r2, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x4bc>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b86:	f7ff f887 	bl	8000c98 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7ff f883 	bl	8000c98 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e183      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba0:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x4bc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d108      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x32e>
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	4a65      	ldr	r2, [pc, #404]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc4:	e024      	b.n	8001c10 <HAL_RCC_OscConfig+0x378>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d110      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x358>
 8001bce:	4b60      	ldr	r3, [pc, #384]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd4:	4a5e      	ldr	r2, [pc, #376]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be4:	4a5a      	ldr	r2, [pc, #360]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bee:	e00f      	b.n	8001c10 <HAL_RCC_OscConfig+0x378>
 8001bf0:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d016      	beq.n	8001c46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f83e 	bl	8000c98 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7ff f83a 	bl	8000c98 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e138      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c36:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ed      	beq.n	8001c20 <HAL_RCC_OscConfig+0x388>
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff f827 	bl	8000c98 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7ff f823 	bl	8000c98 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e121      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c64:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1ed      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03c      	beq.n	8001d0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9e:	4a2c      	ldr	r2, [pc, #176]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7fe fff6 	bl	8000c98 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb0:	f7fe fff2 	bl	8000c98 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e0f2      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ef      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x418>
 8001cd0:	e01b      	b.n	8001d0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7fe ffd9 	bl	8000c98 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cea:	f7fe ffd5 	bl	8000c98 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0d5      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ef      	bne.n	8001cea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80c9 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	f000 8083 	beq.w	8001e28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d15e      	bne.n	8001de8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_RCC_OscConfig+0x4b8>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7fe ffaf 	bl	8000c98 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3c:	e00c      	b.n	8001d58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7fe ffab 	bl	8000c98 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d905      	bls.n	8001d58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0ab      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d58:	4b55      	ldr	r3, [pc, #340]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ec      	bne.n	8001d3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <HAL_RCC_OscConfig+0x61c>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6a11      	ldr	r1, [r2, #32]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d74:	3a01      	subs	r2, #1
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d7e:	0212      	lsls	r2, r2, #8
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d86:	0852      	lsrs	r2, r2, #1
 8001d88:	3a01      	subs	r2, #1
 8001d8a:	0552      	lsls	r2, r2, #21
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d92:	0852      	lsrs	r2, r2, #1
 8001d94:	3a01      	subs	r2, #1
 8001d96:	0652      	lsls	r2, r2, #25
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d9e:	06d2      	lsls	r2, r2, #27
 8001da0:	430a      	orrs	r2, r1
 8001da2:	4943      	ldr	r1, [pc, #268]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a40      	ldr	r2, [pc, #256]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db4:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a3d      	ldr	r2, [pc, #244]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe ff6a 	bl	8000c98 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7fe ff66 	bl	8000c98 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e066      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x530>
 8001de6:	e05e      	b.n	8001ea6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a30      	ldr	r2, [pc, #192]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe ff50 	bl	8000c98 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe ff4c 	bl	8000c98 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e04c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	4924      	ldr	r1, [pc, #144]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <HAL_RCC_OscConfig+0x620>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	60cb      	str	r3, [r1, #12]
 8001e26:	e03e      	b.n	8001ea6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e039      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCC_OscConfig+0x618>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d12c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	3b01      	subs	r3, #1
 8001e54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d123      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d11b      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d113      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d109      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	019f800c 	.word	0x019f800c
 8001eb8:	feeefffc 	.word	0xfeeefffc

08001ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e11e      	b.n	8002112 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b91      	ldr	r3, [pc, #580]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b8e      	ldr	r3, [pc, #568]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 020f 	bic.w	r2, r3, #15
 8001eea:	498c      	ldr	r1, [pc, #560]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b8a      	ldr	r3, [pc, #552]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e106      	b.n	8002112 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d073      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d129      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f18:	4b81      	ldr	r3, [pc, #516]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0f4      	b.n	8002112 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f28:	f000 f99e 	bl	8002268 <RCC_GetSysClockFreqFromPLLSource>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4a7c      	ldr	r2, [pc, #496]	; (8002124 <HAL_RCC_ClockConfig+0x268>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d93f      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f36:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d033      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d12f      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f56:	4b72      	ldr	r3, [pc, #456]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f5e:	4a70      	ldr	r2, [pc, #448]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e024      	b.n	8001fb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0c6      	b.n	8002112 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f84:	4b66      	ldr	r3, [pc, #408]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0be      	b.n	8002112 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f94:	f000 f8ce 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4a61      	ldr	r2, [pc, #388]	; (8002124 <HAL_RCC_ClockConfig+0x268>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d909      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001faa:	4a5d      	ldr	r2, [pc, #372]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f023 0203 	bic.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4957      	ldr	r1, [pc, #348]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fe66 	bl	8000c98 <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7fe fe62 	bl	8000c98 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e095      	b.n	8002112 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b4e      	ldr	r3, [pc, #312]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 020c 	and.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1eb      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a42      	ldr	r2, [pc, #264]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8002016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800201a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002030:	4a3b      	ldr	r2, [pc, #236]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8002032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002036:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4936      	ldr	r1, [pc, #216]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
 800204a:	e008      	b.n	800205e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b80      	cmp	r3, #128	; 0x80
 8002050:	d105      	bne.n	800205e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002052:	4b33      	ldr	r3, [pc, #204]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4a32      	ldr	r2, [pc, #200]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 8002058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800205c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d21d      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 020f 	bic.w	r2, r3, #15
 8002074:	4929      	ldr	r1, [pc, #164]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800207c:	f7fe fe0c 	bl	8000c98 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	e00a      	b.n	800209a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7fe fe08 	bl	8000c98 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e03b      	b.n	8002112 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1ed      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4917      	ldr	r1, [pc, #92]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	490f      	ldr	r1, [pc, #60]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e6:	f000 f825 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_RCC_ClockConfig+0x264>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	490c      	ldr	r1, [pc, #48]	; (8002128 <HAL_RCC_ClockConfig+0x26c>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x270>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x274>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fd78 	bl	8000c00 <HAL_InitTick>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
 8002124:	04c4b400 	.word	0x04c4b400
 8002128:	08003a94 	.word	0x08003a94
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d102      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e047      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d102      	bne.n	800215e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002158:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e03e      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b0c      	cmp	r3, #12
 8002168:	d136      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3301      	adds	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	4a16      	ldr	r2, [pc, #88]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002192:	68d2      	ldr	r2, [r2, #12]
 8002194:	0a12      	lsrs	r2, r2, #8
 8002196:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	617b      	str	r3, [r7, #20]
      break;
 80021a0:	e00c      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	4a10      	ldr	r2, [pc, #64]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ac:	68d2      	ldr	r2, [r2, #12]
 80021ae:	0a12      	lsrs	r2, r2, #8
 80021b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021b4:	fb02 f303 	mul.w	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
      break;
 80021ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0e5b      	lsrs	r3, r3, #25
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	3301      	adds	r3, #1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	e001      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021dc:	693b      	ldr	r3, [r7, #16]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	00f42400 	.word	0x00f42400
 80021f4:	016e3600 	.word	0x016e3600

080021f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_RCC_GetHCLKFreq+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000000 	.word	0x20000000

08002210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002214:	f7ff fff0 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4904      	ldr	r1, [pc, #16]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	08003aa4 	.word	0x08003aa4

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002240:	f7ff ffda 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0adb      	lsrs	r3, r3, #11
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4904      	ldr	r1, [pc, #16]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	08003aa4 	.word	0x08003aa4

08002268 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d10c      	bne.n	80022a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800228c:	4a17      	ldr	r2, [pc, #92]	; (80022ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002296:	68d2      	ldr	r2, [r2, #12]
 8002298:	0a12      	lsrs	r2, r2, #8
 800229a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
    break;
 80022a4:	e00c      	b.n	80022c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b0:	68d2      	ldr	r2, [r2, #12]
 80022b2:	0a12      	lsrs	r2, r2, #8
 80022b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    break;
 80022be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0e5b      	lsrs	r3, r3, #25
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	3301      	adds	r3, #1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022da:	687b      	ldr	r3, [r7, #4]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40021000 	.word	0x40021000
 80022ec:	016e3600 	.word	0x016e3600
 80022f0:	00f42400 	.word	0x00f42400

080022f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022fc:	2300      	movs	r3, #0
 80022fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002300:	2300      	movs	r3, #0
 8002302:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8098 	beq.w	8002442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	4a3f      	ldr	r2, [pc, #252]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233a:	2301      	movs	r3, #1
 800233c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233e:	4b3a      	ldr	r3, [pc, #232]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a39      	ldr	r2, [pc, #228]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800234a:	f7fe fca5 	bl	8000c98 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002350:	e009      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7fe fca1 	bl	8000c98 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d902      	bls.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	74fb      	strb	r3, [r7, #19]
        break;
 8002364:	e005      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0ef      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d159      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002382:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01e      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	d019      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023b0:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fc61 	bl	8000c98 <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d8:	e00b      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fc5d 	bl	8000c98 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d902      	bls.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	74fb      	strb	r3, [r7, #19]
            break;
 80023f0:	e006      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ec      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10b      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002414:	4903      	ldr	r1, [pc, #12]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800241c:	e008      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	74bb      	strb	r3, [r7, #18]
 8002422:	e005      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002424:	40021000 	.word	0x40021000
 8002428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002430:	7c7b      	ldrb	r3, [r7, #17]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4ba7      	ldr	r3, [pc, #668]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	4aa6      	ldr	r2, [pc, #664]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800244e:	4ba1      	ldr	r3, [pc, #644]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f023 0203 	bic.w	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	499d      	ldr	r1, [pc, #628]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002470:	4b98      	ldr	r3, [pc, #608]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 020c 	bic.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4995      	ldr	r1, [pc, #596]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002492:	4b90      	ldr	r3, [pc, #576]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	498c      	ldr	r1, [pc, #560]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b4:	4b87      	ldr	r3, [pc, #540]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	4984      	ldr	r1, [pc, #528]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	497b      	ldr	r1, [pc, #492]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f8:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	4973      	ldr	r1, [pc, #460]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800251a:	4b6e      	ldr	r3, [pc, #440]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	496a      	ldr	r1, [pc, #424]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800253c:	4b65      	ldr	r3, [pc, #404]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4962      	ldr	r1, [pc, #392]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800255e:	4b5d      	ldr	r3, [pc, #372]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	4959      	ldr	r1, [pc, #356]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002580:	4b54      	ldr	r3, [pc, #336]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	4951      	ldr	r1, [pc, #324]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a2:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	4948      	ldr	r1, [pc, #288]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c4:	4b43      	ldr	r3, [pc, #268]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4940      	ldr	r1, [pc, #256]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025e2:	d105      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a3a      	ldr	r2, [pc, #232]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d015      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	4932      	ldr	r1, [pc, #200]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261a:	d105      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a2c      	ldr	r2, [pc, #176]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002626:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d015      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	4924      	ldr	r1, [pc, #144]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002652:	d105      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268a:	d105      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002696:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d019      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4908      	ldr	r1, [pc, #32]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c2:	d109      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ce:	60d3      	str	r3, [r2, #12]
 80026d0:	e002      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4926      	ldr	r1, [pc, #152]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002702:	d105      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a20      	ldr	r2, [pc, #128]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272a:	4918      	ldr	r1, [pc, #96]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d105      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800275a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002772:	d105      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800277a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800277e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002780:	7cbb      	ldrb	r3, [r7, #18]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e042      	b.n	8002828 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7fe f893 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2224      	movs	r2, #36	; 0x24
 80027be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fc1e 	bl	800301c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f91f 	bl	8002a24 <UART_SetConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e01b      	b.n	8002828 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800280e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fc9d 	bl	8003160 <UART_CheckIdleState>
 8002826:	4603      	mov	r3, r0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	2b20      	cmp	r3, #32
 8002848:	d17b      	bne.n	8002942 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_UART_Transmit+0x26>
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e074      	b.n	8002944 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2221      	movs	r2, #33	; 0x21
 8002866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286a:	f7fe fa15 	bl	8000c98 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002888:	d108      	bne.n	800289c <HAL_UART_Transmit+0x6c>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e003      	b.n	80028a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028a4:	e030      	b.n	8002908 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fcff 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e03d      	b.n	8002944 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	3302      	adds	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e007      	b.n	80028f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1c8      	bne.n	80028a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2200      	movs	r2, #0
 800291c:	2140      	movs	r1, #64	; 0x40
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fcc8 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e006      	b.n	8002944 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002960:	2b20      	cmp	r3, #32
 8002962:	d137      	bne.n	80029d4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_UART_Receive_DMA+0x24>
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e030      	b.n	80029d6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_UART_Receive_DMA+0x94>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d01f      	beq.n	80029c4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d018      	beq.n	80029c4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	613b      	str	r3, [r7, #16]
   return(result);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	69f9      	ldr	r1, [r7, #28]
 80029b6:	6a3a      	ldr	r2, [r7, #32]
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e6      	bne.n	8002992 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	461a      	mov	r2, r3
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fce0 	bl	8003390 <UART_Start_Receive_DMA>
 80029d0:	4603      	mov	r3, r0
 80029d2:	e000      	b.n	80029d6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3728      	adds	r7, #40	; 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40008000 	.word	0x40008000

080029e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a28:	b08c      	sub	sp, #48	; 0x30
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4baa      	ldr	r3, [pc, #680]	; (8002cfc <UART_SetConfig+0x2d8>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a9f      	ldr	r2, [pc, #636]	; (8002d00 <UART_SetConfig+0x2dc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002a9a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	f023 010f 	bic.w	r1, r3, #15
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a90      	ldr	r2, [pc, #576]	; (8002d04 <UART_SetConfig+0x2e0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d125      	bne.n	8002b14 <UART_SetConfig+0xf0>
 8002ac8:	4b8f      	ldr	r3, [pc, #572]	; (8002d08 <UART_SetConfig+0x2e4>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d81a      	bhi.n	8002b0c <UART_SetConfig+0xe8>
 8002ad6:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <UART_SetConfig+0xb8>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002afd 	.word	0x08002afd
 8002ae4:	08002af5 	.word	0x08002af5
 8002ae8:	08002b05 	.word	0x08002b05
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002af2:	e116      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002af4:	2302      	movs	r3, #2
 8002af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002afa:	e112      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002afc:	2304      	movs	r3, #4
 8002afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b02:	e10e      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002b04:	2308      	movs	r3, #8
 8002b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b0a:	e10a      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b12:	e106      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7c      	ldr	r2, [pc, #496]	; (8002d0c <UART_SetConfig+0x2e8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d138      	bne.n	8002b90 <UART_SetConfig+0x16c>
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <UART_SetConfig+0x2e4>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	d82d      	bhi.n	8002b88 <UART_SetConfig+0x164>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <UART_SetConfig+0x110>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b69 	.word	0x08002b69
 8002b38:	08002b89 	.word	0x08002b89
 8002b3c:	08002b89 	.word	0x08002b89
 8002b40:	08002b89 	.word	0x08002b89
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002b89 	.word	0x08002b89
 8002b4c:	08002b89 	.word	0x08002b89
 8002b50:	08002b89 	.word	0x08002b89
 8002b54:	08002b71 	.word	0x08002b71
 8002b58:	08002b89 	.word	0x08002b89
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002b89 	.word	0x08002b89
 8002b64:	08002b81 	.word	0x08002b81
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b6e:	e0d8      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002b70:	2302      	movs	r3, #2
 8002b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b76:	e0d4      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b7e:	e0d0      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002b80:	2308      	movs	r3, #8
 8002b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b86:	e0cc      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b8e:	e0c8      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a5e      	ldr	r2, [pc, #376]	; (8002d10 <UART_SetConfig+0x2ec>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d125      	bne.n	8002be6 <UART_SetConfig+0x1c2>
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <UART_SetConfig+0x2e4>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ba4:	2b30      	cmp	r3, #48	; 0x30
 8002ba6:	d016      	beq.n	8002bd6 <UART_SetConfig+0x1b2>
 8002ba8:	2b30      	cmp	r3, #48	; 0x30
 8002baa:	d818      	bhi.n	8002bde <UART_SetConfig+0x1ba>
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d00a      	beq.n	8002bc6 <UART_SetConfig+0x1a2>
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d814      	bhi.n	8002bde <UART_SetConfig+0x1ba>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <UART_SetConfig+0x19a>
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d008      	beq.n	8002bce <UART_SetConfig+0x1aa>
 8002bbc:	e00f      	b.n	8002bde <UART_SetConfig+0x1ba>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bc4:	e0ad      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bcc:	e0a9      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bd4:	e0a5      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bdc:	e0a1      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002bde:	2310      	movs	r3, #16
 8002be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002be4:	e09d      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a4a      	ldr	r2, [pc, #296]	; (8002d14 <UART_SetConfig+0x2f0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d125      	bne.n	8002c3c <UART_SetConfig+0x218>
 8002bf0:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <UART_SetConfig+0x2e4>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8002bfc:	d016      	beq.n	8002c2c <UART_SetConfig+0x208>
 8002bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8002c00:	d818      	bhi.n	8002c34 <UART_SetConfig+0x210>
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d00a      	beq.n	8002c1c <UART_SetConfig+0x1f8>
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d814      	bhi.n	8002c34 <UART_SetConfig+0x210>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <UART_SetConfig+0x1f0>
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d008      	beq.n	8002c24 <UART_SetConfig+0x200>
 8002c12:	e00f      	b.n	8002c34 <UART_SetConfig+0x210>
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c1a:	e082      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c22:	e07e      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c24:	2304      	movs	r3, #4
 8002c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c2a:	e07a      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c32:	e076      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c34:	2310      	movs	r3, #16
 8002c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c3a:	e072      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a35      	ldr	r2, [pc, #212]	; (8002d18 <UART_SetConfig+0x2f4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d12a      	bne.n	8002c9c <UART_SetConfig+0x278>
 8002c46:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <UART_SetConfig+0x2e4>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c54:	d01a      	beq.n	8002c8c <UART_SetConfig+0x268>
 8002c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c5a:	d81b      	bhi.n	8002c94 <UART_SetConfig+0x270>
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c60:	d00c      	beq.n	8002c7c <UART_SetConfig+0x258>
 8002c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c66:	d815      	bhi.n	8002c94 <UART_SetConfig+0x270>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <UART_SetConfig+0x250>
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c70:	d008      	beq.n	8002c84 <UART_SetConfig+0x260>
 8002c72:	e00f      	b.n	8002c94 <UART_SetConfig+0x270>
 8002c74:	2300      	movs	r3, #0
 8002c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c7a:	e052      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c82:	e04e      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c84:	2304      	movs	r3, #4
 8002c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c8a:	e04a      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c92:	e046      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c94:	2310      	movs	r3, #16
 8002c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c9a:	e042      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <UART_SetConfig+0x2dc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d13a      	bne.n	8002d1c <UART_SetConfig+0x2f8>
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <UART_SetConfig+0x2e4>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cb4:	d01a      	beq.n	8002cec <UART_SetConfig+0x2c8>
 8002cb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cba:	d81b      	bhi.n	8002cf4 <UART_SetConfig+0x2d0>
 8002cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc0:	d00c      	beq.n	8002cdc <UART_SetConfig+0x2b8>
 8002cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc6:	d815      	bhi.n	8002cf4 <UART_SetConfig+0x2d0>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <UART_SetConfig+0x2b0>
 8002ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd0:	d008      	beq.n	8002ce4 <UART_SetConfig+0x2c0>
 8002cd2:	e00f      	b.n	8002cf4 <UART_SetConfig+0x2d0>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cda:	e022      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ce2:	e01e      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cea:	e01a      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002cec:	2308      	movs	r3, #8
 8002cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cf2:	e016      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cfa:	e012      	b.n	8002d22 <UART_SetConfig+0x2fe>
 8002cfc:	cfff69f3 	.word	0xcfff69f3
 8002d00:	40008000 	.word	0x40008000
 8002d04:	40013800 	.word	0x40013800
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40004400 	.word	0x40004400
 8002d10:	40004800 	.word	0x40004800
 8002d14:	40004c00 	.word	0x40004c00
 8002d18:	40005000 	.word	0x40005000
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4aae      	ldr	r2, [pc, #696]	; (8002fe0 <UART_SetConfig+0x5bc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	f040 8097 	bne.w	8002e5c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d823      	bhi.n	8002d7e <UART_SetConfig+0x35a>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <UART_SetConfig+0x318>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d61 	.word	0x08002d61
 8002d40:	08002d7f 	.word	0x08002d7f
 8002d44:	08002d69 	.word	0x08002d69
 8002d48:	08002d7f 	.word	0x08002d7f
 8002d4c:	08002d6f 	.word	0x08002d6f
 8002d50:	08002d7f 	.word	0x08002d7f
 8002d54:	08002d7f 	.word	0x08002d7f
 8002d58:	08002d7f 	.word	0x08002d7f
 8002d5c:	08002d77 	.word	0x08002d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d60:	f7ff fa56 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 8002d64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d66:	e010      	b.n	8002d8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d68:	4b9e      	ldr	r3, [pc, #632]	; (8002fe4 <UART_SetConfig+0x5c0>)
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d6c:	e00d      	b.n	8002d8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d6e:	f7ff f9e1 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d74:	e009      	b.n	8002d8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d7c:	e005      	b.n	8002d8a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002d88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8130 	beq.w	8002ff2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	4a94      	ldr	r2, [pc, #592]	; (8002fe8 <UART_SetConfig+0x5c4>)
 8002d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d305      	bcc.n	8002dc2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d903      	bls.n	8002dca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002dc8:	e113      	b.n	8002ff2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	60fa      	str	r2, [r7, #12]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	4a84      	ldr	r2, [pc, #528]	; (8002fe8 <UART_SetConfig+0x5c4>)
 8002dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2200      	movs	r2, #0
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002de8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dec:	f7fd fa14 	bl	8000218 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	020b      	lsls	r3, r1, #8
 8002e02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e06:	0202      	lsls	r2, r0, #8
 8002e08:	6979      	ldr	r1, [r7, #20]
 8002e0a:	6849      	ldr	r1, [r1, #4]
 8002e0c:	0849      	lsrs	r1, r1, #1
 8002e0e:	2000      	movs	r0, #0
 8002e10:	460c      	mov	r4, r1
 8002e12:	4605      	mov	r5, r0
 8002e14:	eb12 0804 	adds.w	r8, r2, r4
 8002e18:	eb43 0905 	adc.w	r9, r3, r5
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	469a      	mov	sl, r3
 8002e24:	4693      	mov	fp, r2
 8002e26:	4652      	mov	r2, sl
 8002e28:	465b      	mov	r3, fp
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	f7fd f9f3 	bl	8000218 <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4613      	mov	r3, r2
 8002e38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e40:	d308      	bcc.n	8002e54 <UART_SetConfig+0x430>
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e48:	d204      	bcs.n	8002e54 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a3a      	ldr	r2, [r7, #32]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	e0ce      	b.n	8002ff2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e5a:	e0ca      	b.n	8002ff2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e64:	d166      	bne.n	8002f34 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d827      	bhi.n	8002ebe <UART_SetConfig+0x49a>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <UART_SetConfig+0x450>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002e99 	.word	0x08002e99
 8002e78:	08002ea1 	.word	0x08002ea1
 8002e7c:	08002ea9 	.word	0x08002ea9
 8002e80:	08002ebf 	.word	0x08002ebf
 8002e84:	08002eaf 	.word	0x08002eaf
 8002e88:	08002ebf 	.word	0x08002ebf
 8002e8c:	08002ebf 	.word	0x08002ebf
 8002e90:	08002ebf 	.word	0x08002ebf
 8002e94:	08002eb7 	.word	0x08002eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e98:	f7ff f9ba 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 8002e9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e9e:	e014      	b.n	8002eca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ea0:	f7ff f9cc 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8002ea4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ea6:	e010      	b.n	8002eca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ea8:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <UART_SetConfig+0x5c0>)
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002eac:	e00d      	b.n	8002eca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eae:	f7ff f941 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8002eb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002eb4:	e009      	b.n	8002eca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ebc:	e005      	b.n	8002eca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ec8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 8090 	beq.w	8002ff2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	4a44      	ldr	r2, [pc, #272]	; (8002fe8 <UART_SetConfig+0x5c4>)
 8002ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002edc:	461a      	mov	r2, r3
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ee4:	005a      	lsls	r2, r3, #1
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	441a      	add	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	d916      	bls.n	8002f2c <UART_SetConfig+0x508>
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f04:	d212      	bcs.n	8002f2c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f023 030f 	bic.w	r3, r3, #15
 8002f0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	8bfb      	ldrh	r3, [r7, #30]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	8bfa      	ldrh	r2, [r7, #30]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	e062      	b.n	8002ff2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f32:	e05e      	b.n	8002ff2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d828      	bhi.n	8002f8e <UART_SetConfig+0x56a>
 8002f3c:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <UART_SetConfig+0x520>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08002f69 	.word	0x08002f69
 8002f48:	08002f71 	.word	0x08002f71
 8002f4c:	08002f79 	.word	0x08002f79
 8002f50:	08002f8f 	.word	0x08002f8f
 8002f54:	08002f7f 	.word	0x08002f7f
 8002f58:	08002f8f 	.word	0x08002f8f
 8002f5c:	08002f8f 	.word	0x08002f8f
 8002f60:	08002f8f 	.word	0x08002f8f
 8002f64:	08002f87 	.word	0x08002f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f68:	f7ff f952 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 8002f6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f6e:	e014      	b.n	8002f9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f70:	f7ff f964 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8002f74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f76:	e010      	b.n	8002f9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <UART_SetConfig+0x5c0>)
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f7c:	e00d      	b.n	8002f9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7e:	f7ff f8d9 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8002f82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f84:	e009      	b.n	8002f9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f8c:	e005      	b.n	8002f9a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002f98:	bf00      	nop
    }

    if (pclk != 0U)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d028      	beq.n	8002ff2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <UART_SetConfig+0x5c4>)
 8002fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002faa:	461a      	mov	r2, r3
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	fbb3 f2f2 	udiv	r2, r3, r2
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	441a      	add	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	2b0f      	cmp	r3, #15
 8002fc8:	d910      	bls.n	8002fec <UART_SetConfig+0x5c8>
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d20c      	bcs.n	8002fec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	e009      	b.n	8002ff2 <UART_SetConfig+0x5ce>
 8002fde:	bf00      	nop
 8002fe0:	40008000 	.word	0x40008000
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	08003aac 	.word	0x08003aac
      }
      else
      {
        ret = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800300e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003012:	4618      	mov	r0, r3
 8003014:	3730      	adds	r7, #48	; 0x30
 8003016:	46bd      	mov	sp, r7
 8003018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800301c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01a      	beq.n	8003132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311a:	d10a      	bne.n	8003132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
  }
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b098      	sub	sp, #96	; 0x60
 8003164:	af02      	add	r7, sp, #8
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003170:	f7fd fd92 	bl	8000c98 <HAL_GetTick>
 8003174:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b08      	cmp	r3, #8
 8003182:	d12f      	bne.n	80031e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318c:	2200      	movs	r2, #0
 800318e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f88e 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d022      	beq.n	80031e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b2:	653b      	str	r3, [r7, #80]	; 0x50
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
 80031be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e6      	bne.n	800319e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e063      	b.n	80032ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d149      	bne.n	8003286 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fa:	2200      	movs	r2, #0
 80031fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f857 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d03c      	beq.n	8003286 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	623b      	str	r3, [r7, #32]
   return(result);
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
 800322c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e6      	bne.n	800320c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3308      	adds	r3, #8
 8003244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	60fb      	str	r3, [r7, #12]
   return(result);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	64bb      	str	r3, [r7, #72]	; 0x48
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3308      	adds	r3, #8
 800325c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800325e:	61fa      	str	r2, [r7, #28]
 8003260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	69b9      	ldr	r1, [r7, #24]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	617b      	str	r3, [r7, #20]
   return(result);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e5      	bne.n	800323e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e012      	b.n	80032ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3758      	adds	r7, #88	; 0x58
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c4:	e04f      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d04b      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ce:	f7fd fce3 	bl	8000c98 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e04e      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d037      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d034      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b40      	cmp	r3, #64	; 0x40
 8003300:	d031      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d110      	bne.n	8003332 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2208      	movs	r2, #8
 8003316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f920 	bl	800355e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2208      	movs	r2, #8
 8003322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e029      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003340:	d111      	bne.n	8003366 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800334a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f906 	bl	800355e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	429a      	cmp	r2, r3
 8003382:	d0a0      	beq.n	80032c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b096      	sub	sp, #88	; 0x58
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	4613      	mov	r3, r2
 800339c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2222      	movs	r2, #34	; 0x22
 80033b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02d      	beq.n	8003422 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033cc:	4a40      	ldr	r2, [pc, #256]	; (80034d0 <UART_Start_Receive_DMA+0x140>)
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d6:	4a3f      	ldr	r2, [pc, #252]	; (80034d4 <UART_Start_Receive_DMA+0x144>)
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e0:	4a3d      	ldr	r2, [pc, #244]	; (80034d8 <UART_Start_Receive_DMA+0x148>)
 80033e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ea:	2200      	movs	r2, #0
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3324      	adds	r3, #36	; 0x24
 80033fa:	4619      	mov	r1, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	461a      	mov	r2, r3
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	f7fd fe0c 	bl	8001020 <HAL_DMA_Start_IT>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2210      	movs	r2, #16
 8003412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e051      	b.n	80034c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d018      	beq.n	800345c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343e:	657b      	str	r3, [r7, #84]	; 0x54
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48
 800344a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800344e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e6      	bne.n	800342a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	653b      	str	r3, [r7, #80]	; 0x50
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3308      	adds	r3, #8
 800347a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800347c:	637a      	str	r2, [r7, #52]	; 0x34
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e5      	bne.n	800345c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3308      	adds	r3, #8
 8003496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	613b      	str	r3, [r7, #16]
   return(result);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3308      	adds	r3, #8
 80034ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034b0:	623a      	str	r2, [r7, #32]
 80034b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	69f9      	ldr	r1, [r7, #28]
 80034b6:	6a3a      	ldr	r2, [r7, #32]
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e5      	bne.n	8003490 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3758      	adds	r7, #88	; 0x58
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	0800362b 	.word	0x0800362b
 80034d4:	08003757 	.word	0x08003757
 80034d8:	08003795 	.word	0x08003795

080034dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80034dc:	b480      	push	{r7}
 80034de:	b08f      	sub	sp, #60	; 0x3c
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003504:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e6      	bne.n	80034e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3308      	adds	r3, #8
 800351c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	60bb      	str	r3, [r7, #8]
   return(result);
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800352c:	633b      	str	r3, [r7, #48]	; 0x30
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003536:	61ba      	str	r2, [r7, #24]
 8003538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6979      	ldr	r1, [r7, #20]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	613b      	str	r3, [r7, #16]
   return(result);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e5      	bne.n	8003516 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003552:	bf00      	nop
 8003554:	373c      	adds	r7, #60	; 0x3c
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800355e:	b480      	push	{r7}
 8003560:	b095      	sub	sp, #84	; 0x54
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003584:	643b      	str	r3, [r7, #64]	; 0x40
 8003586:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800358a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e6      	bne.n	8003566 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3308      	adds	r3, #8
 800359e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3308      	adds	r3, #8
 80035ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e3      	bne.n	8003598 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d118      	bne.n	800360a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f023 0310 	bic.w	r3, r3, #16
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	613b      	str	r3, [r7, #16]
   return(result);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e6      	bne.n	80035d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800361e:	bf00      	nop
 8003620:	3754      	adds	r7, #84	; 0x54
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b09c      	sub	sp, #112	; 0x70
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d171      	bne.n	800372a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003648:	2200      	movs	r2, #0
 800364a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800364e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003662:	66bb      	str	r3, [r7, #104]	; 0x68
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800366c:	65bb      	str	r3, [r7, #88]	; 0x58
 800366e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800367a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e6      	bne.n	800364e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3308      	adds	r3, #8
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	667b      	str	r3, [r7, #100]	; 0x64
 8003698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3308      	adds	r3, #8
 800369e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80036a0:	647a      	str	r2, [r7, #68]	; 0x44
 80036a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e5      	bne.n	8003680 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3308      	adds	r3, #8
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	623b      	str	r3, [r7, #32]
   return(result);
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ca:	663b      	str	r3, [r7, #96]	; 0x60
 80036cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3308      	adds	r3, #8
 80036d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036d4:	633a      	str	r2, [r7, #48]	; 0x30
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ea:	2220      	movs	r2, #32
 80036ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d118      	bne.n	800372a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	60fb      	str	r3, [r7, #12]
   return(result);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f023 0310 	bic.w	r3, r3, #16
 800370c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	69b9      	ldr	r1, [r7, #24]
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	617b      	str	r3, [r7, #20]
   return(result);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e6      	bne.n	80036f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800372a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372c:	2200      	movs	r2, #0
 800372e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800373e:	4619      	mov	r1, r3
 8003740:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003742:	f7ff f963 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003746:	e002      	b.n	800374e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003748:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800374a:	f7fd f87f 	bl	800084c <HAL_UART_RxCpltCallback>
}
 800374e:	bf00      	nop
 8003750:	3770      	adds	r7, #112	; 0x70
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d109      	bne.n	8003786 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	b29b      	uxth	r3, r3
 800377c:	4619      	mov	r1, r3
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7ff f944 	bl	8002a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003784:	e002      	b.n	800378c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff f92c 	bl	80029e4 <HAL_UART_RxHalfCpltCallback>
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b80      	cmp	r3, #128	; 0x80
 80037be:	d109      	bne.n	80037d4 <UART_DMAError+0x40>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b21      	cmp	r3, #33	; 0x21
 80037c4:	d106      	bne.n	80037d4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80037ce:	6978      	ldr	r0, [r7, #20]
 80037d0:	f7ff fe84 	bl	80034dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d109      	bne.n	80037f6 <UART_DMAError+0x62>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b22      	cmp	r3, #34	; 0x22
 80037e6:	d106      	bne.n	80037f6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80037f0:	6978      	ldr	r0, [r7, #20]
 80037f2:	f7ff feb4 	bl	800355e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f043 0210 	orr.w	r2, r3, #16
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7ff f8f6 	bl	80029f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_UARTEx_DisableFifoMode+0x16>
 8003826:	2302      	movs	r3, #2
 8003828:	e027      	b.n	800387a <HAL_UARTEx_DisableFifoMode+0x66>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2224      	movs	r2, #36	; 0x24
 8003836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003858:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800389a:	2302      	movs	r3, #2
 800389c:	e02d      	b.n	80038fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2224      	movs	r2, #36	; 0x24
 80038aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f850 	bl	8003980 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003916:	2302      	movs	r3, #2
 8003918:	e02d      	b.n	8003976 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2224      	movs	r2, #36	; 0x24
 8003926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f812 	bl	8003980 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398c:	2b00      	cmp	r3, #0
 800398e:	d108      	bne.n	80039a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039a0:	e031      	b.n	8003a06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039a2:	2308      	movs	r3, #8
 80039a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039a6:	2308      	movs	r3, #8
 80039a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	0e5b      	lsrs	r3, r3, #25
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	0f5b      	lsrs	r3, r3, #29
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039ca:	7bbb      	ldrb	r3, [r7, #14]
 80039cc:	7b3a      	ldrb	r2, [r7, #12]
 80039ce:	4911      	ldr	r1, [pc, #68]	; (8003a14 <UARTEx_SetNbDataToProcess+0x94>)
 80039d0:	5c8a      	ldrb	r2, [r1, r2]
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80039d6:	7b3a      	ldrb	r2, [r7, #12]
 80039d8:	490f      	ldr	r1, [pc, #60]	; (8003a18 <UARTEx_SetNbDataToProcess+0x98>)
 80039da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	7b7a      	ldrb	r2, [r7, #13]
 80039ec:	4909      	ldr	r1, [pc, #36]	; (8003a14 <UARTEx_SetNbDataToProcess+0x94>)
 80039ee:	5c8a      	ldrb	r2, [r1, r2]
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80039f4:	7b7a      	ldrb	r2, [r7, #13]
 80039f6:	4908      	ldr	r1, [pc, #32]	; (8003a18 <UARTEx_SetNbDataToProcess+0x98>)
 80039f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	08003ac4 	.word	0x08003ac4
 8003a18:	08003acc 	.word	0x08003acc

08003a1c <memset>:
 8003a1c:	4402      	add	r2, r0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d100      	bne.n	8003a26 <memset+0xa>
 8003a24:	4770      	bx	lr
 8003a26:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2a:	e7f9      	b.n	8003a20 <memset+0x4>

08003a2c <__libc_init_array>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	4d0d      	ldr	r5, [pc, #52]	; (8003a64 <__libc_init_array+0x38>)
 8003a30:	4c0d      	ldr	r4, [pc, #52]	; (8003a68 <__libc_init_array+0x3c>)
 8003a32:	1b64      	subs	r4, r4, r5
 8003a34:	10a4      	asrs	r4, r4, #2
 8003a36:	2600      	movs	r6, #0
 8003a38:	42a6      	cmp	r6, r4
 8003a3a:	d109      	bne.n	8003a50 <__libc_init_array+0x24>
 8003a3c:	4d0b      	ldr	r5, [pc, #44]	; (8003a6c <__libc_init_array+0x40>)
 8003a3e:	4c0c      	ldr	r4, [pc, #48]	; (8003a70 <__libc_init_array+0x44>)
 8003a40:	f000 f818 	bl	8003a74 <_init>
 8003a44:	1b64      	subs	r4, r4, r5
 8003a46:	10a4      	asrs	r4, r4, #2
 8003a48:	2600      	movs	r6, #0
 8003a4a:	42a6      	cmp	r6, r4
 8003a4c:	d105      	bne.n	8003a5a <__libc_init_array+0x2e>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a54:	4798      	blx	r3
 8003a56:	3601      	adds	r6, #1
 8003a58:	e7ee      	b.n	8003a38 <__libc_init_array+0xc>
 8003a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5e:	4798      	blx	r3
 8003a60:	3601      	adds	r6, #1
 8003a62:	e7f2      	b.n	8003a4a <__libc_init_array+0x1e>
 8003a64:	08003adc 	.word	0x08003adc
 8003a68:	08003adc 	.word	0x08003adc
 8003a6c:	08003adc 	.word	0x08003adc
 8003a70:	08003ae0 	.word	0x08003ae0

08003a74 <_init>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	bf00      	nop
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr

08003a80 <_fini>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr
