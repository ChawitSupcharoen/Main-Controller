
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059ec  080059ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080059ec  080059ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f4  080059f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  2000000c  08005a08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08005a08  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130cf  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000264e  00000000  00000000  0003314e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  000357a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d09  00000000  00000000  00036840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262c2  00000000  00000000  00037549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b39  00000000  00000000  0005d80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb034  00000000  00000000  00071344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004680  00000000  00000000  0016c378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  001709f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005994 	.word	0x08005994

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005994 	.word	0x08005994

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fece 	bl	80012ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f83b 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 faf5 	bl	8000b10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 fab9 	bl	8000a9c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800052a:	f000 fa1f 	bl	800096c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800052e:	f000 fa69 	bl	8000a04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000532:	f000 f87d 	bl	8000630 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000536:	f000 f94f 	bl	80007d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800053a:	f000 f9a1 	bl	8000880 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 10);
 800053e:	220a      	movs	r2, #10
 8000540:	490f      	ldr	r1, [pc, #60]	; (8000580 <main+0x6c>)
 8000542:	4810      	ldr	r0, [pc, #64]	; (8000584 <main+0x70>)
 8000544:	f004 f988 	bl	8004858 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system


  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <main+0x74>)
 800054a:	f002 fd07 	bl	8002f5c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800054e:	2100      	movs	r1, #0
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <main+0x74>)
 8000552:	f002 fdd5 	bl	8003100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000556:	2104      	movs	r1, #4
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <main+0x74>)
 800055a:	f002 fdd1 	bl	8003100 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800055e:	213c      	movs	r1, #60	; 0x3c
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <main+0x78>)
 8000562:	f002 ff85 	bl	8003470 <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <main+0x7c>)
 8000568:	f002 fcf8 	bl	8002f5c <HAL_TIM_Base_Start>

  // TODO: Test retract x axis
  uint16_t result = retractX();
 800056c:	f000 fe1e 	bl	80011ac <retractX>
 8000570:	4603      	mov	r3, r0
 8000572:	80fb      	strh	r3, [r7, #6]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // TODO: Test encoder QEI, remove later
	  qeiRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <main+0x78>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057a:	4a06      	ldr	r2, [pc, #24]	; (8000594 <main+0x80>)
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e7f9      	b.n	8000574 <main+0x60>
 8000580:	20000354 	.word	0x20000354
 8000584:	2000016c 	.word	0x2000016c
 8000588:	20000028 	.word	0x20000028
 800058c:	20000074 	.word	0x20000074
 8000590:	200000c0 	.word	0x200000c0
 8000594:	20000360 	.word	0x20000360

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	2238      	movs	r2, #56	; 0x38
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 f9c8 	bl	800593c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f001 fc46 	bl	8001e4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2340      	movs	r3, #64	; 0x40
 80005cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005da:	2355      	movs	r3, #85	; 0x55
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fce0 	bl	8001fb4 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005fa:	f000 fb41 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2303      	movs	r3, #3
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f001 ffde 	bl	80025d8 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000622:	f000 fb2d 	bl	8000c80 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09e      	sub	sp, #120	; 0x78
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000650:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]
 800066e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2234      	movs	r2, #52	; 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 f960 	bl	800593c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800067c:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 800067e:	4a55      	ldr	r2, [pc, #340]	; (80007d4 <MX_TIM1_Init+0x1a4>)
 8000680:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000682:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000684:	2201      	movs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000696:	4b4e      	ldr	r3, [pc, #312]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800069c:	4b4c      	ldr	r3, [pc, #304]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a8:	4849      	ldr	r0, [pc, #292]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006aa:	f002 fbff 	bl	8002eac <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80006b4:	f000 fae4 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006c2:	4619      	mov	r1, r3
 80006c4:	4842      	ldr	r0, [pc, #264]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006c6:	f003 f875 	bl	80037b4 <HAL_TIM_ConfigClockSource>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006d0:	f000 fad6 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006d4:	483e      	ldr	r0, [pc, #248]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006d6:	f002 fcb1 	bl	800303c <HAL_TIM_PWM_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80006e0:	f000 face 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006f4:	4619      	mov	r1, r3
 80006f6:	4836      	ldr	r0, [pc, #216]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006f8:	f003 fe12 	bl	8004320 <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000702:	f000 fabd 	bl	8000c80 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000706:	2301      	movs	r3, #1
 8000708:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800070a:	2301      	movs	r3, #1
 800070c:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 800070e:	2301      	movs	r3, #1
 8000710:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000712:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000716:	461a      	mov	r2, r3
 8000718:	2101      	movs	r1, #1
 800071a:	482d      	ldr	r0, [pc, #180]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 800071c:	f003 ff2a 	bl	8004574 <HAL_TIMEx_ConfigBreakInput>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000726:	f000 faab 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072a:	2360      	movs	r3, #96	; 0x60
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000732:	2300      	movs	r3, #0
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000736:	2300      	movs	r3, #0
 8000738:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	4820      	ldr	r0, [pc, #128]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000750:	f002 ff1c 	bl	800358c <HAL_TIM_PWM_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800075a:	f000 fa91 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800075e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000762:	2204      	movs	r2, #4
 8000764:	4619      	mov	r1, r3
 8000766:	481a      	ldr	r0, [pc, #104]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000768:	f002 ff10 	bl	800358c <HAL_TIM_PWM_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000772:	f000 fa85 	bl	8000c80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800079c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80007b4:	f003 fe4a 	bl	800444c <HAL_TIMEx_ConfigBreakDeadTime>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80007be:	f000 fa5f 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80007c4:	f000 fb4c 	bl	8000e60 <HAL_TIM_MspPostInit>

}
 80007c8:	bf00      	nop
 80007ca:	3778      	adds	r7, #120	; 0x78
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000028 	.word	0x20000028
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2224      	movs	r2, #36	; 0x24
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 f8a8 	bl	800593c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_TIM2_Init+0xa4>)
 80007f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_TIM2_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM2_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_TIM2_Init+0xa4>)
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM2_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_TIM2_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800081e:	2303      	movs	r3, #3
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000826:	2301      	movs	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000836:	2301      	movs	r3, #1
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_TIM2_Init+0xa4>)
 800084a:	f002 fd6b 	bl	8003324 <HAL_TIM_Encoder_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000854:	f000 fa14 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_TIM2_Init+0xa4>)
 8000866:	f003 fd5b 	bl	8004320 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000870:	f000 fa06 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	; 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000074 	.word	0x20000074

08000880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008b4:	4a2c      	ldr	r2, [pc, #176]	; (8000968 <MX_TIM3_Init+0xe8>)
 80008b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008c6:	226a      	movs	r2, #106	; 0x6a
 80008c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008d6:	4823      	ldr	r0, [pc, #140]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008d8:	f002 fae8 	bl	8002eac <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008e2:	f000 f9cd 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f0:	4619      	mov	r1, r3
 80008f2:	481c      	ldr	r0, [pc, #112]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008f4:	f002 ff5e 	bl	80037b4 <HAL_TIM_ConfigClockSource>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008fe:	f000 f9bf 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000902:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000904:	f002 fb9a 	bl	800303c <HAL_TIM_PWM_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800090e:	f000 f9b7 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4810      	ldr	r0, [pc, #64]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000922:	f003 fcfd 	bl	8004320 <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800092c:	f000 f9a8 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000930:	2360      	movs	r3, #96	; 0x60
 8000932:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	2204      	movs	r2, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000948:	f002 fe20 	bl	800358c <HAL_TIM_PWM_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000952:	f000 f995 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000958:	f000 fa82 	bl	8000e60 <HAL_TIM_MspPostInit>

}
 800095c:	bf00      	nop
 800095e:	3738      	adds	r7, #56	; 0x38
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000c0 	.word	0x200000c0
 8000968:	40000400 	.word	0x40000400

0800096c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART1_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009b6:	f003 feff 	bl	80047b8 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f95e 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009c8:	f004 feed 	bl	80057a6 <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f955 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009da:	f004 ff22 	bl	8005822 <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f94c 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009ea:	f004 fea3 	bl	8005734 <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f944 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000016c 	.word	0x2000016c
 8000a00:	40013800 	.word	0x40013800

08000a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <MX_USART2_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a4e:	f003 feb3 	bl	80047b8 <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f912 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a60:	f004 fea1 	bl	80057a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f909 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a72:	f004 fed6 	bl	8005822 <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f900 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a82:	f004 fe57 	bl	8005734 <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f8f8 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000200 	.word	0x20000200
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_DMA_Init+0x70>)
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <MX_DMA_Init+0x70>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6493      	str	r3, [r2, #72]	; 0x48
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_DMA_Init+0x70>)
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_DMA_Init+0x70>)
 8000abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000abe:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <MX_DMA_Init+0x70>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_DMA_Init+0x70>)
 8000ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	200b      	movs	r0, #11
 8000ad8:	f000 fd3b 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000adc:	200b      	movs	r0, #11
 8000ade:	f000 fd52 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	200c      	movs	r0, #12
 8000ae8:	f000 fd33 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000aec:	200c      	movs	r0, #12
 8000aee:	f000 fd4a 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	200d      	movs	r0, #13
 8000af8:	f000 fd2b 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000afc:	200d      	movs	r0, #13
 8000afe:	f000 fd42 	bl	8001586 <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4b53      	ldr	r3, [pc, #332]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4a52      	ldr	r2, [pc, #328]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4b50      	ldr	r3, [pc, #320]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a4c      	ldr	r2, [pc, #304]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b44:	f043 0320 	orr.w	r3, r3, #32
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0320 	and.w	r3, r3, #32
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a46      	ldr	r2, [pc, #280]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f240 4111 	movw	r1, #1041	; 0x411
 8000b8c:	483a      	ldr	r0, [pc, #232]	; (8000c78 <MX_GPIO_Init+0x168>)
 8000b8e:	f001 f921 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	4839      	ldr	r0, [pc, #228]	; (8000c7c <MX_GPIO_Init+0x16c>)
 8000b98:	f001 f91c 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4832      	ldr	r0, [pc, #200]	; (8000c7c <MX_GPIO_Init+0x16c>)
 8000bb4:	f000 ff74 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f000 ff67 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 8000bd2:	f240 4311 	movw	r3, #1041	; 0x411
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4823      	ldr	r0, [pc, #140]	; (8000c78 <MX_GPIO_Init+0x168>)
 8000bec:	f000 ff58 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	481d      	ldr	r0, [pc, #116]	; (8000c7c <MX_GPIO_Init+0x16c>)
 8000c08:	f000 ff4a 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f000 ff3b 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <MX_GPIO_Init+0x168>)
 8000c40:	f000 ff2e 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c44:	2340      	movs	r3, #64	; 0x40
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <MX_GPIO_Init+0x168>)
 8000c58:	f000 ff22 	bl	8001aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2028      	movs	r0, #40	; 0x28
 8000c62:	f000 fc76 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f000 fc8d 	bl	8001586 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	48000800 	.word	0x48000800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cc2:	f001 f967 	bl	8001f94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <HAL_TIM_Base_MspInit+0xf8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d129      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	4a35      	ldr	r2, [pc, #212]	; (8000dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8000cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d00:	6613      	str	r3, [r2, #96]	; 0x60
 8000d02:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d26:	2340      	movs	r3, #64	; 0x40
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2a:	2312      	movs	r3, #18
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d36:	2306      	movs	r3, #6
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f000 feac 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d48:	e03b      	b.n	8000dc2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <HAL_TIM_Base_MspInit+0x100>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d136      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8000d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <HAL_TIM_Base_MspInit+0x108>)
 8000d70:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000d74:	223e      	movs	r2, #62	; 0x3e
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000d7a:	2210      	movs	r2, #16
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d90:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d98:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000da8:	f000 fc08 	bl	80015bc <HAL_DMA_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_TIM_Base_MspInit+0xe2>
      Error_Handler();
 8000db2:	f7ff ff65 	bl	8000c80 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_TIM_Base_MspInit+0x104>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40012c00 	.word	0x40012c00
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40000400 	.word	0x40000400
 8000dd8:	2000010c 	.word	0x2000010c
 8000ddc:	40020030 	.word	0x40020030

08000de0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e00:	d128      	bne.n	8000e54 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000e32:	2322      	movs	r3, #34	; 0x22
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e42:	2301      	movs	r3, #1
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 fe26 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <HAL_TIM_MspPostInit+0xac>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d11e      	bne.n	8000ec0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_TIM_MspPostInit+0xb0>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <HAL_TIM_MspPostInit+0xb0>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_TIM_MspPostInit+0xb0>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000eac:	2306      	movs	r3, #6
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f000 fdf1 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ebe:	e021      	b.n	8000f04 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_TIM_MspPostInit+0xb4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d11c      	bne.n	8000f04 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_TIM_MspPostInit+0xb0>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_TIM_MspPostInit+0xb0>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_TIM_MspPostInit+0xb0>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f000 fdce 	bl	8001aa0 <HAL_GPIO_Init>
}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40012c00 	.word	0x40012c00
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40000400 	.word	0x40000400

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0a0      	sub	sp, #128	; 0x80
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	2254      	movs	r2, #84	; 0x54
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 fcff 	bl	800593c <memset>
  if(huart->Instance==USART1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a68      	ldr	r2, [pc, #416]	; (80010e4 <HAL_UART_MspInit+0x1cc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d161      	bne.n	800100c <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fd5b 	bl	8002a10 <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f60:	f7ff fe8e 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f64:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8000f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f68:	4a5f      	ldr	r2, [pc, #380]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f70:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8000f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7c:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	4a59      	ldr	r2, [pc, #356]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f88:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f94:	2330      	movs	r3, #48	; 0x30
 8000f96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fac:	4619      	mov	r1, r3
 8000fae:	484f      	ldr	r0, [pc, #316]	; (80010ec <HAL_UART_MspInit+0x1d4>)
 8000fb0:	f000 fd76 	bl	8001aa0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000fb4:	4b4e      	ldr	r3, [pc, #312]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fb6:	4a4f      	ldr	r2, [pc, #316]	; (80010f4 <HAL_UART_MspInit+0x1dc>)
 8000fb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fbc:	2218      	movs	r2, #24
 8000fbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc6:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fcc:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fde:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fe4:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fec:	4840      	ldr	r0, [pc, #256]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8000fee:	f000 fae5 	bl	80015bc <HAL_DMA_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8000ff8:	f7ff fe42 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a3c      	ldr	r2, [pc, #240]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8001000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001004:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <HAL_UART_MspInit+0x1d8>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	e066      	b.n	80010da <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a39      	ldr	r2, [pc, #228]	; (80010f8 <HAL_UART_MspInit+0x1e0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d161      	bne.n	80010da <HAL_UART_MspInit+0x1c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fcf4 	bl	8002a10 <HAL_RCCEx_PeriphCLKConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800102e:	f7ff fe27 	bl	8000c80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a2c      	ldr	r2, [pc, #176]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <HAL_UART_MspInit+0x1d0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001062:	230c      	movs	r3, #12
 8001064:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001072:	2307      	movs	r3, #7
 8001074:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f000 fd0e 	bl	8001aa0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <HAL_UART_MspInit+0x1e8>)
 8001088:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 800108c:	221a      	movs	r2, #26
 800108e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 80010b0:	2220      	movs	r2, #32
 80010b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 80010b6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80010ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 80010be:	f000 fa7d 	bl	80015bc <HAL_DMA_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 80010c8:	f7ff fdda 	bl	8000c80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 80010d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80010d4:	4a09      	ldr	r2, [pc, #36]	; (80010fc <HAL_UART_MspInit+0x1e4>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80010da:	bf00      	nop
 80010dc:	3780      	adds	r7, #128	; 0x80
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40013800 	.word	0x40013800
 80010e8:	40021000 	.word	0x40021000
 80010ec:	48000800 	.word	0x48000800
 80010f0:	20000294 	.word	0x20000294
 80010f4:	4002001c 	.word	0x4002001c
 80010f8:	40004400 	.word	0x40004400
 80010fc:	200002f4 	.word	0x200002f4
 8001100:	40020008 	.word	0x40020008

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 f906 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <DMA1_Channel1_IRQHandler+0x10>)
 800115e:	f000 fb50 	bl	8001802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200002f4 	.word	0x200002f4

0800116c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <DMA1_Channel2_IRQHandler+0x10>)
 8001172:	f000 fb46 	bl	8001802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000294 	.word	0x20000294

08001180 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <DMA1_Channel3_IRQHandler+0x10>)
 8001186:	f000 fb3c 	bl	8001802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000010c 	.word	0x2000010c

08001194 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001198:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800119c:	f000 fe32 	bl	8001e04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011a4:	f000 fe2e 	bl	8001e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <retractX>:
 *
 *
 *
 */

int retractX(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

	const uint32_t TimeoutConst = 1000;
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	607b      	str	r3, [r7, #4]

	uint32_t Timeout = HAL_GetTick() + TimeoutConst;
 80011b8:	f000 f8e4 	bl	8001384 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2110      	movs	r1, #16
 80011c8:	481d      	ldr	r0, [pc, #116]	; (8001240 <retractX+0x94>)
 80011ca:	f000 fe03 	bl	8001dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d4:	481a      	ldr	r0, [pc, #104]	; (8001240 <retractX+0x94>)
 80011d6:	f000 fdfd 	bl	8001dd4 <HAL_GPIO_WritePin>

	while(HAL_GetTick() < Timeout){
 80011da:	e01b      	b.n	8001214 <retractX+0x68>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET){
 80011dc:	2140      	movs	r1, #64	; 0x40
 80011de:	4818      	ldr	r0, [pc, #96]	; (8001240 <retractX+0x94>)
 80011e0:	f000 fde0 	bl	8001da4 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d114      	bne.n	8001214 <retractX+0x68>
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f0:	f000 fdd8 	bl	8001da4 <HAL_GPIO_ReadPin>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d10c      	bne.n	8001214 <retractX+0x68>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2110      	movs	r1, #16
 80011fe:	4810      	ldr	r0, [pc, #64]	; (8001240 <retractX+0x94>)
 8001200:	f000 fde8 	bl	8001dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <retractX+0x94>)
 800120c:	f000 fde2 	bl	8001dd4 <HAL_GPIO_WritePin>

			return 0;
 8001210:	2300      	movs	r3, #0
 8001212:	e011      	b.n	8001238 <retractX+0x8c>
	while(HAL_GetTick() < Timeout){
 8001214:	f000 f8b6 	bl	8001384 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	4293      	cmp	r3, r2
 800121e:	d8dd      	bhi.n	80011dc <retractX+0x30>
		}
	}


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2110      	movs	r1, #16
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <retractX+0x94>)
 8001226:	f000 fdd5 	bl	8001dd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <retractX+0x94>)
 8001232:	f000 fdcf 	bl	8001dd4 <HAL_GPIO_WritePin>

	return 1;
 8001236:	2301      	movs	r3, #1





}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	48000400 	.word	0x48000400

08001244 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <SystemInit+0x20>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <SystemInit+0x20>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800126a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800126c:	f7ff ffea 	bl	8001244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <LoopForever+0xe>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001288:	4c0a      	ldr	r4, [pc, #40]	; (80012b4 <LoopForever+0x16>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001296:	f004 fb59 	bl	800594c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800129a:	f7ff f93b 	bl	8000514 <main>

0800129e <LoopForever>:

LoopForever:
    b LoopForever
 800129e:	e7fe      	b.n	800129e <LoopForever>
  ldr   r0, =_estack
 80012a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012ac:	080059fc 	.word	0x080059fc
  ldr r2, =_sbss
 80012b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012b4:	20000368 	.word	0x20000368

080012b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC1_2_IRQHandler>

080012ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f939 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f80e 	bl	80012ec <HAL_InitTick>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	e001      	b.n	80012e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012dc:	f7ff fcd6 	bl	8000c8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e0:	79fb      	ldrb	r3, [r7, #7]

}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_InitTick+0x68>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d022      	beq.n	8001346 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_InitTick+0x6c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_InitTick+0x68>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800130c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f944 	bl	80015a2 <HAL_SYSTICK_Config>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10f      	bne.n	8001340 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	d809      	bhi.n	800133a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001326:	2200      	movs	r2, #0
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	f04f 30ff 	mov.w	r0, #4294967295
 800132e:	f000 f910 	bl	8001552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_InitTick+0x70>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e007      	b.n	800134a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e004      	b.n	800134a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e001      	b.n	800134a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000008 	.word	0x20000008
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x1c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x20>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4413      	add	r3, r2
 800136e:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_IncTick+0x1c>)
 8001370:	6013      	str	r3, [r2, #0]
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000364 	.word	0x20000364
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000364 	.word	0x20000364

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff29 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff40 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff90 	bl	8001490 <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5f 	bl	800143c <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff33 	bl	8001400 <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa4 	bl	80014f8 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e08d      	b.n	80016ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_DMA_Init+0x138>)
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d80f      	bhi.n	80015fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <HAL_DMA_Init+0x13c>)
 80015e2:	4413      	add	r3, r2
 80015e4:	4a45      	ldr	r2, [pc, #276]	; (80016fc <HAL_DMA_Init+0x140>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	009a      	lsls	r2, r3, #2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a42      	ldr	r2, [pc, #264]	; (8001700 <HAL_DMA_Init+0x144>)
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
 80015f8:	e00e      	b.n	8001618 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <HAL_DMA_Init+0x148>)
 8001602:	4413      	add	r3, r2
 8001604:	4a3d      	ldr	r2, [pc, #244]	; (80016fc <HAL_DMA_Init+0x140>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a3c      	ldr	r2, [pc, #240]	; (8001708 <HAL_DMA_Init+0x14c>)
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800162e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f9b6 	bl	80019dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001678:	d102      	bne.n	8001680 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001694:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d010      	beq.n	80016c0 <HAL_DMA_Init+0x104>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d80c      	bhi.n	80016c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f9d6 	bl	8001a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	e008      	b.n	80016d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40020407 	.word	0x40020407
 80016f8:	bffdfff8 	.word	0xbffdfff8
 80016fc:	cccccccd 	.word	0xcccccccd
 8001700:	40020000 	.word	0x40020000
 8001704:	bffdfbf8 	.word	0xbffdfbf8
 8001708:	40020400 	.word	0x40020400

0800170c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_DMA_Start_IT+0x20>
 8001728:	2302      	movs	r3, #2
 800172a:	e066      	b.n	80017fa <HAL_DMA_Start_IT+0xee>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d155      	bne.n	80017ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 f8fb 	bl	8001960 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 020e 	orr.w	r2, r2, #14
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e00f      	b.n	80017a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0204 	bic.w	r2, r2, #4
 8001792:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 020a 	orr.w	r2, r2, #10
 80017a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0201 	orr.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e005      	b.n	80017f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017f4:	2302      	movs	r3, #2
 80017f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2204      	movs	r2, #4
 8001824:	409a      	lsls	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d026      	beq.n	800187c <HAL_DMA_IRQHandler+0x7a>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d021      	beq.n	800187c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0320 	and.w	r3, r3, #32
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0204 	bic.w	r2, r2, #4
 8001854:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 021f 	and.w	r2, r3, #31
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	2104      	movs	r1, #4
 8001864:	fa01 f202 	lsl.w	r2, r1, r2
 8001868:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	2b00      	cmp	r3, #0
 8001870:	d071      	beq.n	8001956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800187a:	e06c      	b.n	8001956 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	2202      	movs	r2, #2
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d02e      	beq.n	80018ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d029      	beq.n	80018ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10b      	bne.n	80018c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 020a 	bic.w	r2, r2, #10
 80018b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	2102      	movs	r1, #2
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d038      	beq.n	8001956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018ec:	e033      	b.n	8001956 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	2208      	movs	r2, #8
 80018f8:	409a      	lsls	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d02a      	beq.n	8001958 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d025      	beq.n	8001958 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 020e 	bic.w	r2, r2, #14
 800191a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	2101      	movs	r1, #1
 800192a:	fa01 f202 	lsl.w	r2, r1, r2
 800192e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001956:	bf00      	nop
 8001958:	bf00      	nop
}
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001976:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001988:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f003 021f 	and.w	r2, r3, #31
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	d108      	bne.n	80019c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019be:	e007      	b.n	80019d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d802      	bhi.n	80019f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e001      	b.n	80019fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80019f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	3b08      	subs	r3, #8
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	009a      	lsls	r2, r3, #2
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a26:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	2201      	movs	r2, #1
 8001a30:	409a      	lsls	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40020407 	.word	0x40020407
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020820 	.word	0x40020820
 8001a50:	cccccccd 	.word	0xcccccccd
 8001a54:	40020880 	.word	0x40020880

08001a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	461a      	mov	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2201      	movs	r2, #1
 8001a86:	409a      	lsls	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	1000823f 	.word	0x1000823f
 8001a9c:	40020940 	.word	0x40020940

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001aae:	e15a      	b.n	8001d66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 814c 	beq.w	8001d60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d005      	beq.n	8001ae0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d130      	bne.n	8001b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b16:	2201      	movs	r2, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 0201 	and.w	r2, r3, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d017      	beq.n	8001b7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d123      	bne.n	8001bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	6939      	ldr	r1, [r7, #16]
 8001bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0203 	and.w	r2, r3, #3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80a6 	beq.w	8001d60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c14:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <HAL_GPIO_Init+0x2e4>)
 8001c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c18:	4a5a      	ldr	r2, [pc, #360]	; (8001d84 <HAL_GPIO_Init+0x2e4>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c20:	4b58      	ldr	r3, [pc, #352]	; (8001d84 <HAL_GPIO_Init+0x2e4>)
 8001c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2c:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c56:	d01f      	beq.n	8001c98 <HAL_GPIO_Init+0x1f8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a4c      	ldr	r2, [pc, #304]	; (8001d8c <HAL_GPIO_Init+0x2ec>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d019      	beq.n	8001c94 <HAL_GPIO_Init+0x1f4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a4b      	ldr	r2, [pc, #300]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d013      	beq.n	8001c90 <HAL_GPIO_Init+0x1f0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a4a      	ldr	r2, [pc, #296]	; (8001d94 <HAL_GPIO_Init+0x2f4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00d      	beq.n	8001c8c <HAL_GPIO_Init+0x1ec>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a49      	ldr	r2, [pc, #292]	; (8001d98 <HAL_GPIO_Init+0x2f8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x1e8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <HAL_GPIO_Init+0x2fc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_GPIO_Init+0x1e4>
 8001c80:	2305      	movs	r3, #5
 8001c82:	e00a      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c84:	2306      	movs	r3, #6
 8001c86:	e008      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c88:	2304      	movs	r3, #4
 8001c8a:	e006      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e004      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e002      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	f002 0203 	and.w	r2, r2, #3
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001caa:	4937      	ldr	r1, [pc, #220]	; (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb8:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cdc:	4a30      	ldr	r2, [pc, #192]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d06:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d5a:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f ae9d 	bne.w	8001ab0 <HAL_GPIO_Init+0x10>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	48000800 	.word	0x48000800
 8001d94:	48000c00 	.word	0x48000c00
 8001d98:	48001000 	.word	0x48001000
 8001d9c:	48001400 	.word	0x48001400
 8001da0:	40010400 	.word	0x40010400

08001da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e001      	b.n	8001dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f806 	bl	8001e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d141      	bne.n	8001ede <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e5a:	4b4b      	ldr	r3, [pc, #300]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e66:	d131      	bne.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e68:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e6e:	4a46      	ldr	r2, [pc, #280]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e78:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e80:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e88:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2232      	movs	r2, #50	; 0x32
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	4a3f      	ldr	r2, [pc, #252]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	0c9b      	lsrs	r3, r3, #18
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e9e:	e002      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea6:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb2:	d102      	bne.n	8001eba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f2      	bne.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eba:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec6:	d158      	bne.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e057      	b.n	8001f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ecc:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ed2:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001edc:	e04d      	b.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee4:	d141      	bne.n	8001f6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ee6:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d131      	bne.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001efa:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f0c:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2232      	movs	r2, #50	; 0x32
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	0c9b      	lsrs	r3, r3, #18
 8001f26:	3301      	adds	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f2a:	e002      	b.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3e:	d102      	bne.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f2      	bne.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d112      	bne.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e011      	b.n	8001f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f68:	e007      	b.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40007000 	.word	0x40007000
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa2:	6093      	str	r3, [r2, #8]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e2fe      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d075      	beq.n	80020be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd2:	4b97      	ldr	r3, [pc, #604]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fdc:	4b94      	ldr	r3, [pc, #592]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3e>
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x44>
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d10b      	bne.n	8002010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	4b8d      	ldr	r3, [pc, #564]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d05b      	beq.n	80020bc <HAL_RCC_OscConfig+0x108>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d157      	bne.n	80020bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e2d9      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d106      	bne.n	8002028 <HAL_RCC_OscConfig+0x74>
 800201a:	4b85      	ldr	r3, [pc, #532]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a84      	ldr	r2, [pc, #528]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e01d      	b.n	8002064 <HAL_RCC_OscConfig+0xb0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x98>
 8002032:	4b7f      	ldr	r3, [pc, #508]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a7e      	ldr	r2, [pc, #504]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b7c      	ldr	r3, [pc, #496]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7b      	ldr	r2, [pc, #492]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0xb0>
 800204c:	4b78      	ldr	r3, [pc, #480]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a77      	ldr	r2, [pc, #476]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b75      	ldr	r3, [pc, #468]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a74      	ldr	r2, [pc, #464]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800205e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7ff f98a 	bl	8001384 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff f986 	bl	8001384 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e29e      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002086:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0xc0>
 8002092:	e014      	b.n	80020be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff f976 	bl	8001384 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff f972 	bl	8001384 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e28a      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ae:	4b60      	ldr	r3, [pc, #384]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0xe8>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d075      	beq.n	80021b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ca:	4b59      	ldr	r3, [pc, #356]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d4:	4b56      	ldr	r3, [pc, #344]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d102      	bne.n	80020ea <HAL_RCC_OscConfig+0x136>
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d002      	beq.n	80020f0 <HAL_RCC_OscConfig+0x13c>
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d11f      	bne.n	8002130 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f0:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_OscConfig+0x154>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e25d      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b49      	ldr	r3, [pc, #292]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	4946      	ldr	r1, [pc, #280]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800211c:	4b45      	ldr	r3, [pc, #276]	; (8002234 <HAL_RCC_OscConfig+0x280>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff f8e3 	bl	80012ec <HAL_InitTick>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d043      	beq.n	80021b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e249      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d023      	beq.n	8002180 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002138:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a3c      	ldr	r2, [pc, #240]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff f91e 	bl	8001384 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7ff f91a 	bl	8001384 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e232      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215e:	4b34      	ldr	r3, [pc, #208]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	061b      	lsls	r3, r3, #24
 8002178:	492d      	ldr	r1, [pc, #180]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
 800217e:	e01a      	b.n	80021b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f8fa 	bl	8001384 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002194:	f7ff f8f6 	bl	8001384 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e20e      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1e0>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d041      	beq.n	8002246 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01c      	beq.n	8002204 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff f8d3 	bl	8001384 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7ff f8cf 	bl	8001384 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1e7      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0ef      	beq.n	80021e2 <HAL_RCC_OscConfig+0x22e>
 8002202:	e020      	b.n	8002246 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_RCC_OscConfig+0x27c>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7ff f8b6 	bl	8001384 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800221a:	e00d      	b.n	8002238 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff f8b2 	bl	8001384 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d906      	bls.n	8002238 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1ca      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002238:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ea      	bne.n	800221c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80a6 	beq.w	80023a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002258:	4b84      	ldr	r3, [pc, #528]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x2b4>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x2b6>
 8002268:	2300      	movs	r3, #0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4b7f      	ldr	r3, [pc, #508]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	4a7e      	ldr	r2, [pc, #504]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	6593      	str	r3, [r2, #88]	; 0x58
 800227a:	4b7c      	ldr	r3, [pc, #496]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228a:	4b79      	ldr	r3, [pc, #484]	; (8002470 <HAL_RCC_OscConfig+0x4bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x4bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a75      	ldr	r2, [pc, #468]	; (8002470 <HAL_RCC_OscConfig+0x4bc>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7ff f86f 	bl	8001384 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7ff f86b 	bl	8001384 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e183      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022bc:	4b6c      	ldr	r3, [pc, #432]	; (8002470 <HAL_RCC_OscConfig+0x4bc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d108      	bne.n	80022e2 <HAL_RCC_OscConfig+0x32e>
 80022d0:	4b66      	ldr	r3, [pc, #408]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	4a65      	ldr	r2, [pc, #404]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e0:	e024      	b.n	800232c <HAL_RCC_OscConfig+0x378>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d110      	bne.n	800230c <HAL_RCC_OscConfig+0x358>
 80022ea:	4b60      	ldr	r3, [pc, #384]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	4a5e      	ldr	r2, [pc, #376]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	4a5a      	ldr	r2, [pc, #360]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800230a:	e00f      	b.n	800232c <HAL_RCC_OscConfig+0x378>
 800230c:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	4a56      	ldr	r2, [pc, #344]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d016      	beq.n	8002362 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7ff f826 	bl	8001384 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7ff f822 	bl	8001384 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e138      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	4b46      	ldr	r3, [pc, #280]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ed      	beq.n	800233c <HAL_RCC_OscConfig+0x388>
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7ff f80f 	bl	8001384 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7ff f80b 	bl	8001384 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e121      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002380:	4b3a      	ldr	r3, [pc, #232]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ed      	bne.n	800236a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800238e:	7ffb      	ldrb	r3, [r7, #31]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a34      	ldr	r2, [pc, #208]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d03c      	beq.n	8002426 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01c      	beq.n	80023ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80023b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ba:	4a2c      	ldr	r2, [pc, #176]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7fe ffde 	bl	8001384 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023cc:	f7fe ffda 	bl	8001384 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e0f2      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80023e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ef      	beq.n	80023cc <HAL_RCC_OscConfig+0x418>
 80023ec:	e01b      	b.n	8002426 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80023f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7fe ffc1 	bl	8001384 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002406:	f7fe ffbd 	bl	8001384 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0d5      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 800241a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ef      	bne.n	8002406 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80c9 	beq.w	80025c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b0c      	cmp	r3, #12
 800243a:	f000 8083 	beq.w	8002544 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d15e      	bne.n	8002504 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_RCC_OscConfig+0x4b8>)
 800244c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe ff97 	bl	8001384 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002458:	e00c      	b.n	8002474 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe ff93 	bl	8001384 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d905      	bls.n	8002474 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0ab      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002474:	4b55      	ldr	r3, [pc, #340]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ec      	bne.n	800245a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002480:	4b52      	ldr	r3, [pc, #328]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <HAL_RCC_OscConfig+0x61c>)
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6a11      	ldr	r1, [r2, #32]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002490:	3a01      	subs	r2, #1
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800249a:	0212      	lsls	r2, r2, #8
 800249c:	4311      	orrs	r1, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024a2:	0852      	lsrs	r2, r2, #1
 80024a4:	3a01      	subs	r2, #1
 80024a6:	0552      	lsls	r2, r2, #21
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024ae:	0852      	lsrs	r2, r2, #1
 80024b0:	3a01      	subs	r2, #1
 80024b2:	0652      	lsls	r2, r2, #25
 80024b4:	4311      	orrs	r1, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024ba:	06d2      	lsls	r2, r2, #27
 80024bc:	430a      	orrs	r2, r1
 80024be:	4943      	ldr	r1, [pc, #268]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a40      	ldr	r2, [pc, #256]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d0:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4a3d      	ldr	r2, [pc, #244]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe ff52 	bl	8001384 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe ff4e 	bl	8001384 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e066      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f6:	4b35      	ldr	r3, [pc, #212]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x530>
 8002502:	e05e      	b.n	80025c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002504:	4b31      	ldr	r3, [pc, #196]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a30      	ldr	r2, [pc, #192]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 800250a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800250e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe ff38 	bl	8001384 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe ff34 	bl	8001384 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e04c      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252a:	4b28      	ldr	r3, [pc, #160]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002536:	4b25      	ldr	r3, [pc, #148]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4924      	ldr	r1, [pc, #144]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_OscConfig+0x620>)
 800253e:	4013      	ands	r3, r2
 8002540:	60cb      	str	r3, [r1, #12]
 8002542:	e03e      	b.n	80025c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e039      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_RCC_OscConfig+0x618>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	429a      	cmp	r2, r3
 8002562:	d12c      	bne.n	80025be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	3b01      	subs	r3, #1
 8002570:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d123      	bne.n	80025be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d11b      	bne.n	80025be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d113      	bne.n	80025be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	3b01      	subs	r3, #1
 80025a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d109      	bne.n	80025be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	3b01      	subs	r3, #1
 80025b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3720      	adds	r7, #32
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	019f800c 	.word	0x019f800c
 80025d4:	feeefffc 	.word	0xfeeefffc

080025d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e11e      	b.n	800282e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f0:	4b91      	ldr	r3, [pc, #580]	; (8002838 <HAL_RCC_ClockConfig+0x260>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d910      	bls.n	8002620 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b8e      	ldr	r3, [pc, #568]	; (8002838 <HAL_RCC_ClockConfig+0x260>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 020f 	bic.w	r2, r3, #15
 8002606:	498c      	ldr	r1, [pc, #560]	; (8002838 <HAL_RCC_ClockConfig+0x260>)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b8a      	ldr	r3, [pc, #552]	; (8002838 <HAL_RCC_ClockConfig+0x260>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e106      	b.n	800282e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d073      	beq.n	8002714 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d129      	bne.n	8002688 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002634:	4b81      	ldr	r3, [pc, #516]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0f4      	b.n	800282e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002644:	f000 f99e 	bl	8002984 <RCC_GetSysClockFreqFromPLLSource>
 8002648:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4a7c      	ldr	r2, [pc, #496]	; (8002840 <HAL_RCC_ClockConfig+0x268>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d93f      	bls.n	80026d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002652:	4b7a      	ldr	r3, [pc, #488]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002666:	2b00      	cmp	r3, #0
 8002668:	d033      	beq.n	80026d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800266e:	2b00      	cmp	r3, #0
 8002670:	d12f      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002672:	4b72      	ldr	r3, [pc, #456]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800267a:	4a70      	ldr	r2, [pc, #448]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 800267c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002680:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e024      	b.n	80026d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0c6      	b.n	800282e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a0:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0be      	b.n	800282e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026b0:	f000 f8ce 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4a61      	ldr	r2, [pc, #388]	; (8002840 <HAL_RCC_ClockConfig+0x268>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d909      	bls.n	80026d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026be:	4b5f      	ldr	r3, [pc, #380]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026c6:	4a5d      	ldr	r2, [pc, #372]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 80026c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4957      	ldr	r1, [pc, #348]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe fe4e 	bl	8001384 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7fe fe4a 	bl	8001384 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e095      	b.n	800282e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	4b4e      	ldr	r3, [pc, #312]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 020c 	and.w	r2, r3, #12
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d1eb      	bne.n	80026ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d023      	beq.n	8002768 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a42      	ldr	r2, [pc, #264]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002736:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002744:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800274c:	4a3b      	ldr	r2, [pc, #236]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 800274e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002752:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4936      	ldr	r1, [pc, #216]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
 8002766:	e008      	b.n	800277a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b80      	cmp	r3, #128	; 0x80
 800276c:	d105      	bne.n	800277a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800276e:	4b33      	ldr	r3, [pc, #204]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4a32      	ldr	r2, [pc, #200]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 8002774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002778:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800277a:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <HAL_RCC_ClockConfig+0x260>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d21d      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_ClockConfig+0x260>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 020f 	bic.w	r2, r3, #15
 8002790:	4929      	ldr	r1, [pc, #164]	; (8002838 <HAL_RCC_ClockConfig+0x260>)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002798:	f7fe fdf4 	bl	8001384 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fdf0 	bl	8001384 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e03b      	b.n	800282e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCC_ClockConfig+0x260>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1ed      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4917      	ldr	r1, [pc, #92]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	490f      	ldr	r1, [pc, #60]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002802:	f000 f825 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_RCC_ClockConfig+0x264>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490c      	ldr	r1, [pc, #48]	; (8002844 <HAL_RCC_ClockConfig+0x26c>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <HAL_RCC_ClockConfig+0x270>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x274>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fd60 	bl	80012ec <HAL_InitTick>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40022000 	.word	0x40022000
 800283c:	40021000 	.word	0x40021000
 8002840:	04c4b400 	.word	0x04c4b400
 8002844:	080059ac 	.word	0x080059ac
 8002848:	20000000 	.word	0x20000000
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002856:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b04      	cmp	r3, #4
 8002860:	d102      	bne.n	8002868 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	e047      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002868:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d102      	bne.n	800287a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002874:	4b26      	ldr	r3, [pc, #152]	; (8002910 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	e03e      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d136      	bne.n	80028f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3301      	adds	r3, #1
 800289c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d10c      	bne.n	80028be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028a4:	4a1a      	ldr	r2, [pc, #104]	; (8002910 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	4a16      	ldr	r2, [pc, #88]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ae:	68d2      	ldr	r2, [r2, #12]
 80028b0:	0a12      	lsrs	r2, r2, #8
 80028b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	617b      	str	r3, [r7, #20]
      break;
 80028bc:	e00c      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028be:	4a13      	ldr	r2, [pc, #76]	; (800290c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	4a10      	ldr	r2, [pc, #64]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	0a12      	lsrs	r2, r2, #8
 80028cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
      break;
 80028d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0e5b      	lsrs	r3, r3, #25
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	3301      	adds	r3, #1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	e001      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028f8:	693b      	ldr	r3, [r7, #16]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	00f42400 	.word	0x00f42400
 8002910:	016e3600 	.word	0x016e3600

08002914 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCC_GetHCLKFreq+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000000 	.word	0x20000000

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002930:	f7ff fff0 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4904      	ldr	r1, [pc, #16]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	080059bc 	.word	0x080059bc

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800295c:	f7ff ffda 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0adb      	lsrs	r3, r3, #11
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4904      	ldr	r1, [pc, #16]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	080059bc 	.word	0x080059bc

08002984 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3301      	adds	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d10c      	bne.n	80029c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a8:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029b2:	68d2      	ldr	r2, [r2, #12]
 80029b4:	0a12      	lsrs	r2, r2, #8
 80029b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
    break;
 80029c0:	e00c      	b.n	80029dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	0a12      	lsrs	r2, r2, #8
 80029d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
    break;
 80029da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0e5b      	lsrs	r3, r3, #25
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029f6:	687b      	ldr	r3, [r7, #4]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40021000 	.word	0x40021000
 8002a08:	016e3600 	.word	0x016e3600
 8002a0c:	00f42400 	.word	0x00f42400

08002a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a18:	2300      	movs	r3, #0
 8002a1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8098 	beq.w	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a32:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	4a3f      	ldr	r2, [pc, #252]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a56:	2301      	movs	r3, #1
 8002a58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a5a:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a39      	ldr	r2, [pc, #228]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a66:	f7fe fc8d 	bl	8001384 <HAL_GetTick>
 8002a6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a6c:	e009      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe fc89 	bl	8001384 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d902      	bls.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	74fb      	strb	r3, [r7, #19]
        break;
 8002a80:	e005      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a82:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ef      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d159      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01e      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d019      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d016      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fc49 	bl	8001384 <HAL_GetTick>
 8002af2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af4:	e00b      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe fc45 	bl	8001384 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d902      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b0c:	e006      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ec      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10b      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	4903      	ldr	r1, [pc, #12]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b38:	e008      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b3a:	7cfb      	ldrb	r3, [r7, #19]
 8002b3c:	74bb      	strb	r3, [r7, #18]
 8002b3e:	e005      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b4c:	7c7b      	ldrb	r3, [r7, #17]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d105      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b52:	4ba7      	ldr	r3, [pc, #668]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	4aa6      	ldr	r2, [pc, #664]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b6a:	4ba1      	ldr	r3, [pc, #644]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f023 0203 	bic.w	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	499d      	ldr	r1, [pc, #628]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b8c:	4b98      	ldr	r3, [pc, #608]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 020c 	bic.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4995      	ldr	r1, [pc, #596]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bae:	4b90      	ldr	r3, [pc, #576]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	498c      	ldr	r1, [pc, #560]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bd0:	4b87      	ldr	r3, [pc, #540]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	4984      	ldr	r1, [pc, #528]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	497b      	ldr	r1, [pc, #492]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c14:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	4973      	ldr	r1, [pc, #460]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c36:	4b6e      	ldr	r3, [pc, #440]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	496a      	ldr	r1, [pc, #424]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c58:	4b65      	ldr	r3, [pc, #404]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4962      	ldr	r1, [pc, #392]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	4959      	ldr	r1, [pc, #356]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c9c:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ca2:	f023 0203 	bic.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	4951      	ldr	r1, [pc, #324]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	4948      	ldr	r1, [pc, #288]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d015      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ce0:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4940      	ldr	r1, [pc, #256]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d00:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a3a      	ldr	r2, [pc, #232]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d015      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d18:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	4932      	ldr	r1, [pc, #200]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d36:	d105      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d38:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a2c      	ldr	r2, [pc, #176]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d42:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d50:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	4924      	ldr	r1, [pc, #144]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d015      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	4916      	ldr	r1, [pc, #88]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d019      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4908      	ldr	r1, [pc, #32]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dde:	d109      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a02      	ldr	r2, [pc, #8]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dea:	60d3      	str	r3, [r2, #12]
 8002dec:	e002      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d015      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	4926      	ldr	r1, [pc, #152]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d015      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	4918      	ldr	r1, [pc, #96]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e70:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000

08002eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e049      	b.n	8002f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fefe 	bl	8000cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 fd78 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d001      	beq.n	8002f74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e04c      	b.n	800300e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a26      	ldr	r2, [pc, #152]	; (800301c <HAL_TIM_Base_Start+0xc0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d022      	beq.n	8002fcc <HAL_TIM_Base_Start+0x70>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d01d      	beq.n	8002fcc <HAL_TIM_Base_Start+0x70>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_TIM_Base_Start+0xc4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_TIM_Base_Start+0x70>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a21      	ldr	r2, [pc, #132]	; (8003024 <HAL_TIM_Base_Start+0xc8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_TIM_Base_Start+0x70>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_TIM_Base_Start+0xcc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_TIM_Base_Start+0x70>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_TIM_Base_Start+0xd0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_TIM_Base_Start+0x70>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_TIM_Base_Start+0xd4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIM_Base_Start+0x70>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <HAL_TIM_Base_Start+0xd8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d115      	bne.n	8002ff8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_TIM_Base_Start+0xdc>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d015      	beq.n	800300a <HAL_TIM_Base_Start+0xae>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d011      	beq.n	800300a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff6:	e008      	b.n	800300a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e000      	b.n	800300c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40000c00 	.word	0x40000c00
 800302c:	40013400 	.word	0x40013400
 8003030:	40014000 	.word	0x40014000
 8003034:	40015000 	.word	0x40015000
 8003038:	00010007 	.word	0x00010007

0800303c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e049      	b.n	80030e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f841 	bl	80030ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3304      	adds	r3, #4
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f000 fcb0 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <HAL_TIM_PWM_Start+0x24>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e03c      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d109      	bne.n	800313e <HAL_TIM_PWM_Start+0x3e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e02f      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d109      	bne.n	8003158 <HAL_TIM_PWM_Start+0x58>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e022      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d109      	bne.n	8003172 <HAL_TIM_PWM_Start+0x72>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e015      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b10      	cmp	r3, #16
 8003176:	d109      	bne.n	800318c <HAL_TIM_PWM_Start+0x8c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e008      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0a6      	b.n	80032f4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_PWM_Start+0xb6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b4:	e023      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0xc6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c4:	e01b      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xd6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d4:	e013      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xe6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e4:	e00b      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_PWM_Start+0xf6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f4:	e003      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2201      	movs	r2, #1
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f864 	bl	80042d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a3a      	ldr	r2, [pc, #232]	; (80032fc <HAL_TIM_PWM_Start+0x1fc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_TIM_PWM_Start+0x148>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a39      	ldr	r2, [pc, #228]	; (8003300 <HAL_TIM_PWM_Start+0x200>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_TIM_PWM_Start+0x148>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a37      	ldr	r2, [pc, #220]	; (8003304 <HAL_TIM_PWM_Start+0x204>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_TIM_PWM_Start+0x148>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a36      	ldr	r2, [pc, #216]	; (8003308 <HAL_TIM_PWM_Start+0x208>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_TIM_PWM_Start+0x148>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a34      	ldr	r2, [pc, #208]	; (800330c <HAL_TIM_PWM_Start+0x20c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_TIM_PWM_Start+0x148>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a33      	ldr	r2, [pc, #204]	; (8003310 <HAL_TIM_PWM_Start+0x210>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_TIM_PWM_Start+0x14c>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_TIM_PWM_Start+0x14e>
 800324c:	2300      	movs	r3, #0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_TIM_PWM_Start+0x1fc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x1b2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003274:	d01d      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x1b2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_TIM_PWM_Start+0x214>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x1b2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a24      	ldr	r2, [pc, #144]	; (8003318 <HAL_TIM_PWM_Start+0x218>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x1b2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a23      	ldr	r2, [pc, #140]	; (800331c <HAL_TIM_PWM_Start+0x21c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x1b2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <HAL_TIM_PWM_Start+0x200>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x1b2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_TIM_PWM_Start+0x204>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x1b2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIM_PWM_Start+0x210>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d115      	bne.n	80032de <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_TIM_PWM_Start+0x220>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d015      	beq.n	80032f0 <HAL_TIM_PWM_Start+0x1f0>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d011      	beq.n	80032f0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	e008      	b.n	80032f0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e000      	b.n	80032f2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	40013400 	.word	0x40013400
 8003304:	40014000 	.word	0x40014000
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800
 8003310:	40015000 	.word	0x40015000
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40000c00 	.word	0x40000c00
 8003320:	00010007 	.word	0x00010007

08003324 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e097      	b.n	8003468 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fd fd47 	bl	8000de0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003368:	f023 0307 	bic.w	r3, r3, #7
 800336c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f000 fb31 	bl	80039e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	4313      	orrs	r3, r2
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033c4:	f023 030c 	bic.w	r3, r3, #12
 80033c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4313      	orrs	r3, r2
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	011a      	lsls	r2, r3, #4
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	031b      	lsls	r3, r3, #12
 80033f4:	4313      	orrs	r3, r2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800340a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	4313      	orrs	r3, r2
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003480:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003488:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003490:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003498:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d110      	bne.n	80034c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034a6:	7b7b      	ldrb	r3, [r7, #13]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e069      	b.n	8003584 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c0:	e031      	b.n	8003526 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d110      	bne.n	80034ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034ce:	7b3b      	ldrb	r3, [r7, #12]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d001      	beq.n	80034d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e055      	b.n	8003584 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e8:	e01d      	b.n	8003526 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d108      	bne.n	8003502 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034f0:	7bbb      	ldrb	r3, [r7, #14]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034f6:	7b7b      	ldrb	r3, [r7, #13]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d102      	bne.n	8003502 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034fc:	7b3b      	ldrb	r3, [r7, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e03e      	b.n	8003584 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_TIM_Encoder_Start+0xc4>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b04      	cmp	r3, #4
 8003530:	d008      	beq.n	8003544 <HAL_TIM_Encoder_Start+0xd4>
 8003532:	e00f      	b.n	8003554 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2201      	movs	r2, #1
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fec9 	bl	80042d4 <TIM_CCxChannelCmd>
      break;
 8003542:	e016      	b.n	8003572 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2201      	movs	r2, #1
 800354a:	2104      	movs	r1, #4
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fec1 	bl	80042d4 <TIM_CCxChannelCmd>
      break;
 8003552:	e00e      	b.n	8003572 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f000 feb9 	bl	80042d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	2104      	movs	r1, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f000 feb2 	bl	80042d4 <TIM_CCxChannelCmd>
      break;
 8003570:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e0ff      	b.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b14      	cmp	r3, #20
 80035b6:	f200 80f0 	bhi.w	800379a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035ba:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c0:	08003615 	.word	0x08003615
 80035c4:	0800379b 	.word	0x0800379b
 80035c8:	0800379b 	.word	0x0800379b
 80035cc:	0800379b 	.word	0x0800379b
 80035d0:	08003655 	.word	0x08003655
 80035d4:	0800379b 	.word	0x0800379b
 80035d8:	0800379b 	.word	0x0800379b
 80035dc:	0800379b 	.word	0x0800379b
 80035e0:	08003697 	.word	0x08003697
 80035e4:	0800379b 	.word	0x0800379b
 80035e8:	0800379b 	.word	0x0800379b
 80035ec:	0800379b 	.word	0x0800379b
 80035f0:	080036d7 	.word	0x080036d7
 80035f4:	0800379b 	.word	0x0800379b
 80035f8:	0800379b 	.word	0x0800379b
 80035fc:	0800379b 	.word	0x0800379b
 8003600:	08003719 	.word	0x08003719
 8003604:	0800379b 	.word	0x0800379b
 8003608:	0800379b 	.word	0x0800379b
 800360c:	0800379b 	.word	0x0800379b
 8003610:	08003759 	.word	0x08003759
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fa94 	bl	8003b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0208 	orr.w	r2, r2, #8
 800362e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0204 	bic.w	r2, r2, #4
 800363e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6999      	ldr	r1, [r3, #24]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	619a      	str	r2, [r3, #24]
      break;
 8003652:	e0a5      	b.n	80037a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fb0e 	bl	8003c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800366e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6999      	ldr	r1, [r3, #24]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	021a      	lsls	r2, r3, #8
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	619a      	str	r2, [r3, #24]
      break;
 8003694:	e084      	b.n	80037a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fb81 	bl	8003da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0208 	orr.w	r2, r2, #8
 80036b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0204 	bic.w	r2, r2, #4
 80036c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69d9      	ldr	r1, [r3, #28]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	61da      	str	r2, [r3, #28]
      break;
 80036d4:	e064      	b.n	80037a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fbf3 	bl	8003ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69d9      	ldr	r1, [r3, #28]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	021a      	lsls	r2, r3, #8
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	61da      	str	r2, [r3, #28]
      break;
 8003716:	e043      	b.n	80037a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fc66 	bl	8003ff0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0208 	orr.w	r2, r2, #8
 8003732:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0204 	bic.w	r2, r2, #4
 8003742:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003756:	e023      	b.n	80037a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fcb0 	bl	80040c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003772:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003782:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003798:	e002      	b.n	80037a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
      break;
 800379e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop

080037b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e0f6      	b.n	80039be <HAL_TIM_ConfigClockSource+0x20a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80037ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a6f      	ldr	r2, [pc, #444]	; (80039c8 <HAL_TIM_ConfigClockSource+0x214>)
 800380a:	4293      	cmp	r3, r2
 800380c:	f000 80c1 	beq.w	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 8003810:	4a6d      	ldr	r2, [pc, #436]	; (80039c8 <HAL_TIM_ConfigClockSource+0x214>)
 8003812:	4293      	cmp	r3, r2
 8003814:	f200 80c6 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003818:	4a6c      	ldr	r2, [pc, #432]	; (80039cc <HAL_TIM_ConfigClockSource+0x218>)
 800381a:	4293      	cmp	r3, r2
 800381c:	f000 80b9 	beq.w	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 8003820:	4a6a      	ldr	r2, [pc, #424]	; (80039cc <HAL_TIM_ConfigClockSource+0x218>)
 8003822:	4293      	cmp	r3, r2
 8003824:	f200 80be 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003828:	4a69      	ldr	r2, [pc, #420]	; (80039d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	f000 80b1 	beq.w	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 8003830:	4a67      	ldr	r2, [pc, #412]	; (80039d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	f200 80b6 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003838:	4a66      	ldr	r2, [pc, #408]	; (80039d4 <HAL_TIM_ConfigClockSource+0x220>)
 800383a:	4293      	cmp	r3, r2
 800383c:	f000 80a9 	beq.w	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 8003840:	4a64      	ldr	r2, [pc, #400]	; (80039d4 <HAL_TIM_ConfigClockSource+0x220>)
 8003842:	4293      	cmp	r3, r2
 8003844:	f200 80ae 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003848:	4a63      	ldr	r2, [pc, #396]	; (80039d8 <HAL_TIM_ConfigClockSource+0x224>)
 800384a:	4293      	cmp	r3, r2
 800384c:	f000 80a1 	beq.w	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 8003850:	4a61      	ldr	r2, [pc, #388]	; (80039d8 <HAL_TIM_ConfigClockSource+0x224>)
 8003852:	4293      	cmp	r3, r2
 8003854:	f200 80a6 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003858:	4a60      	ldr	r2, [pc, #384]	; (80039dc <HAL_TIM_ConfigClockSource+0x228>)
 800385a:	4293      	cmp	r3, r2
 800385c:	f000 8099 	beq.w	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 8003860:	4a5e      	ldr	r2, [pc, #376]	; (80039dc <HAL_TIM_ConfigClockSource+0x228>)
 8003862:	4293      	cmp	r3, r2
 8003864:	f200 809e 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003868:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800386c:	f000 8091 	beq.w	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 8003870:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003874:	f200 8096 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800387c:	f000 8089 	beq.w	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 8003880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003884:	f200 808e 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388c:	d03e      	beq.n	800390c <HAL_TIM_ConfigClockSource+0x158>
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003892:	f200 8087 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	f000 8086 	beq.w	80039aa <HAL_TIM_ConfigClockSource+0x1f6>
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a2:	d87f      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80038a4:	2b70      	cmp	r3, #112	; 0x70
 80038a6:	d01a      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x12a>
 80038a8:	2b70      	cmp	r3, #112	; 0x70
 80038aa:	d87b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80038ac:	2b60      	cmp	r3, #96	; 0x60
 80038ae:	d050      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x19e>
 80038b0:	2b60      	cmp	r3, #96	; 0x60
 80038b2:	d877      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80038b4:	2b50      	cmp	r3, #80	; 0x50
 80038b6:	d03c      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x17e>
 80038b8:	2b50      	cmp	r3, #80	; 0x50
 80038ba:	d873      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d058      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x1be>
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d86f      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d064      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d86b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d060      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d867      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d05c      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d05a      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x1de>
 80038dc:	e062      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ee:	f000 fcd1 	bl	8004294 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	609a      	str	r2, [r3, #8]
      break;
 800390a:	e04f      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800391c:	f000 fcba 	bl	8004294 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392e:	609a      	str	r2, [r3, #8]
      break;
 8003930:	e03c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393e:	461a      	mov	r2, r3
 8003940:	f000 fc2c 	bl	800419c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2150      	movs	r1, #80	; 0x50
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fc85 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 8003950:	e02c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800395e:	461a      	mov	r2, r3
 8003960:	f000 fc4b 	bl	80041fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2160      	movs	r1, #96	; 0x60
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fc75 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 8003970:	e01c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397e:	461a      	mov	r2, r3
 8003980:	f000 fc0c 	bl	800419c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fc65 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 8003990:	e00c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f000 fc5c 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 80039a2:	e003      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      break;
 80039a8:	e000      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80039aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	00100070 	.word	0x00100070
 80039cc:	00100060 	.word	0x00100060
 80039d0:	00100050 	.word	0x00100050
 80039d4:	00100040 	.word	0x00100040
 80039d8:	00100030 	.word	0x00100030
 80039dc:	00100020 	.word	0x00100020

080039e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a4c      	ldr	r2, [pc, #304]	; (8003b24 <TIM_Base_SetConfig+0x144>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d017      	beq.n	8003a28 <TIM_Base_SetConfig+0x48>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fe:	d013      	beq.n	8003a28 <TIM_Base_SetConfig+0x48>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a49      	ldr	r2, [pc, #292]	; (8003b28 <TIM_Base_SetConfig+0x148>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00f      	beq.n	8003a28 <TIM_Base_SetConfig+0x48>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a48      	ldr	r2, [pc, #288]	; (8003b2c <TIM_Base_SetConfig+0x14c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <TIM_Base_SetConfig+0x48>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a47      	ldr	r2, [pc, #284]	; (8003b30 <TIM_Base_SetConfig+0x150>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0x48>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a46      	ldr	r2, [pc, #280]	; (8003b34 <TIM_Base_SetConfig+0x154>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0x48>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a45      	ldr	r2, [pc, #276]	; (8003b38 <TIM_Base_SetConfig+0x158>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d108      	bne.n	8003a3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a39      	ldr	r2, [pc, #228]	; (8003b24 <TIM_Base_SetConfig+0x144>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d023      	beq.n	8003a8a <TIM_Base_SetConfig+0xaa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d01f      	beq.n	8003a8a <TIM_Base_SetConfig+0xaa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a36      	ldr	r2, [pc, #216]	; (8003b28 <TIM_Base_SetConfig+0x148>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01b      	beq.n	8003a8a <TIM_Base_SetConfig+0xaa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a35      	ldr	r2, [pc, #212]	; (8003b2c <TIM_Base_SetConfig+0x14c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d017      	beq.n	8003a8a <TIM_Base_SetConfig+0xaa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a34      	ldr	r2, [pc, #208]	; (8003b30 <TIM_Base_SetConfig+0x150>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <TIM_Base_SetConfig+0xaa>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a33      	ldr	r2, [pc, #204]	; (8003b34 <TIM_Base_SetConfig+0x154>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00f      	beq.n	8003a8a <TIM_Base_SetConfig+0xaa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a33      	ldr	r2, [pc, #204]	; (8003b3c <TIM_Base_SetConfig+0x15c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00b      	beq.n	8003a8a <TIM_Base_SetConfig+0xaa>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a32      	ldr	r2, [pc, #200]	; (8003b40 <TIM_Base_SetConfig+0x160>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <TIM_Base_SetConfig+0xaa>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a31      	ldr	r2, [pc, #196]	; (8003b44 <TIM_Base_SetConfig+0x164>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_Base_SetConfig+0xaa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <TIM_Base_SetConfig+0x158>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d108      	bne.n	8003a9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <TIM_Base_SetConfig+0x144>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <TIM_Base_SetConfig+0x110>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <TIM_Base_SetConfig+0x154>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00f      	beq.n	8003af0 <TIM_Base_SetConfig+0x110>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <TIM_Base_SetConfig+0x15c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_Base_SetConfig+0x110>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <TIM_Base_SetConfig+0x160>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_Base_SetConfig+0x110>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <TIM_Base_SetConfig+0x164>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0x110>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <TIM_Base_SetConfig+0x158>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d103      	bne.n	8003af8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d105      	bne.n	8003b16 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f023 0201 	bic.w	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	611a      	str	r2, [r3, #16]
  }
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40013400 	.word	0x40013400
 8003b38:	40015000 	.word	0x40015000
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800

08003b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f023 0201 	bic.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f023 0302 	bic.w	r3, r3, #2
 8003b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a30      	ldr	r2, [pc, #192]	; (8003c64 <TIM_OC1_SetConfig+0x11c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x88>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a2f      	ldr	r2, [pc, #188]	; (8003c68 <TIM_OC1_SetConfig+0x120>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00f      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x88>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a2e      	ldr	r2, [pc, #184]	; (8003c6c <TIM_OC1_SetConfig+0x124>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x88>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <TIM_OC1_SetConfig+0x128>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x88>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <TIM_OC1_SetConfig+0x12c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x88>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a2b      	ldr	r2, [pc, #172]	; (8003c78 <TIM_OC1_SetConfig+0x130>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10c      	bne.n	8003bea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0308 	bic.w	r3, r3, #8
 8003bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <TIM_OC1_SetConfig+0x11c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <TIM_OC1_SetConfig+0xd2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <TIM_OC1_SetConfig+0x120>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00f      	beq.n	8003c1a <TIM_OC1_SetConfig+0xd2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <TIM_OC1_SetConfig+0x124>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <TIM_OC1_SetConfig+0xd2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <TIM_OC1_SetConfig+0x128>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <TIM_OC1_SetConfig+0xd2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <TIM_OC1_SetConfig+0x12c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_OC1_SetConfig+0xd2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <TIM_OC1_SetConfig+0x130>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d111      	bne.n	8003c3e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40013400 	.word	0x40013400
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	40015000 	.word	0x40015000

08003c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f023 0210 	bic.w	r2, r3, #16
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0320 	bic.w	r3, r3, #32
 8003cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <TIM_OC2_SetConfig+0x110>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <TIM_OC2_SetConfig+0x74>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <TIM_OC2_SetConfig+0x114>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_OC2_SetConfig+0x74>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a2a      	ldr	r2, [pc, #168]	; (8003d94 <TIM_OC2_SetConfig+0x118>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d10d      	bne.n	8003d0c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <TIM_OC2_SetConfig+0x110>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d013      	beq.n	8003d3c <TIM_OC2_SetConfig+0xc0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <TIM_OC2_SetConfig+0x114>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00f      	beq.n	8003d3c <TIM_OC2_SetConfig+0xc0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <TIM_OC2_SetConfig+0x11c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <TIM_OC2_SetConfig+0xc0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <TIM_OC2_SetConfig+0x120>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <TIM_OC2_SetConfig+0xc0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <TIM_OC2_SetConfig+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_OC2_SetConfig+0xc0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <TIM_OC2_SetConfig+0x118>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d113      	bne.n	8003d64 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40013400 	.word	0x40013400
 8003d94:	40015000 	.word	0x40015000
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800

08003da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2b      	ldr	r2, [pc, #172]	; (8003eb0 <TIM_OC3_SetConfig+0x10c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <TIM_OC3_SetConfig+0x72>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <TIM_OC3_SetConfig+0x110>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_OC3_SetConfig+0x72>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a29      	ldr	r2, [pc, #164]	; (8003eb8 <TIM_OC3_SetConfig+0x114>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10d      	bne.n	8003e32 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <TIM_OC3_SetConfig+0x10c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <TIM_OC3_SetConfig+0xbe>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <TIM_OC3_SetConfig+0x110>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00f      	beq.n	8003e62 <TIM_OC3_SetConfig+0xbe>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <TIM_OC3_SetConfig+0x118>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00b      	beq.n	8003e62 <TIM_OC3_SetConfig+0xbe>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <TIM_OC3_SetConfig+0x11c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d007      	beq.n	8003e62 <TIM_OC3_SetConfig+0xbe>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <TIM_OC3_SetConfig+0x120>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d003      	beq.n	8003e62 <TIM_OC3_SetConfig+0xbe>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a16      	ldr	r2, [pc, #88]	; (8003eb8 <TIM_OC3_SetConfig+0x114>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d113      	bne.n	8003e8a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	621a      	str	r2, [r3, #32]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40013400 	.word	0x40013400
 8003eb8:	40015000 	.word	0x40015000
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800

08003ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	031b      	lsls	r3, r3, #12
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a2c      	ldr	r2, [pc, #176]	; (8003fd8 <TIM_OC4_SetConfig+0x110>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_OC4_SetConfig+0x74>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a2b      	ldr	r2, [pc, #172]	; (8003fdc <TIM_OC4_SetConfig+0x114>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_OC4_SetConfig+0x74>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <TIM_OC4_SetConfig+0x118>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d10d      	bne.n	8003f58 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	031b      	lsls	r3, r3, #12
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a1f      	ldr	r2, [pc, #124]	; (8003fd8 <TIM_OC4_SetConfig+0x110>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <TIM_OC4_SetConfig+0xc0>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a1e      	ldr	r2, [pc, #120]	; (8003fdc <TIM_OC4_SetConfig+0x114>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00f      	beq.n	8003f88 <TIM_OC4_SetConfig+0xc0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a1e      	ldr	r2, [pc, #120]	; (8003fe4 <TIM_OC4_SetConfig+0x11c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <TIM_OC4_SetConfig+0xc0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a1d      	ldr	r2, [pc, #116]	; (8003fe8 <TIM_OC4_SetConfig+0x120>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d007      	beq.n	8003f88 <TIM_OC4_SetConfig+0xc0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <TIM_OC4_SetConfig+0x124>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_OC4_SetConfig+0xc0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <TIM_OC4_SetConfig+0x118>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d113      	bne.n	8003fb0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	019b      	lsls	r3, r3, #6
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40013400 	.word	0x40013400
 8003fe0:	40015000 	.word	0x40015000
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800

08003ff0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004034:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <TIM_OC5_SetConfig+0xbc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <TIM_OC5_SetConfig+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a18      	ldr	r2, [pc, #96]	; (80040b0 <TIM_OC5_SetConfig+0xc0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_OC5_SetConfig+0x82>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <TIM_OC5_SetConfig+0xc4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_OC5_SetConfig+0x82>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <TIM_OC5_SetConfig+0xc8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_OC5_SetConfig+0x82>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a15      	ldr	r2, [pc, #84]	; (80040bc <TIM_OC5_SetConfig+0xcc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_OC5_SetConfig+0x82>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <TIM_OC5_SetConfig+0xd0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d109      	bne.n	8004086 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004078:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40013400 	.word	0x40013400
 80040b4:	40014000 	.word	0x40014000
 80040b8:	40014400 	.word	0x40014400
 80040bc:	40014800 	.word	0x40014800
 80040c0:	40015000 	.word	0x40015000

080040c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800410a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	051b      	lsls	r3, r3, #20
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <TIM_OC6_SetConfig+0xc0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <TIM_OC6_SetConfig+0x84>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a19      	ldr	r2, [pc, #100]	; (8004188 <TIM_OC6_SetConfig+0xc4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00f      	beq.n	8004148 <TIM_OC6_SetConfig+0x84>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a18      	ldr	r2, [pc, #96]	; (800418c <TIM_OC6_SetConfig+0xc8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00b      	beq.n	8004148 <TIM_OC6_SetConfig+0x84>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a17      	ldr	r2, [pc, #92]	; (8004190 <TIM_OC6_SetConfig+0xcc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_OC6_SetConfig+0x84>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a16      	ldr	r2, [pc, #88]	; (8004194 <TIM_OC6_SetConfig+0xd0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_OC6_SetConfig+0x84>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a15      	ldr	r2, [pc, #84]	; (8004198 <TIM_OC6_SetConfig+0xd4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d109      	bne.n	800415c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	029b      	lsls	r3, r3, #10
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40013400 	.word	0x40013400
 800418c:	40014000 	.word	0x40014000
 8004190:	40014400 	.word	0x40014400
 8004194:	40014800 	.word	0x40014800
 8004198:	40015000 	.word	0x40015000

0800419c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f023 030a 	bic.w	r3, r3, #10
 80041d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f023 0210 	bic.w	r2, r3, #16
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004236:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	f043 0307 	orr.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	021a      	lsls	r2, r3, #8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2201      	movs	r2, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1a      	ldr	r2, [r3, #32]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	401a      	ands	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004334:	2302      	movs	r3, #2
 8004336:	e074      	b.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a34      	ldr	r2, [pc, #208]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d009      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a33      	ldr	r2, [pc, #204]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a31      	ldr	r2, [pc, #196]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d108      	bne.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800437c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a21      	ldr	r2, [pc, #132]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d022      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d01d      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1f      	ldr	r2, [pc, #124]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a11      	ldr	r2, [pc, #68]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10c      	bne.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40013400 	.word	0x40013400
 8004438:	40015000 	.word	0x40015000
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40000c00 	.word	0x40000c00
 8004448:	40014000 	.word	0x40014000

0800444c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004464:	2302      	movs	r3, #2
 8004466:	e078      	b.n	800455a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	041b      	lsls	r3, r3, #16
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1b      	ldr	r2, [pc, #108]	; (800456c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a19      	ldr	r2, [pc, #100]	; (8004570 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d11c      	bne.n	8004548 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	051b      	lsls	r3, r3, #20
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40013400 	.word	0x40013400
 8004570:	40015000 	.word	0x40015000

08004574 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8004574:	b480      	push	{r7}
 8004576:	b08b      	sub	sp, #44	; 0x2c
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_ConfigBreakInput+0x20>
 8004590:	2302      	movs	r3, #2
 8004592:	e10b      	b.n	80047ac <HAL_TIMEx_ConfigBreakInput+0x238>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	f000 8096 	beq.w	80046d2 <HAL_TIMEx_ConfigBreakInput+0x15e>
 80045a6:	2b80      	cmp	r3, #128	; 0x80
 80045a8:	f200 809c 	bhi.w	80046e4 <HAL_TIMEx_ConfigBreakInput+0x170>
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d849      	bhi.n	8004644 <HAL_TIMEx_ConfigBreakInput+0xd0>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8097 	beq.w	80046e4 <HAL_TIMEx_ConfigBreakInput+0x170>
 80045b6:	3b01      	subs	r3, #1
 80045b8:	2b1f      	cmp	r3, #31
 80045ba:	f200 8093 	bhi.w	80046e4 <HAL_TIMEx_ConfigBreakInput+0x170>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <HAL_TIMEx_ConfigBreakInput+0x50>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	0800464b 	.word	0x0800464b
 80045c8:	0800465f 	.word	0x0800465f
 80045cc:	080046e5 	.word	0x080046e5
 80045d0:	08004673 	.word	0x08004673
 80045d4:	080046e5 	.word	0x080046e5
 80045d8:	080046e5 	.word	0x080046e5
 80045dc:	080046e5 	.word	0x080046e5
 80045e0:	08004687 	.word	0x08004687
 80045e4:	080046e5 	.word	0x080046e5
 80045e8:	080046e5 	.word	0x080046e5
 80045ec:	080046e5 	.word	0x080046e5
 80045f0:	080046e5 	.word	0x080046e5
 80045f4:	080046e5 	.word	0x080046e5
 80045f8:	080046e5 	.word	0x080046e5
 80045fc:	080046e5 	.word	0x080046e5
 8004600:	0800469b 	.word	0x0800469b
 8004604:	080046e5 	.word	0x080046e5
 8004608:	080046e5 	.word	0x080046e5
 800460c:	080046e5 	.word	0x080046e5
 8004610:	080046e5 	.word	0x080046e5
 8004614:	080046e5 	.word	0x080046e5
 8004618:	080046e5 	.word	0x080046e5
 800461c:	080046e5 	.word	0x080046e5
 8004620:	080046e5 	.word	0x080046e5
 8004624:	080046e5 	.word	0x080046e5
 8004628:	080046e5 	.word	0x080046e5
 800462c:	080046e5 	.word	0x080046e5
 8004630:	080046e5 	.word	0x080046e5
 8004634:	080046e5 	.word	0x080046e5
 8004638:	080046e5 	.word	0x080046e5
 800463c:	080046e5 	.word	0x080046e5
 8004640:	080046af 	.word	0x080046af
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d03b      	beq.n	80046c0 <HAL_TIMEx_ConfigBreakInput+0x14c>
 8004648:	e04c      	b.n	80046e4 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800464a:	2301      	movs	r3, #1
 800464c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800464e:	2300      	movs	r3, #0
 8004650:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8004652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004656:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8004658:	2309      	movs	r3, #9
 800465a:	617b      	str	r3, [r7, #20]
      break;
 800465c:	e04b      	b.n	80046f6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800465e:	2302      	movs	r3, #2
 8004660:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8004662:	2301      	movs	r3, #1
 8004664:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8004666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800466a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800466c:	230a      	movs	r3, #10
 800466e:	617b      	str	r3, [r7, #20]
      break;
 8004670:	e041      	b.n	80046f6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8004672:	2304      	movs	r3, #4
 8004674:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8004676:	2302      	movs	r3, #2
 8004678:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800467a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800467e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8004680:	230b      	movs	r3, #11
 8004682:	617b      	str	r3, [r7, #20]
      break;
 8004684:	e037      	b.n	80046f6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8004686:	2308      	movs	r3, #8
 8004688:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800468a:	2303      	movs	r3, #3
 800468c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800468e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004692:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8004694:	230c      	movs	r3, #12
 8004696:	617b      	str	r3, [r7, #20]
      break;
 8004698:	e02d      	b.n	80046f6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800469a:	2310      	movs	r3, #16
 800469c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800469e:	2304      	movs	r3, #4
 80046a0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80046a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046a6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80046a8:	230d      	movs	r3, #13
 80046aa:	617b      	str	r3, [r7, #20]
      break;
 80046ac:	e023      	b.n	80046f6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 80046ae:	2320      	movs	r3, #32
 80046b0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 80046b2:	2305      	movs	r3, #5
 80046b4:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
      break;
 80046be:	e01a      	b.n	80046f6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 80046c0:	2340      	movs	r3, #64	; 0x40
 80046c2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 80046c4:	2306      	movs	r3, #6
 80046c6:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
      break;
 80046d0:	e011      	b.n	80046f6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 80046d6:	2307      	movs	r3, #7
 80046d8:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
      break;
 80046e2:	e008      	b.n	80046f6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
      break;
 80046f4:	bf00      	nop
    }
  }

  switch (BreakInput)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d003      	beq.n	8004704 <HAL_TIMEx_ConfigBreakInput+0x190>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d025      	beq.n	800474e <HAL_TIMEx_ConfigBreakInput+0x1da>
 8004702:	e049      	b.n	8004798 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	409a      	lsls	r2, r3
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	4013      	ands	r3, r2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	43db      	mvns	r3, r3
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4013      	ands	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	409a      	lsls	r2, r3
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4013      	ands	r3, r2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800474c:	e028      	b.n	80047a0 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004754:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	409a      	lsls	r2, r3
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	4013      	ands	r3, r2
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	43db      	mvns	r3, r3
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4013      	ands	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	409a      	lsls	r2, r3
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4013      	ands	r3, r2
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8004796:	e003      	b.n	80047a0 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800479e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	372c      	adds	r7, #44	; 0x2c
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e042      	b.n	8004850 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7fc fb9b 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2224      	movs	r2, #36	; 0x24
 80047e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fb9a 	bl	8004f3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f89b 	bl	8004944 <UART_SetConfig>
 800480e:	4603      	mov	r3, r0
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e01b      	b.n	8004850 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fc19 	bl	8005080 <UART_CheckIdleState>
 800484e:	4603      	mov	r3, r0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486c:	2b20      	cmp	r3, #32
 800486e:	d137      	bne.n	80048e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_UART_Receive_DMA+0x24>
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e030      	b.n	80048e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a18      	ldr	r2, [pc, #96]	; (80048ec <HAL_UART_Receive_DMA+0x94>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d01f      	beq.n	80048d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d018      	beq.n	80048d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	613b      	str	r3, [r7, #16]
   return(result);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	623b      	str	r3, [r7, #32]
 80048be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e6      	bne.n	800489e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	461a      	mov	r2, r3
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fcea 	bl	80052b0 <UART_Start_Receive_DMA>
 80048dc:	4603      	mov	r3, r0
 80048de:	e000      	b.n	80048e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3728      	adds	r7, #40	; 0x28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40008000 	.word	0x40008000

080048f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b08c      	sub	sp, #48	; 0x30
 800494a:	af00      	add	r7, sp, #0
 800494c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	431a      	orrs	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	4313      	orrs	r3, r2
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4baa      	ldr	r3, [pc, #680]	; (8004c1c <UART_SetConfig+0x2d8>)
 8004974:	4013      	ands	r3, r2
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800497c:	430b      	orrs	r3, r1
 800497e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a9f      	ldr	r2, [pc, #636]	; (8004c20 <UART_SetConfig+0x2dc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ac:	4313      	orrs	r3, r2
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80049ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	f023 010f 	bic.w	r1, r3, #15
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a90      	ldr	r2, [pc, #576]	; (8004c24 <UART_SetConfig+0x2e0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d125      	bne.n	8004a34 <UART_SetConfig+0xf0>
 80049e8:	4b8f      	ldr	r3, [pc, #572]	; (8004c28 <UART_SetConfig+0x2e4>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d81a      	bhi.n	8004a2c <UART_SetConfig+0xe8>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0xb8>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a1d 	.word	0x08004a1d
 8004a04:	08004a15 	.word	0x08004a15
 8004a08:	08004a25 	.word	0x08004a25
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a12:	e116      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1a:	e112      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a22:	e10e      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2a:	e10a      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a32:	e106      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a7c      	ldr	r2, [pc, #496]	; (8004c2c <UART_SetConfig+0x2e8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d138      	bne.n	8004ab0 <UART_SetConfig+0x16c>
 8004a3e:	4b7a      	ldr	r3, [pc, #488]	; (8004c28 <UART_SetConfig+0x2e4>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d82d      	bhi.n	8004aa8 <UART_SetConfig+0x164>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x110>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004aa9 	.word	0x08004aa9
 8004a5c:	08004aa9 	.word	0x08004aa9
 8004a60:	08004aa9 	.word	0x08004aa9
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004aa9 	.word	0x08004aa9
 8004a6c:	08004aa9 	.word	0x08004aa9
 8004a70:	08004aa9 	.word	0x08004aa9
 8004a74:	08004a91 	.word	0x08004a91
 8004a78:	08004aa9 	.word	0x08004aa9
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a8e:	e0d8      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004a90:	2302      	movs	r3, #2
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a96:	e0d4      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a9e:	e0d0      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa6:	e0cc      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aae:	e0c8      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a5e      	ldr	r2, [pc, #376]	; (8004c30 <UART_SetConfig+0x2ec>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d125      	bne.n	8004b06 <UART_SetConfig+0x1c2>
 8004aba:	4b5b      	ldr	r3, [pc, #364]	; (8004c28 <UART_SetConfig+0x2e4>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ac4:	2b30      	cmp	r3, #48	; 0x30
 8004ac6:	d016      	beq.n	8004af6 <UART_SetConfig+0x1b2>
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d818      	bhi.n	8004afe <UART_SetConfig+0x1ba>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d00a      	beq.n	8004ae6 <UART_SetConfig+0x1a2>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d814      	bhi.n	8004afe <UART_SetConfig+0x1ba>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <UART_SetConfig+0x19a>
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d008      	beq.n	8004aee <UART_SetConfig+0x1aa>
 8004adc:	e00f      	b.n	8004afe <UART_SetConfig+0x1ba>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae4:	e0ad      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aec:	e0a9      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004aee:	2304      	movs	r3, #4
 8004af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af4:	e0a5      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004af6:	2308      	movs	r3, #8
 8004af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afc:	e0a1      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004afe:	2310      	movs	r3, #16
 8004b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b04:	e09d      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <UART_SetConfig+0x2f0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d125      	bne.n	8004b5c <UART_SetConfig+0x218>
 8004b10:	4b45      	ldr	r3, [pc, #276]	; (8004c28 <UART_SetConfig+0x2e4>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b1c:	d016      	beq.n	8004b4c <UART_SetConfig+0x208>
 8004b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b20:	d818      	bhi.n	8004b54 <UART_SetConfig+0x210>
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d00a      	beq.n	8004b3c <UART_SetConfig+0x1f8>
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d814      	bhi.n	8004b54 <UART_SetConfig+0x210>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <UART_SetConfig+0x1f0>
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d008      	beq.n	8004b44 <UART_SetConfig+0x200>
 8004b32:	e00f      	b.n	8004b54 <UART_SetConfig+0x210>
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3a:	e082      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b42:	e07e      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	e07a      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b52:	e076      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5a:	e072      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a35      	ldr	r2, [pc, #212]	; (8004c38 <UART_SetConfig+0x2f4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d12a      	bne.n	8004bbc <UART_SetConfig+0x278>
 8004b66:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <UART_SetConfig+0x2e4>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b74:	d01a      	beq.n	8004bac <UART_SetConfig+0x268>
 8004b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b7a:	d81b      	bhi.n	8004bb4 <UART_SetConfig+0x270>
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b80:	d00c      	beq.n	8004b9c <UART_SetConfig+0x258>
 8004b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b86:	d815      	bhi.n	8004bb4 <UART_SetConfig+0x270>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <UART_SetConfig+0x250>
 8004b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b90:	d008      	beq.n	8004ba4 <UART_SetConfig+0x260>
 8004b92:	e00f      	b.n	8004bb4 <UART_SetConfig+0x270>
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9a:	e052      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba2:	e04e      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004baa:	e04a      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004bac:	2308      	movs	r3, #8
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb2:	e046      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bba:	e042      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <UART_SetConfig+0x2dc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d13a      	bne.n	8004c3c <UART_SetConfig+0x2f8>
 8004bc6:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <UART_SetConfig+0x2e4>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bd4:	d01a      	beq.n	8004c0c <UART_SetConfig+0x2c8>
 8004bd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bda:	d81b      	bhi.n	8004c14 <UART_SetConfig+0x2d0>
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be0:	d00c      	beq.n	8004bfc <UART_SetConfig+0x2b8>
 8004be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be6:	d815      	bhi.n	8004c14 <UART_SetConfig+0x2d0>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <UART_SetConfig+0x2b0>
 8004bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf0:	d008      	beq.n	8004c04 <UART_SetConfig+0x2c0>
 8004bf2:	e00f      	b.n	8004c14 <UART_SetConfig+0x2d0>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfa:	e022      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c02:	e01e      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004c04:	2304      	movs	r3, #4
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c0a:	e01a      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c12:	e016      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1a:	e012      	b.n	8004c42 <UART_SetConfig+0x2fe>
 8004c1c:	cfff69f3 	.word	0xcfff69f3
 8004c20:	40008000 	.word	0x40008000
 8004c24:	40013800 	.word	0x40013800
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40004400 	.word	0x40004400
 8004c30:	40004800 	.word	0x40004800
 8004c34:	40004c00 	.word	0x40004c00
 8004c38:	40005000 	.word	0x40005000
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4aae      	ldr	r2, [pc, #696]	; (8004f00 <UART_SetConfig+0x5bc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	f040 8097 	bne.w	8004d7c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d823      	bhi.n	8004c9e <UART_SetConfig+0x35a>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x318>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c9f 	.word	0x08004c9f
 8004c64:	08004c89 	.word	0x08004c89
 8004c68:	08004c9f 	.word	0x08004c9f
 8004c6c:	08004c8f 	.word	0x08004c8f
 8004c70:	08004c9f 	.word	0x08004c9f
 8004c74:	08004c9f 	.word	0x08004c9f
 8004c78:	08004c9f 	.word	0x08004c9f
 8004c7c:	08004c97 	.word	0x08004c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fd fe54 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8004c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c86:	e010      	b.n	8004caa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c88:	4b9e      	ldr	r3, [pc, #632]	; (8004f04 <UART_SetConfig+0x5c0>)
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c8c:	e00d      	b.n	8004caa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8e:	f7fd fddf 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8004c92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c94:	e009      	b.n	8004caa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c9c:	e005      	b.n	8004caa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ca8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8130 	beq.w	8004f12 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	4a94      	ldr	r2, [pc, #592]	; (8004f08 <UART_SetConfig+0x5c4>)
 8004cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	4413      	add	r3, r2
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d305      	bcc.n	8004ce2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d903      	bls.n	8004cea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ce8:	e113      	b.n	8004f12 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	2200      	movs	r2, #0
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	60fa      	str	r2, [r7, #12]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	4a84      	ldr	r2, [pc, #528]	; (8004f08 <UART_SetConfig+0x5c4>)
 8004cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2200      	movs	r2, #0
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d0c:	f7fb fa84 	bl	8000218 <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	020b      	lsls	r3, r1, #8
 8004d22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d26:	0202      	lsls	r2, r0, #8
 8004d28:	6979      	ldr	r1, [r7, #20]
 8004d2a:	6849      	ldr	r1, [r1, #4]
 8004d2c:	0849      	lsrs	r1, r1, #1
 8004d2e:	2000      	movs	r0, #0
 8004d30:	460c      	mov	r4, r1
 8004d32:	4605      	mov	r5, r0
 8004d34:	eb12 0804 	adds.w	r8, r2, r4
 8004d38:	eb43 0905 	adc.w	r9, r3, r5
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	469a      	mov	sl, r3
 8004d44:	4693      	mov	fp, r2
 8004d46:	4652      	mov	r2, sl
 8004d48:	465b      	mov	r3, fp
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	f7fb fa63 	bl	8000218 <__aeabi_uldivmod>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4613      	mov	r3, r2
 8004d58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d60:	d308      	bcc.n	8004d74 <UART_SetConfig+0x430>
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d68:	d204      	bcs.n	8004d74 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6a3a      	ldr	r2, [r7, #32]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	e0ce      	b.n	8004f12 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d7a:	e0ca      	b.n	8004f12 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d84:	d166      	bne.n	8004e54 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d827      	bhi.n	8004dde <UART_SetConfig+0x49a>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x450>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	08004ddf 	.word	0x08004ddf
 8004da4:	08004dcf 	.word	0x08004dcf
 8004da8:	08004ddf 	.word	0x08004ddf
 8004dac:	08004ddf 	.word	0x08004ddf
 8004db0:	08004ddf 	.word	0x08004ddf
 8004db4:	08004dd7 	.word	0x08004dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db8:	f7fd fdb8 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8004dbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dbe:	e014      	b.n	8004dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc0:	f7fd fdca 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8004dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dc6:	e010      	b.n	8004dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b4e      	ldr	r3, [pc, #312]	; (8004f04 <UART_SetConfig+0x5c0>)
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dcc:	e00d      	b.n	8004dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fd fd3f 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dd4:	e009      	b.n	8004dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ddc:	e005      	b.n	8004dea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004de8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8090 	beq.w	8004f12 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	4a44      	ldr	r2, [pc, #272]	; (8004f08 <UART_SetConfig+0x5c4>)
 8004df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e04:	005a      	lsls	r2, r3, #1
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	441a      	add	r2, r3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	d916      	bls.n	8004e4c <UART_SetConfig+0x508>
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e24:	d212      	bcs.n	8004e4c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f023 030f 	bic.w	r3, r3, #15
 8004e2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	8bfb      	ldrh	r3, [r7, #30]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	8bfa      	ldrh	r2, [r7, #30]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	e062      	b.n	8004f12 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e52:	e05e      	b.n	8004f12 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d828      	bhi.n	8004eae <UART_SetConfig+0x56a>
 8004e5c:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <UART_SetConfig+0x520>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004e89 	.word	0x08004e89
 8004e68:	08004e91 	.word	0x08004e91
 8004e6c:	08004e99 	.word	0x08004e99
 8004e70:	08004eaf 	.word	0x08004eaf
 8004e74:	08004e9f 	.word	0x08004e9f
 8004e78:	08004eaf 	.word	0x08004eaf
 8004e7c:	08004eaf 	.word	0x08004eaf
 8004e80:	08004eaf 	.word	0x08004eaf
 8004e84:	08004ea7 	.word	0x08004ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e88:	f7fd fd50 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8004e8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e8e:	e014      	b.n	8004eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e90:	f7fd fd62 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8004e94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e96:	e010      	b.n	8004eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <UART_SetConfig+0x5c0>)
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e9c:	e00d      	b.n	8004eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9e:	f7fd fcd7 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8004ea2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ea4:	e009      	b.n	8004eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004eac:	e005      	b.n	8004eba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004eb8:	bf00      	nop
    }

    if (pclk != 0U)
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d028      	beq.n	8004f12 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	4a10      	ldr	r2, [pc, #64]	; (8004f08 <UART_SetConfig+0x5c4>)
 8004ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	441a      	add	r2, r3
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d910      	bls.n	8004f0c <UART_SetConfig+0x5c8>
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef0:	d20c      	bcs.n	8004f0c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60da      	str	r2, [r3, #12]
 8004efc:	e009      	b.n	8004f12 <UART_SetConfig+0x5ce>
 8004efe:	bf00      	nop
 8004f00:	40008000 	.word	0x40008000
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	080059c4 	.word	0x080059c4
      }
      else
      {
        ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004f2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3730      	adds	r7, #48	; 0x30
 8004f36:	46bd      	mov	sp, r7
 8004f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	f003 0310 	and.w	r3, r3, #16
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01a      	beq.n	8005052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800503a:	d10a      	bne.n	8005052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	605a      	str	r2, [r3, #4]
  }
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b098      	sub	sp, #96	; 0x60
 8005084:	af02      	add	r7, sp, #8
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005090:	f7fc f978 	bl	8001384 <HAL_GetTick>
 8005094:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d12f      	bne.n	8005104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ac:	2200      	movs	r2, #0
 80050ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f88e 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d022      	beq.n	8005104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d2:	653b      	str	r3, [r7, #80]	; 0x50
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050dc:	647b      	str	r3, [r7, #68]	; 0x44
 80050de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e6      	bne.n	80050be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e063      	b.n	80051cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b04      	cmp	r3, #4
 8005110:	d149      	bne.n	80051a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005112:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511a:	2200      	movs	r2, #0
 800511c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f857 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d03c      	beq.n	80051a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	623b      	str	r3, [r7, #32]
   return(result);
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005140:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
 800514c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e6      	bne.n	800512c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3308      	adds	r3, #8
 8005164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	60fb      	str	r3, [r7, #12]
   return(result);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	64bb      	str	r3, [r7, #72]	; 0x48
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800517e:	61fa      	str	r2, [r7, #28]
 8005180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	69b9      	ldr	r1, [r7, #24]
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	617b      	str	r3, [r7, #20]
   return(result);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e5      	bne.n	800515e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e012      	b.n	80051cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3758      	adds	r7, #88	; 0x58
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	e04f      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d04b      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fc f8c9 	bl	8001384 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <UART_WaitOnFlagUntilTimeout+0x30>
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e04e      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d037      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b80      	cmp	r3, #128	; 0x80
 800521a:	d034      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d031      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d110      	bne.n	8005252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2208      	movs	r2, #8
 8005236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f920 	bl	800547e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2208      	movs	r2, #8
 8005242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e029      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005260:	d111      	bne.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f906 	bl	800547e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e00f      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	bf0c      	ite	eq
 8005296:	2301      	moveq	r3, #1
 8005298:	2300      	movne	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d0a0      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b096      	sub	sp, #88	; 0x58
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2222      	movs	r2, #34	; 0x22
 80052d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02d      	beq.n	8005342 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ec:	4a40      	ldr	r2, [pc, #256]	; (80053f0 <UART_Start_Receive_DMA+0x140>)
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052f6:	4a3f      	ldr	r2, [pc, #252]	; (80053f4 <UART_Start_Receive_DMA+0x144>)
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005300:	4a3d      	ldr	r2, [pc, #244]	; (80053f8 <UART_Start_Receive_DMA+0x148>)
 8005302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800530a:	2200      	movs	r2, #0
 800530c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3324      	adds	r3, #36	; 0x24
 800531a:	4619      	mov	r1, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	461a      	mov	r2, r3
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	f7fc f9f2 	bl	800170c <HAL_DMA_Start_IT>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2210      	movs	r2, #16
 8005332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e051      	b.n	80053e6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d018      	beq.n	800537c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535e:	657b      	str	r3, [r7, #84]	; 0x54
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005368:	64bb      	str	r3, [r7, #72]	; 0x48
 800536a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800536e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e6      	bne.n	800534a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3308      	adds	r3, #8
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	653b      	str	r3, [r7, #80]	; 0x50
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800539c:	637a      	str	r2, [r7, #52]	; 0x34
 800539e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3308      	adds	r3, #8
 80053b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	613b      	str	r3, [r7, #16]
   return(result);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3308      	adds	r3, #8
 80053ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053d0:	623a      	str	r2, [r7, #32]
 80053d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	69f9      	ldr	r1, [r7, #28]
 80053d6:	6a3a      	ldr	r2, [r7, #32]
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e5      	bne.n	80053b0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3758      	adds	r7, #88	; 0x58
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	0800554b 	.word	0x0800554b
 80053f4:	08005677 	.word	0x08005677
 80053f8:	080056b5 	.word	0x080056b5

080053fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b08f      	sub	sp, #60	; 0x3c
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	61fb      	str	r3, [r7, #28]
   return(result);
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005424:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e6      	bne.n	8005404 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	60bb      	str	r3, [r7, #8]
   return(result);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800544c:	633b      	str	r3, [r7, #48]	; 0x30
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3308      	adds	r3, #8
 8005454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005456:	61ba      	str	r2, [r7, #24]
 8005458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	613b      	str	r3, [r7, #16]
   return(result);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e5      	bne.n	8005436 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8005472:	bf00      	nop
 8005474:	373c      	adds	r7, #60	; 0x3c
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800547e:	b480      	push	{r7}
 8005480:	b095      	sub	sp, #84	; 0x54
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
 80054a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e3      	bne.n	80054b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d118      	bne.n	800552a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	60bb      	str	r3, [r7, #8]
   return(result);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f023 0310 	bic.w	r3, r3, #16
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6979      	ldr	r1, [r7, #20]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	613b      	str	r3, [r7, #16]
   return(result);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e6      	bne.n	80054f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800553e:	bf00      	nop
 8005540:	3754      	adds	r7, #84	; 0x54
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b09c      	sub	sp, #112	; 0x70
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d171      	bne.n	800564a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005568:	2200      	movs	r2, #0
 800556a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800557c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005582:	66bb      	str	r3, [r7, #104]	; 0x68
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800558c:	65bb      	str	r3, [r7, #88]	; 0x58
 800558e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800559a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	667b      	str	r3, [r7, #100]	; 0x64
 80055b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80055c0:	647a      	str	r2, [r7, #68]	; 0x44
 80055c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	623b      	str	r3, [r7, #32]
   return(result);
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ea:	663b      	str	r3, [r7, #96]	; 0x60
 80055ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055f4:	633a      	str	r2, [r7, #48]	; 0x30
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	2220      	movs	r2, #32
 800560c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d118      	bne.n	800564a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	60fb      	str	r3, [r7, #12]
   return(result);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f023 0310 	bic.w	r3, r3, #16
 800562c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800562e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	69b9      	ldr	r1, [r7, #24]
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	617b      	str	r3, [r7, #20]
   return(result);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e6      	bne.n	8005618 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800564a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564c:	2200      	movs	r2, #0
 800564e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d107      	bne.n	8005668 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800565e:	4619      	mov	r1, r3
 8005660:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005662:	f7ff f963 	bl	800492c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005666:	e002      	b.n	800566e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005668:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800566a:	f7ff f941 	bl	80048f0 <HAL_UART_RxCpltCallback>
}
 800566e:	bf00      	nop
 8005670:	3770      	adds	r7, #112	; 0x70
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d109      	bne.n	80056a6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	b29b      	uxth	r3, r3
 800569c:	4619      	mov	r1, r3
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff f944 	bl	800492c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056a4:	e002      	b.n	80056ac <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff f92c 	bl	8004904 <HAL_UART_RxHalfCpltCallback>
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056dc:	2b80      	cmp	r3, #128	; 0x80
 80056de:	d109      	bne.n	80056f4 <UART_DMAError+0x40>
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b21      	cmp	r3, #33	; 0x21
 80056e4:	d106      	bne.n	80056f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80056ee:	6978      	ldr	r0, [r7, #20]
 80056f0:	f7ff fe84 	bl	80053fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fe:	2b40      	cmp	r3, #64	; 0x40
 8005700:	d109      	bne.n	8005716 <UART_DMAError+0x62>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b22      	cmp	r3, #34	; 0x22
 8005706:	d106      	bne.n	8005716 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2200      	movs	r2, #0
 800570c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005710:	6978      	ldr	r0, [r7, #20]
 8005712:	f7ff feb4 	bl	800547e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	f043 0210 	orr.w	r2, r3, #16
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005726:	6978      	ldr	r0, [r7, #20]
 8005728:	f7ff f8f6 	bl	8004918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572c:	bf00      	nop
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_UARTEx_DisableFifoMode+0x16>
 8005746:	2302      	movs	r3, #2
 8005748:	e027      	b.n	800579a <HAL_UARTEx_DisableFifoMode+0x66>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2224      	movs	r2, #36	; 0x24
 8005756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e02d      	b.n	800581a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2224      	movs	r2, #36	; 0x24
 80057ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f850 	bl	80058a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005836:	2302      	movs	r3, #2
 8005838:	e02d      	b.n	8005896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2224      	movs	r2, #36	; 0x24
 8005846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f812 	bl	80058a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d108      	bne.n	80058c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058c0:	e031      	b.n	8005926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058c2:	2308      	movs	r3, #8
 80058c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058c6:	2308      	movs	r3, #8
 80058c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	0e5b      	lsrs	r3, r3, #25
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	0f5b      	lsrs	r3, r3, #29
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058ea:	7bbb      	ldrb	r3, [r7, #14]
 80058ec:	7b3a      	ldrb	r2, [r7, #12]
 80058ee:	4911      	ldr	r1, [pc, #68]	; (8005934 <UARTEx_SetNbDataToProcess+0x94>)
 80058f0:	5c8a      	ldrb	r2, [r1, r2]
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058f6:	7b3a      	ldrb	r2, [r7, #12]
 80058f8:	490f      	ldr	r1, [pc, #60]	; (8005938 <UARTEx_SetNbDataToProcess+0x98>)
 80058fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005900:	b29a      	uxth	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	7b7a      	ldrb	r2, [r7, #13]
 800590c:	4909      	ldr	r1, [pc, #36]	; (8005934 <UARTEx_SetNbDataToProcess+0x94>)
 800590e:	5c8a      	ldrb	r2, [r1, r2]
 8005910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005914:	7b7a      	ldrb	r2, [r7, #13]
 8005916:	4908      	ldr	r1, [pc, #32]	; (8005938 <UARTEx_SetNbDataToProcess+0x98>)
 8005918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800591a:	fb93 f3f2 	sdiv	r3, r3, r2
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	080059dc 	.word	0x080059dc
 8005938:	080059e4 	.word	0x080059e4

0800593c <memset>:
 800593c:	4402      	add	r2, r0
 800593e:	4603      	mov	r3, r0
 8005940:	4293      	cmp	r3, r2
 8005942:	d100      	bne.n	8005946 <memset+0xa>
 8005944:	4770      	bx	lr
 8005946:	f803 1b01 	strb.w	r1, [r3], #1
 800594a:	e7f9      	b.n	8005940 <memset+0x4>

0800594c <__libc_init_array>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	4d0d      	ldr	r5, [pc, #52]	; (8005984 <__libc_init_array+0x38>)
 8005950:	4c0d      	ldr	r4, [pc, #52]	; (8005988 <__libc_init_array+0x3c>)
 8005952:	1b64      	subs	r4, r4, r5
 8005954:	10a4      	asrs	r4, r4, #2
 8005956:	2600      	movs	r6, #0
 8005958:	42a6      	cmp	r6, r4
 800595a:	d109      	bne.n	8005970 <__libc_init_array+0x24>
 800595c:	4d0b      	ldr	r5, [pc, #44]	; (800598c <__libc_init_array+0x40>)
 800595e:	4c0c      	ldr	r4, [pc, #48]	; (8005990 <__libc_init_array+0x44>)
 8005960:	f000 f818 	bl	8005994 <_init>
 8005964:	1b64      	subs	r4, r4, r5
 8005966:	10a4      	asrs	r4, r4, #2
 8005968:	2600      	movs	r6, #0
 800596a:	42a6      	cmp	r6, r4
 800596c:	d105      	bne.n	800597a <__libc_init_array+0x2e>
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	f855 3b04 	ldr.w	r3, [r5], #4
 8005974:	4798      	blx	r3
 8005976:	3601      	adds	r6, #1
 8005978:	e7ee      	b.n	8005958 <__libc_init_array+0xc>
 800597a:	f855 3b04 	ldr.w	r3, [r5], #4
 800597e:	4798      	blx	r3
 8005980:	3601      	adds	r6, #1
 8005982:	e7f2      	b.n	800596a <__libc_init_array+0x1e>
 8005984:	080059f4 	.word	0x080059f4
 8005988:	080059f4 	.word	0x080059f4
 800598c:	080059f4 	.word	0x080059f4
 8005990:	080059f8 	.word	0x080059f8

08005994 <_init>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr

080059a0 <_fini>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	bf00      	nop
 80059a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a6:	bc08      	pop	{r3}
 80059a8:	469e      	mov	lr, r3
 80059aa:	4770      	bx	lr
