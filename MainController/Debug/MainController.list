
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005790  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a8  080059a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080059a8  080059a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b0  080059b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b0  080059b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  2000000c  080059c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080059c4  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001265c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002445  00000000  00000000  000326db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00034b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d06  00000000  00000000  00035bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025831  00000000  00000000  000368be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013242  00000000  00000000  0005c0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7eb2  00000000  00000000  0006f331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046ac  00000000  00000000  001671e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0016b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005950 	.word	0x08005950

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005950 	.word	0x08005950

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fed1 	bl	80012be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f83c 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 faf6 	bl	8000b10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 faba 	bl	8000a9c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000528:	f000 fa20 	bl	800096c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800052c:	f000 fa6a 	bl	8000a04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000530:	f000 f87e 	bl	8000630 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000534:	f000 f950 	bl	80007d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000538:	f000 f9a2 	bl	8000880 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 10);
 800053c:	220a      	movs	r2, #10
 800053e:	4910      	ldr	r1, [pc, #64]	; (8000580 <main+0x6c>)
 8000540:	4810      	ldr	r0, [pc, #64]	; (8000584 <main+0x70>)
 8000542:	f004 f967 	bl	8004814 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system


  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 8000546:	4810      	ldr	r0, [pc, #64]	; (8000588 <main+0x74>)
 8000548:	f002 fce6 	bl	8002f18 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800054c:	2100      	movs	r1, #0
 800054e:	480e      	ldr	r0, [pc, #56]	; (8000588 <main+0x74>)
 8000550:	f002 fdb4 	bl	80030bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000554:	2104      	movs	r1, #4
 8000556:	480c      	ldr	r0, [pc, #48]	; (8000588 <main+0x74>)
 8000558:	f002 fdb0 	bl	80030bc <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800055c:	213c      	movs	r1, #60	; 0x3c
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <main+0x78>)
 8000560:	f002 ff64 	bl	800342c <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <main+0x7c>)
 8000566:	f002 fcd7 	bl	8002f18 <HAL_TIM_Base_Start>

  // TODO: Test retract x axis
//  uint16_t result = retractX();
//  uint16_t result = extendX();
  serviceMotor(20000, 0);
 800056a:	2100      	movs	r1, #0
 800056c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000570:	f000 fb8e 	bl	8000c90 <serviceMotor>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // TODO: Test encoder QEI, remove later
	  qeiRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <main+0x78>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057a:	4a06      	ldr	r2, [pc, #24]	; (8000594 <main+0x80>)
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e7f9      	b.n	8000574 <main+0x60>
 8000580:	20000354 	.word	0x20000354
 8000584:	2000016c 	.word	0x2000016c
 8000588:	20000028 	.word	0x20000028
 800058c:	20000074 	.word	0x20000074
 8000590:	200000c0 	.word	0x200000c0
 8000594:	20000360 	.word	0x20000360

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	2238      	movs	r2, #56	; 0x38
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 f9a6 	bl	80058f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f001 fc24 	bl	8001e08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2340      	movs	r3, #64	; 0x40
 80005cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005da:	2355      	movs	r3, #85	; 0x55
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fcbe 	bl	8001f70 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005fa:	f000 fb87 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2303      	movs	r3, #3
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f001 ffbc 	bl	8002594 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000622:	f000 fb73 	bl	8000d0c <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09e      	sub	sp, #120	; 0x78
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000650:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]
 800066e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2234      	movs	r2, #52	; 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 f93e 	bl	80058f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800067c:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 800067e:	4a55      	ldr	r2, [pc, #340]	; (80007d4 <MX_TIM1_Init+0x1a4>)
 8000680:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000682:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000684:	2201      	movs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000696:	4b4e      	ldr	r3, [pc, #312]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800069c:	4b4c      	ldr	r3, [pc, #304]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a8:	4849      	ldr	r0, [pc, #292]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006aa:	f002 fbdd 	bl	8002e68 <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80006b4:	f000 fb2a 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006c2:	4619      	mov	r1, r3
 80006c4:	4842      	ldr	r0, [pc, #264]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006c6:	f003 f853 	bl	8003770 <HAL_TIM_ConfigClockSource>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006d0:	f000 fb1c 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006d4:	483e      	ldr	r0, [pc, #248]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006d6:	f002 fc8f 	bl	8002ff8 <HAL_TIM_PWM_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80006e0:	f000 fb14 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006f4:	4619      	mov	r1, r3
 80006f6:	4836      	ldr	r0, [pc, #216]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80006f8:	f003 fdf0 	bl	80042dc <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000702:	f000 fb03 	bl	8000d0c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000706:	2301      	movs	r3, #1
 8000708:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800070a:	2301      	movs	r3, #1
 800070c:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 800070e:	2301      	movs	r3, #1
 8000710:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000712:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000716:	461a      	mov	r2, r3
 8000718:	2101      	movs	r1, #1
 800071a:	482d      	ldr	r0, [pc, #180]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 800071c:	f003 ff08 	bl	8004530 <HAL_TIMEx_ConfigBreakInput>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000726:	f000 faf1 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072a:	2360      	movs	r3, #96	; 0x60
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000732:	2300      	movs	r3, #0
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000736:	2300      	movs	r3, #0
 8000738:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	4820      	ldr	r0, [pc, #128]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000750:	f002 fefa 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800075a:	f000 fad7 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800075e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000762:	2204      	movs	r2, #4
 8000764:	4619      	mov	r1, r3
 8000766:	481a      	ldr	r0, [pc, #104]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 8000768:	f002 feee 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000772:	f000 facb 	bl	8000d0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800079c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80007b4:	f003 fe28 	bl	8004408 <HAL_TIMEx_ConfigBreakDeadTime>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80007be:	f000 faa5 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <MX_TIM1_Init+0x1a0>)
 80007c4:	f000 fb92 	bl	8000eec <HAL_TIM_MspPostInit>

}
 80007c8:	bf00      	nop
 80007ca:	3778      	adds	r7, #120	; 0x78
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000028 	.word	0x20000028
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2224      	movs	r2, #36	; 0x24
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 f886 	bl	80058f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_TIM2_Init+0xa4>)
 80007f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_TIM2_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM2_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_TIM2_Init+0xa4>)
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM2_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_TIM2_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800081e:	2303      	movs	r3, #3
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000826:	2301      	movs	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000836:	2301      	movs	r3, #1
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_TIM2_Init+0xa4>)
 800084a:	f002 fd49 	bl	80032e0 <HAL_TIM_Encoder_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000854:	f000 fa5a 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_TIM2_Init+0xa4>)
 8000866:	f003 fd39 	bl	80042dc <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000870:	f000 fa4c 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	; 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000074 	.word	0x20000074

08000880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008b4:	4a2c      	ldr	r2, [pc, #176]	; (8000968 <MX_TIM3_Init+0xe8>)
 80008b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008c6:	226a      	movs	r2, #106	; 0x6a
 80008c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008d6:	4823      	ldr	r0, [pc, #140]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008d8:	f002 fac6 	bl	8002e68 <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008e2:	f000 fa13 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f0:	4619      	mov	r1, r3
 80008f2:	481c      	ldr	r0, [pc, #112]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008f4:	f002 ff3c 	bl	8003770 <HAL_TIM_ConfigClockSource>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008fe:	f000 fa05 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000902:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000904:	f002 fb78 	bl	8002ff8 <HAL_TIM_PWM_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800090e:	f000 f9fd 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4810      	ldr	r0, [pc, #64]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000922:	f003 fcdb 	bl	80042dc <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800092c:	f000 f9ee 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000930:	2360      	movs	r3, #96	; 0x60
 8000932:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	2204      	movs	r2, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000948:	f002 fdfe 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000952:	f000 f9db 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000958:	f000 fac8 	bl	8000eec <HAL_TIM_MspPostInit>

}
 800095c:	bf00      	nop
 800095e:	3738      	adds	r7, #56	; 0x38
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000c0 	.word	0x200000c0
 8000968:	40000400 	.word	0x40000400

0800096c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART1_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009b6:	f003 fedd 	bl	8004774 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f9a4 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009c8:	f004 fecb 	bl	8005762 <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f99b 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009da:	f004 ff00 	bl	80057de <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f992 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009ea:	f004 fe81 	bl	80056f0 <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f98a 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000016c 	.word	0x2000016c
 8000a00:	40013800 	.word	0x40013800

08000a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <MX_USART2_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a4e:	f003 fe91 	bl	8004774 <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f958 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a60:	f004 fe7f 	bl	8005762 <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f94f 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a72:	f004 feb4 	bl	80057de <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f946 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_USART2_UART_Init+0x90>)
 8000a82:	f004 fe35 	bl	80056f0 <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f93e 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000200 	.word	0x20000200
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_DMA_Init+0x70>)
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <MX_DMA_Init+0x70>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6493      	str	r3, [r2, #72]	; 0x48
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_DMA_Init+0x70>)
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_DMA_Init+0x70>)
 8000abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000abe:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <MX_DMA_Init+0x70>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_DMA_Init+0x70>)
 8000ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	200b      	movs	r0, #11
 8000ad8:	f000 fd3d 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000adc:	200b      	movs	r0, #11
 8000ade:	f000 fd54 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	200c      	movs	r0, #12
 8000ae8:	f000 fd35 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000aec:	200c      	movs	r0, #12
 8000aee:	f000 fd4c 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	200d      	movs	r0, #13
 8000af8:	f000 fd2d 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000afc:	200d      	movs	r0, #13
 8000afe:	f000 fd44 	bl	800158a <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4b57      	ldr	r3, [pc, #348]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4a56      	ldr	r2, [pc, #344]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4b54      	ldr	r3, [pc, #336]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3e:	4b51      	ldr	r3, [pc, #324]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a50      	ldr	r2, [pc, #320]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b44:	f043 0320 	orr.w	r3, r3, #32
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b4e      	ldr	r3, [pc, #312]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0320 	and.w	r3, r3, #32
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b4b      	ldr	r3, [pc, #300]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a4a      	ldr	r2, [pc, #296]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b48      	ldr	r3, [pc, #288]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a44      	ldr	r2, [pc, #272]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <MX_GPIO_Init+0x174>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f240 4111 	movw	r1, #1041	; 0x411
 8000b8c:	483e      	ldr	r0, [pc, #248]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000b8e:	f001 f90b 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	483d      	ldr	r0, [pc, #244]	; (8000c8c <MX_GPIO_Init+0x17c>)
 8000b98:	f001 f906 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4836      	ldr	r0, [pc, #216]	; (8000c8c <MX_GPIO_Init+0x17c>)
 8000bb4:	f000 ff76 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f000 ff69 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 8000bd2:	f240 4311 	movw	r3, #1041	; 0x411
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4827      	ldr	r0, [pc, #156]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000bec:	f000 ff5a 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4821      	ldr	r0, [pc, #132]	; (8000c8c <MX_GPIO_Init+0x17c>)
 8000c08:	f000 ff4c 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f000 ff3d 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000c40:	f000 ff30 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c44:	2340      	movs	r3, #64	; 0x40
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_GPIO_Init+0x178>)
 8000c58:	f000 ff24 	bl	8001aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2017      	movs	r0, #23
 8000c62:	f000 fc78 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c66:	2017      	movs	r0, #23
 8000c68:	f000 fc8f 	bl	800158a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2028      	movs	r0, #40	; 0x28
 8000c72:	f000 fc70 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c76:	2028      	movs	r0, #40	; 0x28
 8000c78:	f000 fc87 	bl	800158a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	48000800 	.word	0x48000800

08000c90 <serviceMotor>:
 *		pwm: (unsigned 32-bit integer) Motor pwm value
 *		dir: (unsigned 8-bit integer) Motor direction
 *
 */

void serviceMotor(uint32_t pwm, uint8_t dir){
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]

	if(dir){
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d008      	beq.n	8000cb4 <serviceMotor+0x24>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <serviceMotor+0x40>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <serviceMotor+0x40>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
	}
}
 8000cb2:	e007      	b.n	8000cc4 <serviceMotor+0x34>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <serviceMotor+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <serviceMotor+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	20000028 	.word	0x20000028

08000cd4 <HAL_GPIO_EXTI_Callback>:
uint32_t getEncoderValue(){
	return __HAL_TIM_GET_COUNTER(&htim2);
}

// @User : If gripper hit endstop, Stop motor
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_10){
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	2b20      	cmp	r3, #32
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_EXTI_Callback+0x18>
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cea:	d107      	bne.n	8000cfc <HAL_GPIO_EXTI_Callback+0x28>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x34>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x34>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	20000028 	.word	0x20000028

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d4e:	f001 f8ff 	bl	8001f50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <HAL_TIM_Base_MspInit+0xf8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d129      	bne.n	8000dd6 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <HAL_TIM_Base_MspInit+0xfc>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a35      	ldr	r2, [pc, #212]	; (8000e5c <HAL_TIM_Base_MspInit+0xfc>)
 8000d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <HAL_TIM_Base_MspInit+0xfc>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <HAL_TIM_Base_MspInit+0xfc>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a2f      	ldr	r2, [pc, #188]	; (8000e5c <HAL_TIM_Base_MspInit+0xfc>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_TIM_Base_MspInit+0xfc>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db6:	2312      	movs	r3, #18
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f000 fe68 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dd4:	e03b      	b.n	8000e4e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <HAL_TIM_Base_MspInit+0x100>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d136      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_TIM_Base_MspInit+0xfc>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_TIM_Base_MspInit+0xfc>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	6593      	str	r3, [r2, #88]	; 0x58
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_TIM_Base_MspInit+0xfc>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <HAL_TIM_Base_MspInit+0x108>)
 8000dfc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e00:	223e      	movs	r2, #62	; 0x3e
 8000e02:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e06:	2210      	movs	r2, #16
 8000e08:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e1c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e34:	f000 fbc4 	bl	80015c0 <HAL_DMA_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_TIM_Base_MspInit+0xe2>
      Error_Handler();
 8000e3e:	f7ff ff65 	bl	8000d0c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_TIM_Base_MspInit+0x104>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012c00 	.word	0x40012c00
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40000400 	.word	0x40000400
 8000e64:	2000010c 	.word	0x2000010c
 8000e68:	40020030 	.word	0x40020030

08000e6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e8c:	d128      	bne.n	8000ee0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000ebe:	2322      	movs	r3, #34	; 0x22
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000edc:	f000 fde2 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3728      	adds	r7, #40	; 0x28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <HAL_TIM_MspPostInit+0xac>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d11e      	bne.n	8000f4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <HAL_TIM_MspPostInit+0xb0>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <HAL_TIM_MspPostInit+0xb0>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_TIM_MspPostInit+0xb0>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f38:	2306      	movs	r3, #6
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f000 fdad 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f4a:	e021      	b.n	8000f90 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_TIM_MspPostInit+0xb4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d11c      	bne.n	8000f90 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_TIM_MspPostInit+0xb0>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_TIM_MspPostInit+0xb0>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_TIM_MspPostInit+0xb0>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f6e:	2310      	movs	r3, #16
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f000 fd8a 	bl	8001aa4 <HAL_GPIO_Init>
}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40012c00 	.word	0x40012c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40000400 	.word	0x40000400

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0a0      	sub	sp, #128	; 0x80
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	2254      	movs	r2, #84	; 0x54
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 fc97 	bl	80058f8 <memset>
  if(huart->Instance==USART1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a68      	ldr	r2, [pc, #416]	; (8001170 <HAL_UART_MspInit+0x1cc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d161      	bne.n	8001098 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fcf3 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fec:	f7ff fe8e 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff0:	4b60      	ldr	r3, [pc, #384]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff4:	4a5f      	ldr	r2, [pc, #380]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffc:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a59      	ldr	r2, [pc, #356]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b57      	ldr	r3, [pc, #348]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001020:	2330      	movs	r3, #48	; 0x30
 8001022:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001030:	2307      	movs	r3, #7
 8001032:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001038:	4619      	mov	r1, r3
 800103a:	484f      	ldr	r0, [pc, #316]	; (8001178 <HAL_UART_MspInit+0x1d4>)
 800103c:	f000 fd32 	bl	8001aa4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001040:	4b4e      	ldr	r3, [pc, #312]	; (800117c <HAL_UART_MspInit+0x1d8>)
 8001042:	4a4f      	ldr	r2, [pc, #316]	; (8001180 <HAL_UART_MspInit+0x1dc>)
 8001044:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001046:	4b4d      	ldr	r3, [pc, #308]	; (800117c <HAL_UART_MspInit+0x1d8>)
 8001048:	2218      	movs	r2, #24
 800104a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104c:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_UART_MspInit+0x1d8>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001052:	4b4a      	ldr	r3, [pc, #296]	; (800117c <HAL_UART_MspInit+0x1d8>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <HAL_UART_MspInit+0x1d8>)
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105e:	4b47      	ldr	r3, [pc, #284]	; (800117c <HAL_UART_MspInit+0x1d8>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001064:	4b45      	ldr	r3, [pc, #276]	; (800117c <HAL_UART_MspInit+0x1d8>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800106a:	4b44      	ldr	r3, [pc, #272]	; (800117c <HAL_UART_MspInit+0x1d8>)
 800106c:	2220      	movs	r2, #32
 800106e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001070:	4b42      	ldr	r3, [pc, #264]	; (800117c <HAL_UART_MspInit+0x1d8>)
 8001072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001076:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001078:	4840      	ldr	r0, [pc, #256]	; (800117c <HAL_UART_MspInit+0x1d8>)
 800107a:	f000 faa1 	bl	80015c0 <HAL_DMA_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001084:	f7ff fe42 	bl	8000d0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a3c      	ldr	r2, [pc, #240]	; (800117c <HAL_UART_MspInit+0x1d8>)
 800108c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001090:	4a3a      	ldr	r2, [pc, #232]	; (800117c <HAL_UART_MspInit+0x1d8>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001096:	e066      	b.n	8001166 <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a39      	ldr	r2, [pc, #228]	; (8001184 <HAL_UART_MspInit+0x1e0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d161      	bne.n	8001166 <HAL_UART_MspInit+0x1c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010aa:	f107 0318 	add.w	r3, r7, #24
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fc8c 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_UART_MspInit+0x11a>
      Error_Handler();
 80010ba:	f7ff fe27 	bl	8000d0c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	4a2c      	ldr	r2, [pc, #176]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a26      	ldr	r2, [pc, #152]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_UART_MspInit+0x1d0>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ee:	230c      	movs	r3, #12
 80010f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010fe:	2307      	movs	r3, #7
 8001100:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110c:	f000 fcca 	bl	8001aa4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_UART_MspInit+0x1e8>)
 8001114:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 8001118:	221a      	movs	r2, #26
 800111a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 800113c:	2220      	movs	r2, #32
 800113e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 8001142:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001146:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 800114a:	f000 fa39 	bl	80015c0 <HAL_DMA_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8001154:	f7ff fdda 	bl	8000d0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 800115c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_UART_MspInit+0x1e4>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001166:	bf00      	nop
 8001168:	3780      	adds	r7, #128	; 0x80
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40013800 	.word	0x40013800
 8001174:	40021000 	.word	0x40021000
 8001178:	48000800 	.word	0x48000800
 800117c:	20000294 	.word	0x20000294
 8001180:	4002001c 	.word	0x4002001c
 8001184:	40004400 	.word	0x40004400
 8001188:	200002f4 	.word	0x200002f4
 800118c:	40020008 	.word	0x40020008

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011dc:	f000 f8c2 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <DMA1_Channel1_IRQHandler+0x10>)
 80011ea:	f000 fb0c 	bl	8001806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002f4 	.word	0x200002f4

080011f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA1_Channel2_IRQHandler+0x10>)
 80011fe:	f000 fb02 	bl	8001806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000294 	.word	0x20000294

0800120c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA1_Channel3_IRQHandler+0x10>)
 8001212:	f000 faf8 	bl	8001806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000010c 	.word	0x2000010c

08001220 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001224:	2020      	movs	r0, #32
 8001226:	f000 fdd7 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}

0800122e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001232:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001236:	f000 fdcf 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800123a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800123e:	f000 fdcb 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800126e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001270:	f7ff ffea 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopForever+0xe>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopForever+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f004 fb35 	bl	8005908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800129e:	f7ff f939 	bl	8000514 <main>

080012a2 <LoopForever>:

LoopForever:
    b LoopForever
 80012a2:	e7fe      	b.n	80012a2 <LoopForever>
  ldr   r0, =_estack
 80012a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012b0:	080059b8 	.word	0x080059b8
  ldr r2, =_sbss
 80012b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012b8:	20000368 	.word	0x20000368

080012bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC1_2_IRQHandler>

080012be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f939 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f80e 	bl	80012f0 <HAL_InitTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	e001      	b.n	80012e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012e0:	f7ff fd1a 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e4:	79fb      	ldrb	r3, [r7, #7]

}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_InitTick+0x68>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d022      	beq.n	800134a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_InitTick+0x6c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_InitTick+0x68>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001310:	fbb1 f3f3 	udiv	r3, r1, r3
 8001314:	fbb2 f3f3 	udiv	r3, r2, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f944 	bl	80015a6 <HAL_SYSTICK_Config>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10f      	bne.n	8001344 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	d809      	bhi.n	800133e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132a:	2200      	movs	r2, #0
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	f04f 30ff 	mov.w	r0, #4294967295
 8001332:	f000 f910 	bl	8001556 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_InitTick+0x70>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	e007      	b.n	800134e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	e004      	b.n	800134e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e001      	b.n	800134e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000008 	.word	0x20000008
 800135c:	20000000 	.word	0x20000000
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x1c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_IncTick+0x20>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4413      	add	r3, r2
 8001372:	4a03      	ldr	r2, [pc, #12]	; (8001380 <HAL_IncTick+0x1c>)
 8001374:	6013      	str	r3, [r2, #0]
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000364 	.word	0x20000364
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000364 	.word	0x20000364

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	60d3      	str	r3, [r2, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db0b      	blt.n	800142e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <__NVIC_EnableIRQ+0x38>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f7ff ff8e 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff29 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff40 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff90 	bl	8001494 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5f 	bl	8001440 <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff33 	bl	8001404 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa4 	bl	80014fc <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e08d      	b.n	80016ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_DMA_Init+0x138>)
 80015da:	429a      	cmp	r2, r3
 80015dc:	d80f      	bhi.n	80015fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <HAL_DMA_Init+0x13c>)
 80015e6:	4413      	add	r3, r2
 80015e8:	4a45      	ldr	r2, [pc, #276]	; (8001700 <HAL_DMA_Init+0x140>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	009a      	lsls	r2, r3, #2
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a42      	ldr	r2, [pc, #264]	; (8001704 <HAL_DMA_Init+0x144>)
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
 80015fc:	e00e      	b.n	800161c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b40      	ldr	r3, [pc, #256]	; (8001708 <HAL_DMA_Init+0x148>)
 8001606:	4413      	add	r3, r2
 8001608:	4a3d      	ldr	r2, [pc, #244]	; (8001700 <HAL_DMA_Init+0x140>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	009a      	lsls	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a3c      	ldr	r2, [pc, #240]	; (800170c <HAL_DMA_Init+0x14c>)
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001636:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f9b6 	bl	80019e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800167c:	d102      	bne.n	8001684 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001698:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d010      	beq.n	80016c4 <HAL_DMA_Init+0x104>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d80c      	bhi.n	80016c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f9d6 	bl	8001a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	e008      	b.n	80016d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40020407 	.word	0x40020407
 80016fc:	bffdfff8 	.word	0xbffdfff8
 8001700:	cccccccd 	.word	0xcccccccd
 8001704:	40020000 	.word	0x40020000
 8001708:	bffdfbf8 	.word	0xbffdfbf8
 800170c:	40020400 	.word	0x40020400

08001710 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_DMA_Start_IT+0x20>
 800172c:	2302      	movs	r3, #2
 800172e:	e066      	b.n	80017fe <HAL_DMA_Start_IT+0xee>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d155      	bne.n	80017f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 f8fb 	bl	8001964 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 020e 	orr.w	r2, r2, #14
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e00f      	b.n	80017a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0204 	bic.w	r2, r2, #4
 8001796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 020a 	orr.w	r2, r2, #10
 80017a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e005      	b.n	80017fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
 80017fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	2204      	movs	r2, #4
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d026      	beq.n	8001880 <HAL_DMA_IRQHandler+0x7a>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d021      	beq.n	8001880 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b00      	cmp	r3, #0
 8001848:	d107      	bne.n	800185a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0204 	bic.w	r2, r2, #4
 8001858:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f003 021f 	and.w	r2, r3, #31
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2104      	movs	r1, #4
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	2b00      	cmp	r3, #0
 8001874:	d071      	beq.n	800195a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800187e:	e06c      	b.n	800195a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	2202      	movs	r2, #2
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d02e      	beq.n	80018f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d029      	beq.n	80018f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10b      	bne.n	80018c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 020a 	bic.w	r2, r2, #10
 80018ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2102      	movs	r1, #2
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d038      	beq.n	800195a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018f0:	e033      	b.n	800195a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2208      	movs	r2, #8
 80018fc:	409a      	lsls	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4013      	ands	r3, r2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d02a      	beq.n	800195c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d025      	beq.n	800195c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 020e 	bic.w	r2, r2, #14
 800191e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800195a:	bf00      	nop
 800195c:	bf00      	nop
}
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800197a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800198c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f003 021f 	and.w	r2, r3, #31
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d108      	bne.n	80019c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019c2:	e007      	b.n	80019d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d802      	bhi.n	80019fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e001      	b.n	80019fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80019fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	3b08      	subs	r3, #8
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	009a      	lsls	r2, r3, #2
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4413      	add	r3, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2201      	movs	r2, #1
 8001a34:	409a      	lsls	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a3a:	bf00      	nop
 8001a3c:	371c      	adds	r7, #28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40020407 	.word	0x40020407
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020820 	.word	0x40020820
 8001a54:	cccccccd 	.word	0xcccccccd
 8001a58:	40020880 	.word	0x40020880

08001a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	2201      	movs	r2, #1
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	1000823f 	.word	0x1000823f
 8001aa0:	40020940 	.word	0x40020940

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ab2:	e15a      	b.n	8001d6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 814c 	beq.w	8001d64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d005      	beq.n	8001ae4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d130      	bne.n	8001b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 0201 	and.w	r2, r3, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d017      	beq.n	8001b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d123      	bne.n	8001bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	6939      	ldr	r1, [r7, #16]
 8001bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0203 	and.w	r2, r3, #3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80a6 	beq.w	8001d64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c18:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <HAL_GPIO_Init+0x2e4>)
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1c:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <HAL_GPIO_Init+0x2e4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6613      	str	r3, [r2, #96]	; 0x60
 8001c24:	4b58      	ldr	r3, [pc, #352]	; (8001d88 <HAL_GPIO_Init+0x2e4>)
 8001c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c30:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c5a:	d01f      	beq.n	8001c9c <HAL_GPIO_Init+0x1f8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d019      	beq.n	8001c98 <HAL_GPIO_Init+0x1f4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_GPIO_Init+0x2f0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d013      	beq.n	8001c94 <HAL_GPIO_Init+0x1f0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a4a      	ldr	r2, [pc, #296]	; (8001d98 <HAL_GPIO_Init+0x2f4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00d      	beq.n	8001c90 <HAL_GPIO_Init+0x1ec>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a49      	ldr	r2, [pc, #292]	; (8001d9c <HAL_GPIO_Init+0x2f8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d007      	beq.n	8001c8c <HAL_GPIO_Init+0x1e8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d101      	bne.n	8001c88 <HAL_GPIO_Init+0x1e4>
 8001c84:	2305      	movs	r3, #5
 8001c86:	e00a      	b.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c88:	2306      	movs	r3, #6
 8001c8a:	e008      	b.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	e006      	b.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c90:	2303      	movs	r3, #3
 8001c92:	e004      	b.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	f002 0203 	and.w	r2, r2, #3
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	4093      	lsls	r3, r2
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cae:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cbc:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ce0:	4a30      	ldr	r2, [pc, #192]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d0a:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d34:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d5e:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f ae9d 	bne.w	8001ab4 <HAL_GPIO_Init+0x10>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	48000400 	.word	0x48000400
 8001d94:	48000800 	.word	0x48000800
 8001d98:	48000c00 	.word	0x48000c00
 8001d9c:	48001000 	.word	0x48001000
 8001da0:	48001400 	.word	0x48001400
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe ff6c 	bl	8000cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d141      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e16:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e22:	d131      	bne.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e24:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e2a:	4a46      	ldr	r2, [pc, #280]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e34:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e3c:	4a41      	ldr	r2, [pc, #260]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e44:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2232      	movs	r2, #50	; 0x32
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	3301      	adds	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e5a:	e002      	b.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6e:	d102      	bne.n	8001e76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f2      	bne.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e76:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e82:	d158      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e057      	b.n	8001f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e88:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e98:	e04d      	b.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea0:	d141      	bne.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eae:	d131      	bne.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb6:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec8:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2232      	movs	r2, #50	; 0x32
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	0c9b      	lsrs	r3, r3, #18
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee6:	e002      	b.n	8001eee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	d102      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f2      	bne.n	8001ee8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d112      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e011      	b.n	8001f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f24:	e007      	b.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40007000 	.word	0x40007000
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	431bde83 	.word	0x431bde83

08001f50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5e:	6093      	str	r3, [r2, #8]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40007000 	.word	0x40007000

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e2fe      	b.n	8002580 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d075      	beq.n	800207a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8e:	4b97      	ldr	r3, [pc, #604]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f98:	4b94      	ldr	r3, [pc, #592]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b0c      	cmp	r3, #12
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_OscConfig+0x3e>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d002      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x44>
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	4b8d      	ldr	r3, [pc, #564]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d05b      	beq.n	8002078 <HAL_RCC_OscConfig+0x108>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d157      	bne.n	8002078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e2d9      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x74>
 8001fd6:	4b85      	ldr	r3, [pc, #532]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a84      	ldr	r2, [pc, #528]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e01d      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x98>
 8001fee:	4b7f      	ldr	r3, [pc, #508]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7b      	ldr	r2, [pc, #492]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e00b      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8002008:	4b78      	ldr	r3, [pc, #480]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a77      	ldr	r2, [pc, #476]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b75      	ldr	r3, [pc, #468]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a74      	ldr	r2, [pc, #464]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff f9ae 	bl	8001388 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff f9aa 	bl	8001388 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e29e      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002042:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0xc0>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f99a 	bl	8001388 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff f996 	bl	8001388 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e28a      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800206a:	4b60      	ldr	r3, [pc, #384]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0xe8>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d075      	beq.n	8002172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002086:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002090:	4b56      	ldr	r3, [pc, #344]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d102      	bne.n	80020a6 <HAL_RCC_OscConfig+0x136>
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d002      	beq.n	80020ac <HAL_RCC_OscConfig+0x13c>
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d11f      	bne.n	80020ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ac:	4b4f      	ldr	r3, [pc, #316]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x154>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e25d      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b49      	ldr	r3, [pc, #292]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	4946      	ldr	r1, [pc, #280]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020d8:	4b45      	ldr	r3, [pc, #276]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f907 	bl	80012f0 <HAL_InitTick>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d043      	beq.n	8002170 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e249      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d023      	beq.n	800213c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f4:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a3c      	ldr	r2, [pc, #240]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff f942 	bl	8001388 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002108:	f7ff f93e 	bl	8001388 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e232      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800211a:	4b34      	ldr	r3, [pc, #208]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	492d      	ldr	r1, [pc, #180]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
 800213a:	e01a      	b.n	8002172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2a      	ldr	r2, [pc, #168]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7ff f91e 	bl	8001388 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff f91a 	bl	8001388 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e20e      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1e0>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d041      	beq.n	8002202 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d01c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 8002188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218c:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7ff f8f7 	bl	8001388 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219e:	f7ff f8f3 	bl	8001388 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1e7      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ef      	beq.n	800219e <HAL_RCC_OscConfig+0x22e>
 80021be:	e020      	b.n	8002202 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7ff f8da 	bl	8001388 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d6:	e00d      	b.n	80021f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d8:	f7ff f8d6 	bl	8001388 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d906      	bls.n	80021f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1ca      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ea      	bne.n	80021d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80a6 	beq.w	800235c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002214:	4b84      	ldr	r3, [pc, #528]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0x2b4>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x2b6>
 8002224:	2300      	movs	r3, #0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00d      	beq.n	8002246 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b7f      	ldr	r3, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a7e      	ldr	r2, [pc, #504]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
 8002236:	4b7c      	ldr	r3, [pc, #496]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002246:	4b79      	ldr	r3, [pc, #484]	; (800242c <HAL_RCC_OscConfig+0x4bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002252:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x4bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a75      	ldr	r2, [pc, #468]	; (800242c <HAL_RCC_OscConfig+0x4bc>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7ff f893 	bl	8001388 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7ff f88f 	bl	8001388 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e183      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002278:	4b6c      	ldr	r3, [pc, #432]	; (800242c <HAL_RCC_OscConfig+0x4bc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d108      	bne.n	800229e <HAL_RCC_OscConfig+0x32e>
 800228c:	4b66      	ldr	r3, [pc, #408]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800229c:	e024      	b.n	80022e8 <HAL_RCC_OscConfig+0x378>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d110      	bne.n	80022c8 <HAL_RCC_OscConfig+0x358>
 80022a6:	4b60      	ldr	r3, [pc, #384]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	4a5a      	ldr	r2, [pc, #360]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c6:	e00f      	b.n	80022e8 <HAL_RCC_OscConfig+0x378>
 80022c8:	4b57      	ldr	r3, [pc, #348]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	4a56      	ldr	r2, [pc, #344]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d8:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d016      	beq.n	800231e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff f84a 	bl	8001388 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7ff f846 	bl	8001388 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e138      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0ed      	beq.n	80022f8 <HAL_RCC_OscConfig+0x388>
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231e:	f7ff f833 	bl	8001388 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7ff f82f 	bl	8001388 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e121      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800233c:	4b3a      	ldr	r3, [pc, #232]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ed      	bne.n	8002326 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800234a:	7ffb      	ldrb	r3, [r7, #31]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002350:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	4a34      	ldr	r2, [pc, #208]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d03c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01c      	beq.n	80023aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002376:	4a2c      	ldr	r2, [pc, #176]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7ff f802 	bl	8001388 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002388:	f7fe fffe 	bl	8001388 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0f2      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 800239c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ef      	beq.n	8002388 <HAL_RCC_OscConfig+0x418>
 80023a8:	e01b      	b.n	80023e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80023ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe ffe5 	bl	8001388 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c2:	f7fe ffe1 	bl	8001388 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0d5      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80023d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ef      	bne.n	80023c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80c9 	beq.w	800257e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	f000 8083 	beq.w	8002500 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d15e      	bne.n	80024c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <HAL_RCC_OscConfig+0x4b8>)
 8002408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800240c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe ffbb 	bl	8001388 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002414:	e00c      	b.n	8002430 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe ffb7 	bl	8001388 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d905      	bls.n	8002430 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0ab      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
 8002428:	40021000 	.word	0x40021000
 800242c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002430:	4b55      	ldr	r3, [pc, #340]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ec      	bne.n	8002416 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243c:	4b52      	ldr	r3, [pc, #328]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	4b52      	ldr	r3, [pc, #328]	; (800258c <HAL_RCC_OscConfig+0x61c>)
 8002442:	4013      	ands	r3, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6a11      	ldr	r1, [r2, #32]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244c:	3a01      	subs	r2, #1
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002456:	0212      	lsls	r2, r2, #8
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800245e:	0852      	lsrs	r2, r2, #1
 8002460:	3a01      	subs	r2, #1
 8002462:	0552      	lsls	r2, r2, #21
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800246a:	0852      	lsrs	r2, r2, #1
 800246c:	3a01      	subs	r2, #1
 800246e:	0652      	lsls	r2, r2, #25
 8002470:	4311      	orrs	r1, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002476:	06d2      	lsls	r2, r2, #27
 8002478:	430a      	orrs	r2, r1
 800247a:	4943      	ldr	r1, [pc, #268]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 800247c:	4313      	orrs	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a40      	ldr	r2, [pc, #256]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 8002486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800248c:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a3d      	ldr	r2, [pc, #244]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002496:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe ff76 	bl	8001388 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe ff72 	bl	8001388 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e066      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b2:	4b35      	ldr	r3, [pc, #212]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x530>
 80024be:	e05e      	b.n	800257e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c0:	4b31      	ldr	r3, [pc, #196]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a30      	ldr	r2, [pc, #192]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 80024c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe ff5c 	bl	8001388 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe ff58 	bl	8001388 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e04c      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	4924      	ldr	r1, [pc, #144]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 80024f8:	4b25      	ldr	r3, [pc, #148]	; (8002590 <HAL_RCC_OscConfig+0x620>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
 80024fe:	e03e      	b.n	800257e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e039      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_RCC_OscConfig+0x618>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0203 	and.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	429a      	cmp	r2, r3
 800251e:	d12c      	bne.n	800257a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	3b01      	subs	r3, #1
 800252c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d123      	bne.n	800257a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d11b      	bne.n	800257a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d113      	bne.n	800257a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	3b01      	subs	r3, #1
 8002560:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d109      	bne.n	800257a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	3b01      	subs	r3, #1
 8002574:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	019f800c 	.word	0x019f800c
 8002590:	feeefffc 	.word	0xfeeefffc

08002594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e11e      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d910      	bls.n	80025dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b8e      	ldr	r3, [pc, #568]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 020f 	bic.w	r2, r3, #15
 80025c2:	498c      	ldr	r1, [pc, #560]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b8a      	ldr	r3, [pc, #552]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e106      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d073      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d129      	bne.n	8002644 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f0:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0f4      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002600:	f000 f99e 	bl	8002940 <RCC_GetSysClockFreqFromPLLSource>
 8002604:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4a7c      	ldr	r2, [pc, #496]	; (80027fc <HAL_RCC_ClockConfig+0x268>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d93f      	bls.n	800268e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800260e:	4b7a      	ldr	r3, [pc, #488]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	d033      	beq.n	800268e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d12f      	bne.n	800268e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800262e:	4b72      	ldr	r3, [pc, #456]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002636:	4a70      	ldr	r2, [pc, #448]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e024      	b.n	800268e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d107      	bne.n	800265c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0c6      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265c:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0be      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800266c:	f000 f8ce 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8002670:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4a61      	ldr	r2, [pc, #388]	; (80027fc <HAL_RCC_ClockConfig+0x268>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d909      	bls.n	800268e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800267a:	4b5f      	ldr	r3, [pc, #380]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002682:	4a5d      	ldr	r2, [pc, #372]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002688:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b5a      	ldr	r3, [pc, #360]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4957      	ldr	r1, [pc, #348]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a0:	f7fe fe72 	bl	8001388 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7fe fe6e 	bl	8001388 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e095      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b4e      	ldr	r3, [pc, #312]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d023      	beq.n	8002724 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e8:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80026ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002708:	4a3b      	ldr	r2, [pc, #236]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800270e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4936      	ldr	r1, [pc, #216]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
 8002722:	e008      	b.n	8002736 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b80      	cmp	r3, #128	; 0x80
 8002728:	d105      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4a32      	ldr	r2, [pc, #200]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 8002730:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002734:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d21d      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 020f 	bic.w	r2, r3, #15
 800274c:	4929      	ldr	r1, [pc, #164]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002754:	f7fe fe18 	bl	8001388 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275c:	f7fe fe14 	bl	8001388 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e03b      	b.n	80027ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_ClockConfig+0x260>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d1ed      	bne.n	800275c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4917      	ldr	r1, [pc, #92]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490f      	ldr	r1, [pc, #60]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027be:	f000 f825 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_RCC_ClockConfig+0x264>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	490c      	ldr	r1, [pc, #48]	; (8002800 <HAL_RCC_ClockConfig+0x26c>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_RCC_ClockConfig+0x270>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_RCC_ClockConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fd84 	bl	80012f0 <HAL_InitTick>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	04c4b400 	.word	0x04c4b400
 8002800:	08005968 	.word	0x08005968
 8002804:	20000000 	.word	0x20000000
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b04      	cmp	r3, #4
 800281c:	d102      	bne.n	8002824 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	e047      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d102      	bne.n	8002836 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002830:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e03e      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002836:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b0c      	cmp	r3, #12
 8002840:	d136      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3301      	adds	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d10c      	bne.n	800287a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286a:	68d2      	ldr	r2, [r2, #12]
 800286c:	0a12      	lsrs	r2, r2, #8
 800286e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
      break;
 8002878:	e00c      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800287a:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002884:	68d2      	ldr	r2, [r2, #12]
 8002886:	0a12      	lsrs	r2, r2, #8
 8002888:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
      break;
 8002892:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0e5b      	lsrs	r3, r3, #25
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	e001      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028b4:	693b      	ldr	r3, [r7, #16]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	016e3600 	.word	0x016e3600

080028d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000000 	.word	0x20000000

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028ec:	f7ff fff0 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4904      	ldr	r1, [pc, #16]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	08005978 	.word	0x08005978

08002914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002918:	f7ff ffda 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0adb      	lsrs	r3, r3, #11
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4904      	ldr	r1, [pc, #16]	; (800293c <HAL_RCC_GetPCLK2Freq+0x28>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	08005978 	.word	0x08005978

08002940 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	3301      	adds	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d10c      	bne.n	800297e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800296e:	68d2      	ldr	r2, [r2, #12]
 8002970:	0a12      	lsrs	r2, r2, #8
 8002972:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	617b      	str	r3, [r7, #20]
    break;
 800297c:	e00c      	b.n	8002998 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002988:	68d2      	ldr	r2, [r2, #12]
 800298a:	0a12      	lsrs	r2, r2, #8
 800298c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
    break;
 8002996:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	0e5b      	lsrs	r3, r3, #25
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029b2:	687b      	ldr	r3, [r7, #4]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40021000 	.word	0x40021000
 80029c4:	016e3600 	.word	0x016e3600
 80029c8:	00f42400 	.word	0x00f42400

080029cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d4:	2300      	movs	r3, #0
 80029d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d8:	2300      	movs	r3, #0
 80029da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8098 	beq.w	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10d      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	4a3f      	ldr	r2, [pc, #252]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6593      	str	r3, [r2, #88]	; 0x58
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a12:	2301      	movs	r3, #1
 8002a14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a16:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a22:	f7fe fcb1 	bl	8001388 <HAL_GetTick>
 8002a26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a28:	e009      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7fe fcad 	bl	8001388 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d902      	bls.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	74fb      	strb	r3, [r7, #19]
        break;
 8002a3c:	e005      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a3e:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0ef      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d159      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a50:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01e      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d019      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a6c:	4b23      	ldr	r3, [pc, #140]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a78:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a88:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a98:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fc6d 	bl	8001388 <HAL_GetTick>
 8002aae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab0:	e00b      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fc69 	bl	8001388 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d902      	bls.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ac8:	e006      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ec      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	4903      	ldr	r1, [pc, #12]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002af4:	e008      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	74bb      	strb	r3, [r7, #18]
 8002afa:	e005      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b08:	7c7b      	ldrb	r3, [r7, #17]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0e:	4ba7      	ldr	r3, [pc, #668]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	4aa6      	ldr	r2, [pc, #664]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b26:	4ba1      	ldr	r3, [pc, #644]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f023 0203 	bic.w	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	499d      	ldr	r1, [pc, #628]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b48:	4b98      	ldr	r3, [pc, #608]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f023 020c 	bic.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4995      	ldr	r1, [pc, #596]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b6a:	4b90      	ldr	r3, [pc, #576]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	498c      	ldr	r1, [pc, #560]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b8c:	4b87      	ldr	r3, [pc, #540]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	4984      	ldr	r1, [pc, #528]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bae:	4b7f      	ldr	r3, [pc, #508]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	497b      	ldr	r1, [pc, #492]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bd0:	4b76      	ldr	r3, [pc, #472]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	4973      	ldr	r1, [pc, #460]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bf2:	4b6e      	ldr	r3, [pc, #440]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	496a      	ldr	r1, [pc, #424]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c14:	4b65      	ldr	r3, [pc, #404]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4962      	ldr	r1, [pc, #392]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c36:	4b5d      	ldr	r3, [pc, #372]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	4959      	ldr	r1, [pc, #356]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c58:	4b54      	ldr	r3, [pc, #336]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	4951      	ldr	r1, [pc, #324]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c7a:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4948      	ldr	r1, [pc, #288]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d015      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4940      	ldr	r1, [pc, #256]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	4932      	ldr	r1, [pc, #200]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	4924      	ldr	r1, [pc, #144]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d015      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	4916      	ldr	r1, [pc, #88]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d62:	d105      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a10      	ldr	r2, [pc, #64]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d019      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9a:	d109      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a02      	ldr	r2, [pc, #8]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da6:	60d3      	str	r3, [r2, #12]
 8002da8:	e002      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4926      	ldr	r1, [pc, #152]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dda:	d105      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	4918      	ldr	r1, [pc, #96]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d015      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	490a      	ldr	r1, [pc, #40]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e58:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000

08002e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e049      	b.n	8002f0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd ff66 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f000 fd78 	bl	800399c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d001      	beq.n	8002f30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e04c      	b.n	8002fca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <HAL_TIM_Base_Start+0xc0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d022      	beq.n	8002f88 <HAL_TIM_Base_Start+0x70>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4a:	d01d      	beq.n	8002f88 <HAL_TIM_Base_Start+0x70>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_TIM_Base_Start+0xc4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d018      	beq.n	8002f88 <HAL_TIM_Base_Start+0x70>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_TIM_Base_Start+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d013      	beq.n	8002f88 <HAL_TIM_Base_Start+0x70>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <HAL_TIM_Base_Start+0xcc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_TIM_Base_Start+0x70>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_TIM_Base_Start+0xd0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_TIM_Base_Start+0x70>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_TIM_Base_Start+0xd4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_TIM_Base_Start+0x70>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_TIM_Base_Start+0xd8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d115      	bne.n	8002fb4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_TIM_Base_Start+0xdc>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d015      	beq.n	8002fc6 <HAL_TIM_Base_Start+0xae>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d011      	beq.n	8002fc6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	e008      	b.n	8002fc6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e000      	b.n	8002fc8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40000c00 	.word	0x40000c00
 8002fe8:	40013400 	.word	0x40013400
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	40015000 	.word	0x40015000
 8002ff4:	00010007 	.word	0x00010007

08002ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e049      	b.n	800309e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f841 	bl	80030a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fcb0 	bl	800399c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_TIM_PWM_Start+0x24>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e03c      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d109      	bne.n	80030fa <HAL_TIM_PWM_Start+0x3e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e02f      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d109      	bne.n	8003114 <HAL_TIM_PWM_Start+0x58>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e022      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d109      	bne.n	800312e <HAL_TIM_PWM_Start+0x72>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e015      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b10      	cmp	r3, #16
 8003132:	d109      	bne.n	8003148 <HAL_TIM_PWM_Start+0x8c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e008      	b.n	800315a <HAL_TIM_PWM_Start+0x9e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0a6      	b.n	80032b0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xb6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003170:	e023      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start+0xc6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003180:	e01b      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start+0xd6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003190:	e013      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_PWM_Start+0xe6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a0:	e00b      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d104      	bne.n	80031b2 <HAL_TIM_PWM_Start+0xf6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	e003      	b.n	80031ba <HAL_TIM_PWM_Start+0xfe>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	6839      	ldr	r1, [r7, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f864 	bl	8004290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3a      	ldr	r2, [pc, #232]	; (80032b8 <HAL_TIM_PWM_Start+0x1fc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_TIM_PWM_Start+0x148>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a39      	ldr	r2, [pc, #228]	; (80032bc <HAL_TIM_PWM_Start+0x200>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_TIM_PWM_Start+0x148>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a37      	ldr	r2, [pc, #220]	; (80032c0 <HAL_TIM_PWM_Start+0x204>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_TIM_PWM_Start+0x148>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a36      	ldr	r2, [pc, #216]	; (80032c4 <HAL_TIM_PWM_Start+0x208>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_TIM_PWM_Start+0x148>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <HAL_TIM_PWM_Start+0x20c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_TIM_PWM_Start+0x148>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a33      	ldr	r2, [pc, #204]	; (80032cc <HAL_TIM_PWM_Start+0x210>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_TIM_PWM_Start+0x14c>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <HAL_TIM_PWM_Start+0x14e>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <HAL_TIM_PWM_Start+0x1fc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_TIM_PWM_Start+0x1b2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d01d      	beq.n	800326e <HAL_TIM_PWM_Start+0x1b2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <HAL_TIM_PWM_Start+0x214>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_TIM_PWM_Start+0x1b2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <HAL_TIM_PWM_Start+0x218>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_TIM_PWM_Start+0x1b2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a23      	ldr	r2, [pc, #140]	; (80032d8 <HAL_TIM_PWM_Start+0x21c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_TIM_PWM_Start+0x1b2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_TIM_PWM_Start+0x200>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_TIM_PWM_Start+0x1b2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <HAL_TIM_PWM_Start+0x204>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIM_PWM_Start+0x1b2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a18      	ldr	r2, [pc, #96]	; (80032cc <HAL_TIM_PWM_Start+0x210>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d115      	bne.n	800329a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_TIM_PWM_Start+0x220>)
 8003276:	4013      	ands	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b06      	cmp	r3, #6
 800327e:	d015      	beq.n	80032ac <HAL_TIM_PWM_Start+0x1f0>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003286:	d011      	beq.n	80032ac <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003298:	e008      	b.n	80032ac <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e000      	b.n	80032ae <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40013400 	.word	0x40013400
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800
 80032cc:	40015000 	.word	0x40015000
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800
 80032d8:	40000c00 	.word	0x40000c00
 80032dc:	00010007 	.word	0x00010007

080032e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e097      	b.n	8003424 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd fdaf 	bl	8000e6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003324:	f023 0307 	bic.w	r3, r3, #7
 8003328:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f000 fb31 	bl	800399c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	4313      	orrs	r3, r2
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003380:	f023 030c 	bic.w	r3, r3, #12
 8003384:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800338c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	4313      	orrs	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	011a      	lsls	r2, r3, #4
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	031b      	lsls	r3, r3, #12
 80033b0:	4313      	orrs	r3, r2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4313      	orrs	r3, r2
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800343c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003444:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800344c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003454:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d110      	bne.n	800347e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003462:	7b7b      	ldrb	r3, [r7, #13]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d001      	beq.n	800346c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e069      	b.n	8003540 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800347c:	e031      	b.n	80034e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d110      	bne.n	80034a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003484:	7bbb      	ldrb	r3, [r7, #14]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800348a:	7b3b      	ldrb	r3, [r7, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d001      	beq.n	8003494 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e055      	b.n	8003540 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034a4:	e01d      	b.n	80034e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d108      	bne.n	80034be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ac:	7bbb      	ldrb	r3, [r7, #14]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d105      	bne.n	80034be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034b2:	7b7b      	ldrb	r3, [r7, #13]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d102      	bne.n	80034be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034b8:	7b3b      	ldrb	r3, [r7, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e03e      	b.n	8003540 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_TIM_Encoder_Start+0xc4>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d008      	beq.n	8003500 <HAL_TIM_Encoder_Start+0xd4>
 80034ee:	e00f      	b.n	8003510 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fec9 	bl	8004290 <TIM_CCxChannelCmd>
      break;
 80034fe:	e016      	b.n	800352e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	2104      	movs	r1, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fec1 	bl	8004290 <TIM_CCxChannelCmd>
      break;
 800350e:	e00e      	b.n	800352e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2201      	movs	r2, #1
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f000 feb9 	bl	8004290 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2201      	movs	r2, #1
 8003524:	2104      	movs	r1, #4
 8003526:	4618      	mov	r0, r3
 8003528:	f000 feb2 	bl	8004290 <TIM_CCxChannelCmd>
      break;
 800352c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003562:	2302      	movs	r3, #2
 8003564:	e0ff      	b.n	8003766 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b14      	cmp	r3, #20
 8003572:	f200 80f0 	bhi.w	8003756 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035d1 	.word	0x080035d1
 8003580:	08003757 	.word	0x08003757
 8003584:	08003757 	.word	0x08003757
 8003588:	08003757 	.word	0x08003757
 800358c:	08003611 	.word	0x08003611
 8003590:	08003757 	.word	0x08003757
 8003594:	08003757 	.word	0x08003757
 8003598:	08003757 	.word	0x08003757
 800359c:	08003653 	.word	0x08003653
 80035a0:	08003757 	.word	0x08003757
 80035a4:	08003757 	.word	0x08003757
 80035a8:	08003757 	.word	0x08003757
 80035ac:	08003693 	.word	0x08003693
 80035b0:	08003757 	.word	0x08003757
 80035b4:	08003757 	.word	0x08003757
 80035b8:	08003757 	.word	0x08003757
 80035bc:	080036d5 	.word	0x080036d5
 80035c0:	08003757 	.word	0x08003757
 80035c4:	08003757 	.word	0x08003757
 80035c8:	08003757 	.word	0x08003757
 80035cc:	08003715 	.word	0x08003715
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fa94 	bl	8003b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0208 	orr.w	r2, r2, #8
 80035ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0204 	bic.w	r2, r2, #4
 80035fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6999      	ldr	r1, [r3, #24]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	619a      	str	r2, [r3, #24]
      break;
 800360e:	e0a5      	b.n	800375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fb0e 	bl	8003c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800362a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6999      	ldr	r1, [r3, #24]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	021a      	lsls	r2, r3, #8
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	619a      	str	r2, [r3, #24]
      break;
 8003650:	e084      	b.n	800375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fb81 	bl	8003d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0208 	orr.w	r2, r2, #8
 800366c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0204 	bic.w	r2, r2, #4
 800367c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69d9      	ldr	r1, [r3, #28]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	61da      	str	r2, [r3, #28]
      break;
 8003690:	e064      	b.n	800375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fbf3 	bl	8003e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69d9      	ldr	r1, [r3, #28]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	021a      	lsls	r2, r3, #8
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	61da      	str	r2, [r3, #28]
      break;
 80036d2:	e043      	b.n	800375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fc66 	bl	8003fac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0208 	orr.w	r2, r2, #8
 80036ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0204 	bic.w	r2, r2, #4
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003712:	e023      	b.n	800375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fcb0 	bl	8004080 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	021a      	lsls	r2, r3, #8
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003754:	e002      	b.n	800375c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
      break;
 800375a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003764:	7dfb      	ldrb	r3, [r7, #23]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop

08003770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_TIM_ConfigClockSource+0x1c>
 8003788:	2302      	movs	r3, #2
 800378a:	e0f6      	b.n	800397a <HAL_TIM_ConfigClockSource+0x20a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80037aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a6f      	ldr	r2, [pc, #444]	; (8003984 <HAL_TIM_ConfigClockSource+0x214>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	f000 80c1 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1de>
 80037cc:	4a6d      	ldr	r2, [pc, #436]	; (8003984 <HAL_TIM_ConfigClockSource+0x214>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f200 80c6 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 80037d4:	4a6c      	ldr	r2, [pc, #432]	; (8003988 <HAL_TIM_ConfigClockSource+0x218>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f000 80b9 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1de>
 80037dc:	4a6a      	ldr	r2, [pc, #424]	; (8003988 <HAL_TIM_ConfigClockSource+0x218>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	f200 80be 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e4:	4a69      	ldr	r2, [pc, #420]	; (800398c <HAL_TIM_ConfigClockSource+0x21c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	f000 80b1 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1de>
 80037ec:	4a67      	ldr	r2, [pc, #412]	; (800398c <HAL_TIM_ConfigClockSource+0x21c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f200 80b6 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f4:	4a66      	ldr	r2, [pc, #408]	; (8003990 <HAL_TIM_ConfigClockSource+0x220>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f000 80a9 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1de>
 80037fc:	4a64      	ldr	r2, [pc, #400]	; (8003990 <HAL_TIM_ConfigClockSource+0x220>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	f200 80ae 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003804:	4a63      	ldr	r2, [pc, #396]	; (8003994 <HAL_TIM_ConfigClockSource+0x224>)
 8003806:	4293      	cmp	r3, r2
 8003808:	f000 80a1 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1de>
 800380c:	4a61      	ldr	r2, [pc, #388]	; (8003994 <HAL_TIM_ConfigClockSource+0x224>)
 800380e:	4293      	cmp	r3, r2
 8003810:	f200 80a6 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003814:	4a60      	ldr	r2, [pc, #384]	; (8003998 <HAL_TIM_ConfigClockSource+0x228>)
 8003816:	4293      	cmp	r3, r2
 8003818:	f000 8099 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1de>
 800381c:	4a5e      	ldr	r2, [pc, #376]	; (8003998 <HAL_TIM_ConfigClockSource+0x228>)
 800381e:	4293      	cmp	r3, r2
 8003820:	f200 809e 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003824:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003828:	f000 8091 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1de>
 800382c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003830:	f200 8096 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003838:	f000 8089 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1de>
 800383c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003840:	f200 808e 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003848:	d03e      	beq.n	80038c8 <HAL_TIM_ConfigClockSource+0x158>
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384e:	f200 8087 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003856:	f000 8086 	beq.w	8003966 <HAL_TIM_ConfigClockSource+0x1f6>
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385e:	d87f      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003860:	2b70      	cmp	r3, #112	; 0x70
 8003862:	d01a      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x12a>
 8003864:	2b70      	cmp	r3, #112	; 0x70
 8003866:	d87b      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003868:	2b60      	cmp	r3, #96	; 0x60
 800386a:	d050      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x19e>
 800386c:	2b60      	cmp	r3, #96	; 0x60
 800386e:	d877      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003870:	2b50      	cmp	r3, #80	; 0x50
 8003872:	d03c      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x17e>
 8003874:	2b50      	cmp	r3, #80	; 0x50
 8003876:	d873      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d058      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x1be>
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d86f      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003880:	2b30      	cmp	r3, #48	; 0x30
 8003882:	d064      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x1de>
 8003884:	2b30      	cmp	r3, #48	; 0x30
 8003886:	d86b      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d060      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x1de>
 800388c:	2b20      	cmp	r3, #32
 800388e:	d867      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d05c      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x1de>
 8003894:	2b10      	cmp	r3, #16
 8003896:	d05a      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x1de>
 8003898:	e062      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038aa:	f000 fcd1 	bl	8004250 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	609a      	str	r2, [r3, #8]
      break;
 80038c6:	e04f      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038d8:	f000 fcba 	bl	8004250 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ea:	609a      	str	r2, [r3, #8]
      break;
 80038ec:	e03c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 fc2c 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2150      	movs	r1, #80	; 0x50
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fc85 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 800390c:	e02c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800391a:	461a      	mov	r2, r3
 800391c:	f000 fc4b 	bl	80041b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2160      	movs	r1, #96	; 0x60
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fc75 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 800392c:	e01c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	461a      	mov	r2, r3
 800393c:	f000 fc0c 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fc65 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 800394c:	e00c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f000 fc5c 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 800395e:	e003      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      break;
 8003964:	e000      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	00100070 	.word	0x00100070
 8003988:	00100060 	.word	0x00100060
 800398c:	00100050 	.word	0x00100050
 8003990:	00100040 	.word	0x00100040
 8003994:	00100030 	.word	0x00100030
 8003998:	00100020 	.word	0x00100020

0800399c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a4c      	ldr	r2, [pc, #304]	; (8003ae0 <TIM_Base_SetConfig+0x144>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d017      	beq.n	80039e4 <TIM_Base_SetConfig+0x48>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ba:	d013      	beq.n	80039e4 <TIM_Base_SetConfig+0x48>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a49      	ldr	r2, [pc, #292]	; (8003ae4 <TIM_Base_SetConfig+0x148>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00f      	beq.n	80039e4 <TIM_Base_SetConfig+0x48>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a48      	ldr	r2, [pc, #288]	; (8003ae8 <TIM_Base_SetConfig+0x14c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_Base_SetConfig+0x48>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a47      	ldr	r2, [pc, #284]	; (8003aec <TIM_Base_SetConfig+0x150>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_Base_SetConfig+0x48>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a46      	ldr	r2, [pc, #280]	; (8003af0 <TIM_Base_SetConfig+0x154>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_Base_SetConfig+0x48>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a45      	ldr	r2, [pc, #276]	; (8003af4 <TIM_Base_SetConfig+0x158>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d108      	bne.n	80039f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a39      	ldr	r2, [pc, #228]	; (8003ae0 <TIM_Base_SetConfig+0x144>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d023      	beq.n	8003a46 <TIM_Base_SetConfig+0xaa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d01f      	beq.n	8003a46 <TIM_Base_SetConfig+0xaa>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a36      	ldr	r2, [pc, #216]	; (8003ae4 <TIM_Base_SetConfig+0x148>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01b      	beq.n	8003a46 <TIM_Base_SetConfig+0xaa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a35      	ldr	r2, [pc, #212]	; (8003ae8 <TIM_Base_SetConfig+0x14c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d017      	beq.n	8003a46 <TIM_Base_SetConfig+0xaa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <TIM_Base_SetConfig+0x150>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <TIM_Base_SetConfig+0xaa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a33      	ldr	r2, [pc, #204]	; (8003af0 <TIM_Base_SetConfig+0x154>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00f      	beq.n	8003a46 <TIM_Base_SetConfig+0xaa>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a33      	ldr	r2, [pc, #204]	; (8003af8 <TIM_Base_SetConfig+0x15c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_Base_SetConfig+0xaa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a32      	ldr	r2, [pc, #200]	; (8003afc <TIM_Base_SetConfig+0x160>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <TIM_Base_SetConfig+0xaa>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <TIM_Base_SetConfig+0x164>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0xaa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <TIM_Base_SetConfig+0x158>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <TIM_Base_SetConfig+0x144>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <TIM_Base_SetConfig+0x110>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <TIM_Base_SetConfig+0x154>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00f      	beq.n	8003aac <TIM_Base_SetConfig+0x110>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a1a      	ldr	r2, [pc, #104]	; (8003af8 <TIM_Base_SetConfig+0x15c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00b      	beq.n	8003aac <TIM_Base_SetConfig+0x110>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a19      	ldr	r2, [pc, #100]	; (8003afc <TIM_Base_SetConfig+0x160>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <TIM_Base_SetConfig+0x110>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <TIM_Base_SetConfig+0x164>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_Base_SetConfig+0x110>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <TIM_Base_SetConfig+0x158>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d103      	bne.n	8003ab4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f023 0201 	bic.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40013400 	.word	0x40013400
 8003af4:	40015000 	.word	0x40015000
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014400 	.word	0x40014400
 8003b00:	40014800 	.word	0x40014800

08003b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f023 0201 	bic.w	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f023 0302 	bic.w	r3, r3, #2
 8003b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a30      	ldr	r2, [pc, #192]	; (8003c20 <TIM_OC1_SetConfig+0x11c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <TIM_OC1_SetConfig+0x88>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <TIM_OC1_SetConfig+0x120>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00f      	beq.n	8003b8c <TIM_OC1_SetConfig+0x88>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a2e      	ldr	r2, [pc, #184]	; (8003c28 <TIM_OC1_SetConfig+0x124>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_OC1_SetConfig+0x88>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a2d      	ldr	r2, [pc, #180]	; (8003c2c <TIM_OC1_SetConfig+0x128>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_OC1_SetConfig+0x88>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a2c      	ldr	r2, [pc, #176]	; (8003c30 <TIM_OC1_SetConfig+0x12c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_OC1_SetConfig+0x88>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a2b      	ldr	r2, [pc, #172]	; (8003c34 <TIM_OC1_SetConfig+0x130>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d10c      	bne.n	8003ba6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0308 	bic.w	r3, r3, #8
 8003b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <TIM_OC1_SetConfig+0x11c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <TIM_OC1_SetConfig+0xd2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <TIM_OC1_SetConfig+0x120>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00f      	beq.n	8003bd6 <TIM_OC1_SetConfig+0xd2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <TIM_OC1_SetConfig+0x124>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00b      	beq.n	8003bd6 <TIM_OC1_SetConfig+0xd2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	; (8003c2c <TIM_OC1_SetConfig+0x128>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d007      	beq.n	8003bd6 <TIM_OC1_SetConfig+0xd2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <TIM_OC1_SetConfig+0x12c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_OC1_SetConfig+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <TIM_OC1_SetConfig+0x130>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d111      	bne.n	8003bfa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	621a      	str	r2, [r3, #32]
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40013400 	.word	0x40013400
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800
 8003c34:	40015000 	.word	0x40015000

08003c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f023 0210 	bic.w	r2, r3, #16
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0320 	bic.w	r3, r3, #32
 8003c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <TIM_OC2_SetConfig+0x110>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_OC2_SetConfig+0x74>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a2b      	ldr	r2, [pc, #172]	; (8003d4c <TIM_OC2_SetConfig+0x114>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_OC2_SetConfig+0x74>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a2a      	ldr	r2, [pc, #168]	; (8003d50 <TIM_OC2_SetConfig+0x118>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a1f      	ldr	r2, [pc, #124]	; (8003d48 <TIM_OC2_SetConfig+0x110>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <TIM_OC2_SetConfig+0xc0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <TIM_OC2_SetConfig+0x114>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00f      	beq.n	8003cf8 <TIM_OC2_SetConfig+0xc0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <TIM_OC2_SetConfig+0x11c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00b      	beq.n	8003cf8 <TIM_OC2_SetConfig+0xc0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <TIM_OC2_SetConfig+0x120>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <TIM_OC2_SetConfig+0xc0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <TIM_OC2_SetConfig+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_OC2_SetConfig+0xc0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <TIM_OC2_SetConfig+0x118>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d113      	bne.n	8003d20 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40013400 	.word	0x40013400
 8003d50:	40015000 	.word	0x40015000
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800

08003d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <TIM_OC3_SetConfig+0x10c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x72>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <TIM_OC3_SetConfig+0x110>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x72>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <TIM_OC3_SetConfig+0x114>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <TIM_OC3_SetConfig+0x10c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <TIM_OC3_SetConfig+0xbe>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <TIM_OC3_SetConfig+0x110>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00f      	beq.n	8003e1e <TIM_OC3_SetConfig+0xbe>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <TIM_OC3_SetConfig+0x118>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <TIM_OC3_SetConfig+0xbe>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <TIM_OC3_SetConfig+0x11c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_OC3_SetConfig+0xbe>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <TIM_OC3_SetConfig+0x120>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_OC3_SetConfig+0xbe>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <TIM_OC3_SetConfig+0x114>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d113      	bne.n	8003e46 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	621a      	str	r2, [r3, #32]
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40015000 	.word	0x40015000
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	031b      	lsls	r3, r3, #12
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <TIM_OC4_SetConfig+0x110>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_OC4_SetConfig+0x74>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <TIM_OC4_SetConfig+0x114>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_OC4_SetConfig+0x74>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a2a      	ldr	r2, [pc, #168]	; (8003f9c <TIM_OC4_SetConfig+0x118>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10d      	bne.n	8003f14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	031b      	lsls	r3, r3, #12
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <TIM_OC4_SetConfig+0x110>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <TIM_OC4_SetConfig+0xc0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <TIM_OC4_SetConfig+0x114>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00f      	beq.n	8003f44 <TIM_OC4_SetConfig+0xc0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <TIM_OC4_SetConfig+0x11c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <TIM_OC4_SetConfig+0xc0>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <TIM_OC4_SetConfig+0x120>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <TIM_OC4_SetConfig+0xc0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <TIM_OC4_SetConfig+0x124>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_OC4_SetConfig+0xc0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <TIM_OC4_SetConfig+0x118>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d113      	bne.n	8003f6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	019b      	lsls	r3, r3, #6
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40013400 	.word	0x40013400
 8003f9c:	40015000 	.word	0x40015000
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800

08003fac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a19      	ldr	r2, [pc, #100]	; (8004068 <TIM_OC5_SetConfig+0xbc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <TIM_OC5_SetConfig+0x82>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a18      	ldr	r2, [pc, #96]	; (800406c <TIM_OC5_SetConfig+0xc0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_OC5_SetConfig+0x82>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <TIM_OC5_SetConfig+0xc4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_OC5_SetConfig+0x82>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <TIM_OC5_SetConfig+0xc8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_OC5_SetConfig+0x82>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <TIM_OC5_SetConfig+0xcc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_OC5_SetConfig+0x82>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <TIM_OC5_SetConfig+0xd0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d109      	bne.n	8004042 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40013400 	.word	0x40013400
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800
 800407c:	40015000 	.word	0x40015000

08004080 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	051b      	lsls	r3, r3, #20
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <TIM_OC6_SetConfig+0xc0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <TIM_OC6_SetConfig+0x84>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a19      	ldr	r2, [pc, #100]	; (8004144 <TIM_OC6_SetConfig+0xc4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00f      	beq.n	8004104 <TIM_OC6_SetConfig+0x84>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a18      	ldr	r2, [pc, #96]	; (8004148 <TIM_OC6_SetConfig+0xc8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_OC6_SetConfig+0x84>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a17      	ldr	r2, [pc, #92]	; (800414c <TIM_OC6_SetConfig+0xcc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_OC6_SetConfig+0x84>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a16      	ldr	r2, [pc, #88]	; (8004150 <TIM_OC6_SetConfig+0xd0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC6_SetConfig+0x84>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a15      	ldr	r2, [pc, #84]	; (8004154 <TIM_OC6_SetConfig+0xd4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d109      	bne.n	8004118 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	029b      	lsls	r3, r3, #10
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40013400 	.word	0x40013400
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800
 8004154:	40015000 	.word	0x40015000

08004158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0201 	bic.w	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 030a 	bic.w	r3, r3, #10
 8004194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f023 0210 	bic.w	r2, r3, #16
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	031b      	lsls	r3, r3, #12
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800422c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	f043 0307 	orr.w	r3, r3, #7
 800423c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800426a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	021a      	lsls	r2, r3, #8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	431a      	orrs	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4313      	orrs	r3, r2
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2201      	movs	r2, #1
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	401a      	ands	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a1a      	ldr	r2, [r3, #32]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e074      	b.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a34      	ldr	r2, [pc, #208]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a33      	ldr	r2, [pc, #204]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a31      	ldr	r2, [pc, #196]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d108      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004338:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a21      	ldr	r2, [pc, #132]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d01d      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d018      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d10c      	bne.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40013400 	.word	0x40013400
 80043f4:	40015000 	.word	0x40015000
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40014000 	.word	0x40014000

08004408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004420:	2302      	movs	r3, #2
 8004422:	e078      	b.n	8004516 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d11c      	bne.n	8004504 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	051b      	lsls	r3, r3, #20
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40013400 	.word	0x40013400
 800452c:	40015000 	.word	0x40015000

08004530 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8004530:	b480      	push	{r7}
 8004532:	b08b      	sub	sp, #44	; 0x2c
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIMEx_ConfigBreakInput+0x20>
 800454c:	2302      	movs	r3, #2
 800454e:	e10b      	b.n	8004768 <HAL_TIMEx_ConfigBreakInput+0x238>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	f000 8096 	beq.w	800468e <HAL_TIMEx_ConfigBreakInput+0x15e>
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	f200 809c 	bhi.w	80046a0 <HAL_TIMEx_ConfigBreakInput+0x170>
 8004568:	2b20      	cmp	r3, #32
 800456a:	d849      	bhi.n	8004600 <HAL_TIMEx_ConfigBreakInput+0xd0>
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8097 	beq.w	80046a0 <HAL_TIMEx_ConfigBreakInput+0x170>
 8004572:	3b01      	subs	r3, #1
 8004574:	2b1f      	cmp	r3, #31
 8004576:	f200 8093 	bhi.w	80046a0 <HAL_TIMEx_ConfigBreakInput+0x170>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <HAL_TIMEx_ConfigBreakInput+0x50>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	08004607 	.word	0x08004607
 8004584:	0800461b 	.word	0x0800461b
 8004588:	080046a1 	.word	0x080046a1
 800458c:	0800462f 	.word	0x0800462f
 8004590:	080046a1 	.word	0x080046a1
 8004594:	080046a1 	.word	0x080046a1
 8004598:	080046a1 	.word	0x080046a1
 800459c:	08004643 	.word	0x08004643
 80045a0:	080046a1 	.word	0x080046a1
 80045a4:	080046a1 	.word	0x080046a1
 80045a8:	080046a1 	.word	0x080046a1
 80045ac:	080046a1 	.word	0x080046a1
 80045b0:	080046a1 	.word	0x080046a1
 80045b4:	080046a1 	.word	0x080046a1
 80045b8:	080046a1 	.word	0x080046a1
 80045bc:	08004657 	.word	0x08004657
 80045c0:	080046a1 	.word	0x080046a1
 80045c4:	080046a1 	.word	0x080046a1
 80045c8:	080046a1 	.word	0x080046a1
 80045cc:	080046a1 	.word	0x080046a1
 80045d0:	080046a1 	.word	0x080046a1
 80045d4:	080046a1 	.word	0x080046a1
 80045d8:	080046a1 	.word	0x080046a1
 80045dc:	080046a1 	.word	0x080046a1
 80045e0:	080046a1 	.word	0x080046a1
 80045e4:	080046a1 	.word	0x080046a1
 80045e8:	080046a1 	.word	0x080046a1
 80045ec:	080046a1 	.word	0x080046a1
 80045f0:	080046a1 	.word	0x080046a1
 80045f4:	080046a1 	.word	0x080046a1
 80045f8:	080046a1 	.word	0x080046a1
 80045fc:	0800466b 	.word	0x0800466b
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d03b      	beq.n	800467c <HAL_TIMEx_ConfigBreakInput+0x14c>
 8004604:	e04c      	b.n	80046a0 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8004606:	2301      	movs	r3, #1
 8004608:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800460a:	2300      	movs	r3, #0
 800460c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800460e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004612:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8004614:	2309      	movs	r3, #9
 8004616:	617b      	str	r3, [r7, #20]
      break;
 8004618:	e04b      	b.n	80046b2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800461a:	2302      	movs	r3, #2
 800461c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800461e:	2301      	movs	r3, #1
 8004620:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8004622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004626:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8004628:	230a      	movs	r3, #10
 800462a:	617b      	str	r3, [r7, #20]
      break;
 800462c:	e041      	b.n	80046b2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800462e:	2304      	movs	r3, #4
 8004630:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8004632:	2302      	movs	r3, #2
 8004634:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8004636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800463a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800463c:	230b      	movs	r3, #11
 800463e:	617b      	str	r3, [r7, #20]
      break;
 8004640:	e037      	b.n	80046b2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8004642:	2308      	movs	r3, #8
 8004644:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8004646:	2303      	movs	r3, #3
 8004648:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800464a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800464e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8004650:	230c      	movs	r3, #12
 8004652:	617b      	str	r3, [r7, #20]
      break;
 8004654:	e02d      	b.n	80046b2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8004656:	2310      	movs	r3, #16
 8004658:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800465a:	2304      	movs	r3, #4
 800465c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800465e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004662:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8004664:	230d      	movs	r3, #13
 8004666:	617b      	str	r3, [r7, #20]
      break;
 8004668:	e023      	b.n	80046b2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 800466a:	2320      	movs	r3, #32
 800466c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 800466e:	2305      	movs	r3, #5
 8004670:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
      break;
 800467a:	e01a      	b.n	80046b2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8004680:	2306      	movs	r3, #6
 8004682:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
      break;
 800468c:	e011      	b.n	80046b2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8004692:	2307      	movs	r3, #7
 8004694:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
      break;
 800469e:	e008      	b.n	80046b2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
      break;
 80046b0:	bf00      	nop
    }
  }

  switch (BreakInput)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d003      	beq.n	80046c0 <HAL_TIMEx_ConfigBreakInput+0x190>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d025      	beq.n	800470a <HAL_TIMEx_ConfigBreakInput+0x1da>
 80046be:	e049      	b.n	8004754 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	409a      	lsls	r2, r3
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	4013      	ands	r3, r2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	409a      	lsls	r2, r3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4013      	ands	r3, r2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8004708:	e028      	b.n	800475c <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004710:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	409a      	lsls	r2, r3
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	4013      	ands	r3, r2
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	43db      	mvns	r3, r3
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4013      	ands	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	409a      	lsls	r2, r3
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	4013      	ands	r3, r2
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8004752:	e003      	b.n	800475c <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800475a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004768:	4618      	mov	r0, r3
 800476a:	372c      	adds	r7, #44	; 0x2c
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e042      	b.n	800480c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fc fc03 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2224      	movs	r2, #36	; 0x24
 80047a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fb9a 	bl	8004ef8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f89b 	bl	8004900 <UART_SetConfig>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e01b      	b.n	800480c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fc19 	bl	800503c <UART_CheckIdleState>
 800480a:	4603      	mov	r3, r0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004828:	2b20      	cmp	r3, #32
 800482a:	d137      	bne.n	800489c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_UART_Receive_DMA+0x24>
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e030      	b.n	800489e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_UART_Receive_DMA+0x94>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d01f      	beq.n	800488c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d018      	beq.n	800488c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	613b      	str	r3, [r7, #16]
   return(result);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	69f9      	ldr	r1, [r7, #28]
 800487e:	6a3a      	ldr	r2, [r7, #32]
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	61bb      	str	r3, [r7, #24]
   return(result);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e6      	bne.n	800485a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	461a      	mov	r2, r3
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fcea 	bl	800526c <UART_Start_Receive_DMA>
 8004898:	4603      	mov	r3, r0
 800489a:	e000      	b.n	800489e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3728      	adds	r7, #40	; 0x28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40008000 	.word	0x40008000

080048ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004904:	b08c      	sub	sp, #48	; 0x30
 8004906:	af00      	add	r7, sp, #0
 8004908:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	431a      	orrs	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	431a      	orrs	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	4313      	orrs	r3, r2
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4baa      	ldr	r3, [pc, #680]	; (8004bd8 <UART_SetConfig+0x2d8>)
 8004930:	4013      	ands	r3, r2
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004938:	430b      	orrs	r3, r1
 800493a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a9f      	ldr	r2, [pc, #636]	; (8004bdc <UART_SetConfig+0x2dc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004968:	4313      	orrs	r3, r2
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004976:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004980:	430b      	orrs	r3, r1
 8004982:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	f023 010f 	bic.w	r1, r3, #15
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a90      	ldr	r2, [pc, #576]	; (8004be0 <UART_SetConfig+0x2e0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d125      	bne.n	80049f0 <UART_SetConfig+0xf0>
 80049a4:	4b8f      	ldr	r3, [pc, #572]	; (8004be4 <UART_SetConfig+0x2e4>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d81a      	bhi.n	80049e8 <UART_SetConfig+0xe8>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0xb8>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049c9 	.word	0x080049c9
 80049bc:	080049d9 	.word	0x080049d9
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049e1 	.word	0x080049e1
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ce:	e116      	b.n	8004bfe <UART_SetConfig+0x2fe>
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d6:	e112      	b.n	8004bfe <UART_SetConfig+0x2fe>
 80049d8:	2304      	movs	r3, #4
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049de:	e10e      	b.n	8004bfe <UART_SetConfig+0x2fe>
 80049e0:	2308      	movs	r3, #8
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e6:	e10a      	b.n	8004bfe <UART_SetConfig+0x2fe>
 80049e8:	2310      	movs	r3, #16
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ee:	e106      	b.n	8004bfe <UART_SetConfig+0x2fe>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7c      	ldr	r2, [pc, #496]	; (8004be8 <UART_SetConfig+0x2e8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d138      	bne.n	8004a6c <UART_SetConfig+0x16c>
 80049fa:	4b7a      	ldr	r3, [pc, #488]	; (8004be4 <UART_SetConfig+0x2e4>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b0c      	cmp	r3, #12
 8004a06:	d82d      	bhi.n	8004a64 <UART_SetConfig+0x164>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <UART_SetConfig+0x110>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a45 	.word	0x08004a45
 8004a14:	08004a65 	.word	0x08004a65
 8004a18:	08004a65 	.word	0x08004a65
 8004a1c:	08004a65 	.word	0x08004a65
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004a65 	.word	0x08004a65
 8004a28:	08004a65 	.word	0x08004a65
 8004a2c:	08004a65 	.word	0x08004a65
 8004a30:	08004a4d 	.word	0x08004a4d
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a65 	.word	0x08004a65
 8004a3c:	08004a65 	.word	0x08004a65
 8004a40:	08004a5d 	.word	0x08004a5d
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	e0d8      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a52:	e0d4      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004a54:	2304      	movs	r3, #4
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5a:	e0d0      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a62:	e0cc      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004a64:	2310      	movs	r3, #16
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6a:	e0c8      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a5e      	ldr	r2, [pc, #376]	; (8004bec <UART_SetConfig+0x2ec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d125      	bne.n	8004ac2 <UART_SetConfig+0x1c2>
 8004a76:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <UART_SetConfig+0x2e4>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a80:	2b30      	cmp	r3, #48	; 0x30
 8004a82:	d016      	beq.n	8004ab2 <UART_SetConfig+0x1b2>
 8004a84:	2b30      	cmp	r3, #48	; 0x30
 8004a86:	d818      	bhi.n	8004aba <UART_SetConfig+0x1ba>
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d00a      	beq.n	8004aa2 <UART_SetConfig+0x1a2>
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d814      	bhi.n	8004aba <UART_SetConfig+0x1ba>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <UART_SetConfig+0x19a>
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d008      	beq.n	8004aaa <UART_SetConfig+0x1aa>
 8004a98:	e00f      	b.n	8004aba <UART_SetConfig+0x1ba>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa0:	e0ad      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa8:	e0a9      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004aaa:	2304      	movs	r3, #4
 8004aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab0:	e0a5      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab8:	e0a1      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004aba:	2310      	movs	r3, #16
 8004abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ac0:	e09d      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a4a      	ldr	r2, [pc, #296]	; (8004bf0 <UART_SetConfig+0x2f0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d125      	bne.n	8004b18 <UART_SetConfig+0x218>
 8004acc:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <UART_SetConfig+0x2e4>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad8:	d016      	beq.n	8004b08 <UART_SetConfig+0x208>
 8004ada:	2bc0      	cmp	r3, #192	; 0xc0
 8004adc:	d818      	bhi.n	8004b10 <UART_SetConfig+0x210>
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d00a      	beq.n	8004af8 <UART_SetConfig+0x1f8>
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d814      	bhi.n	8004b10 <UART_SetConfig+0x210>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <UART_SetConfig+0x1f0>
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d008      	beq.n	8004b00 <UART_SetConfig+0x200>
 8004aee:	e00f      	b.n	8004b10 <UART_SetConfig+0x210>
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af6:	e082      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004af8:	2302      	movs	r3, #2
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afe:	e07e      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b06:	e07a      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b0e:	e076      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b16:	e072      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a35      	ldr	r2, [pc, #212]	; (8004bf4 <UART_SetConfig+0x2f4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d12a      	bne.n	8004b78 <UART_SetConfig+0x278>
 8004b22:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <UART_SetConfig+0x2e4>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b30:	d01a      	beq.n	8004b68 <UART_SetConfig+0x268>
 8004b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b36:	d81b      	bhi.n	8004b70 <UART_SetConfig+0x270>
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3c:	d00c      	beq.n	8004b58 <UART_SetConfig+0x258>
 8004b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b42:	d815      	bhi.n	8004b70 <UART_SetConfig+0x270>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <UART_SetConfig+0x250>
 8004b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4c:	d008      	beq.n	8004b60 <UART_SetConfig+0x260>
 8004b4e:	e00f      	b.n	8004b70 <UART_SetConfig+0x270>
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e052      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5e:	e04e      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004b60:	2304      	movs	r3, #4
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b66:	e04a      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004b68:	2308      	movs	r3, #8
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6e:	e046      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004b70:	2310      	movs	r3, #16
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b76:	e042      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <UART_SetConfig+0x2dc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d13a      	bne.n	8004bf8 <UART_SetConfig+0x2f8>
 8004b82:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <UART_SetConfig+0x2e4>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b90:	d01a      	beq.n	8004bc8 <UART_SetConfig+0x2c8>
 8004b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b96:	d81b      	bhi.n	8004bd0 <UART_SetConfig+0x2d0>
 8004b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9c:	d00c      	beq.n	8004bb8 <UART_SetConfig+0x2b8>
 8004b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba2:	d815      	bhi.n	8004bd0 <UART_SetConfig+0x2d0>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <UART_SetConfig+0x2b0>
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bac:	d008      	beq.n	8004bc0 <UART_SetConfig+0x2c0>
 8004bae:	e00f      	b.n	8004bd0 <UART_SetConfig+0x2d0>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb6:	e022      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bbe:	e01e      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc6:	e01a      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bce:	e016      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	e012      	b.n	8004bfe <UART_SetConfig+0x2fe>
 8004bd8:	cfff69f3 	.word	0xcfff69f3
 8004bdc:	40008000 	.word	0x40008000
 8004be0:	40013800 	.word	0x40013800
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40004400 	.word	0x40004400
 8004bec:	40004800 	.word	0x40004800
 8004bf0:	40004c00 	.word	0x40004c00
 8004bf4:	40005000 	.word	0x40005000
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4aae      	ldr	r2, [pc, #696]	; (8004ebc <UART_SetConfig+0x5bc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	f040 8097 	bne.w	8004d38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d823      	bhi.n	8004c5a <UART_SetConfig+0x35a>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x318>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c5b 	.word	0x08004c5b
 8004c20:	08004c45 	.word	0x08004c45
 8004c24:	08004c5b 	.word	0x08004c5b
 8004c28:	08004c4b 	.word	0x08004c4b
 8004c2c:	08004c5b 	.word	0x08004c5b
 8004c30:	08004c5b 	.word	0x08004c5b
 8004c34:	08004c5b 	.word	0x08004c5b
 8004c38:	08004c53 	.word	0x08004c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fd fe54 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8004c40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c42:	e010      	b.n	8004c66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c44:	4b9e      	ldr	r3, [pc, #632]	; (8004ec0 <UART_SetConfig+0x5c0>)
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c48:	e00d      	b.n	8004c66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4a:	f7fd fddf 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8004c4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c50:	e009      	b.n	8004c66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c58:	e005      	b.n	8004c66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8130 	beq.w	8004ece <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	4a94      	ldr	r2, [pc, #592]	; (8004ec4 <UART_SetConfig+0x5c4>)
 8004c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	4413      	add	r3, r2
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d305      	bcc.n	8004c9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d903      	bls.n	8004ca6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ca4:	e113      	b.n	8004ece <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	2200      	movs	r2, #0
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	60fa      	str	r2, [r7, #12]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	4a84      	ldr	r2, [pc, #528]	; (8004ec4 <UART_SetConfig+0x5c4>)
 8004cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2200      	movs	r2, #0
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cc8:	f7fb faa6 	bl	8000218 <__aeabi_uldivmod>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	020b      	lsls	r3, r1, #8
 8004cde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ce2:	0202      	lsls	r2, r0, #8
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	6849      	ldr	r1, [r1, #4]
 8004ce8:	0849      	lsrs	r1, r1, #1
 8004cea:	2000      	movs	r0, #0
 8004cec:	460c      	mov	r4, r1
 8004cee:	4605      	mov	r5, r0
 8004cf0:	eb12 0804 	adds.w	r8, r2, r4
 8004cf4:	eb43 0905 	adc.w	r9, r3, r5
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	469a      	mov	sl, r3
 8004d00:	4693      	mov	fp, r2
 8004d02:	4652      	mov	r2, sl
 8004d04:	465b      	mov	r3, fp
 8004d06:	4640      	mov	r0, r8
 8004d08:	4649      	mov	r1, r9
 8004d0a:	f7fb fa85 	bl	8000218 <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4613      	mov	r3, r2
 8004d14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1c:	d308      	bcc.n	8004d30 <UART_SetConfig+0x430>
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d24:	d204      	bcs.n	8004d30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6a3a      	ldr	r2, [r7, #32]
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	e0ce      	b.n	8004ece <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d36:	e0ca      	b.n	8004ece <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d40:	d166      	bne.n	8004e10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d827      	bhi.n	8004d9a <UART_SetConfig+0x49a>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0x450>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d85 	.word	0x08004d85
 8004d5c:	08004d9b 	.word	0x08004d9b
 8004d60:	08004d8b 	.word	0x08004d8b
 8004d64:	08004d9b 	.word	0x08004d9b
 8004d68:	08004d9b 	.word	0x08004d9b
 8004d6c:	08004d9b 	.word	0x08004d9b
 8004d70:	08004d93 	.word	0x08004d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d74:	f7fd fdb8 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8004d78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d7a:	e014      	b.n	8004da6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d7c:	f7fd fdca 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 8004d80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d82:	e010      	b.n	8004da6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d84:	4b4e      	ldr	r3, [pc, #312]	; (8004ec0 <UART_SetConfig+0x5c0>)
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d88:	e00d      	b.n	8004da6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8a:	f7fd fd3f 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8004d8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d90:	e009      	b.n	8004da6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d98:	e005      	b.n	8004da6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004da4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8090 	beq.w	8004ece <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	4a44      	ldr	r2, [pc, #272]	; (8004ec4 <UART_SetConfig+0x5c4>)
 8004db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004db8:	461a      	mov	r2, r3
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dc0:	005a      	lsls	r2, r3, #1
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	441a      	add	r2, r3
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	2b0f      	cmp	r3, #15
 8004dd8:	d916      	bls.n	8004e08 <UART_SetConfig+0x508>
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d212      	bcs.n	8004e08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f023 030f 	bic.w	r3, r3, #15
 8004dea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	8bfb      	ldrh	r3, [r7, #30]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	8bfa      	ldrh	r2, [r7, #30]
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	e062      	b.n	8004ece <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e0e:	e05e      	b.n	8004ece <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d828      	bhi.n	8004e6a <UART_SetConfig+0x56a>
 8004e18:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <UART_SetConfig+0x520>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	08004e6b 	.word	0x08004e6b
 8004e30:	08004e5b 	.word	0x08004e5b
 8004e34:	08004e6b 	.word	0x08004e6b
 8004e38:	08004e6b 	.word	0x08004e6b
 8004e3c:	08004e6b 	.word	0x08004e6b
 8004e40:	08004e63 	.word	0x08004e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e44:	f7fd fd50 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8004e48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e4a:	e014      	b.n	8004e76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7fd fd62 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 8004e50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e52:	e010      	b.n	8004e76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e54:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <UART_SetConfig+0x5c0>)
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e58:	e00d      	b.n	8004e76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5a:	f7fd fcd7 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8004e5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e60:	e009      	b.n	8004e76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e68:	e005      	b.n	8004e76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e74:	bf00      	nop
    }

    if (pclk != 0U)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d028      	beq.n	8004ece <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <UART_SetConfig+0x5c4>)
 8004e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e86:	461a      	mov	r2, r3
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	441a      	add	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b0f      	cmp	r3, #15
 8004ea4:	d910      	bls.n	8004ec8 <UART_SetConfig+0x5c8>
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eac:	d20c      	bcs.n	8004ec8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	e009      	b.n	8004ece <UART_SetConfig+0x5ce>
 8004eba:	bf00      	nop
 8004ebc:	40008000 	.word	0x40008000
 8004ec0:	00f42400 	.word	0x00f42400
 8004ec4:	08005980 	.word	0x08005980
      }
      else
      {
        ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004eea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3730      	adds	r7, #48	; 0x30
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01a      	beq.n	800500e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff6:	d10a      	bne.n	800500e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	605a      	str	r2, [r3, #4]
  }
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b098      	sub	sp, #96	; 0x60
 8005040:	af02      	add	r7, sp, #8
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800504c:	f7fc f99c 	bl	8001388 <HAL_GetTick>
 8005050:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b08      	cmp	r3, #8
 800505e:	d12f      	bne.n	80050c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005068:	2200      	movs	r2, #0
 800506a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f88e 	bl	8005190 <UART_WaitOnFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d022      	beq.n	80050c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508e:	653b      	str	r3, [r7, #80]	; 0x50
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005098:	647b      	str	r3, [r7, #68]	; 0x44
 800509a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800509e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e6      	bne.n	800507a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e063      	b.n	8005188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d149      	bne.n	8005162 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d6:	2200      	movs	r2, #0
 80050d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f857 	bl	8005190 <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d03c      	beq.n	8005162 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	623b      	str	r3, [r7, #32]
   return(result);
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
 8005108:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800510c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e6      	bne.n	80050e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3308      	adds	r3, #8
 8005120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	60fb      	str	r3, [r7, #12]
   return(result);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	64bb      	str	r3, [r7, #72]	; 0x48
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3308      	adds	r3, #8
 8005138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800513a:	61fa      	str	r2, [r7, #28]
 800513c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	69b9      	ldr	r1, [r7, #24]
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	617b      	str	r3, [r7, #20]
   return(result);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e5      	bne.n	800511a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e012      	b.n	8005188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3758      	adds	r7, #88	; 0x58
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a0:	e04f      	b.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a8:	d04b      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051aa:	f7fc f8ed 	bl	8001388 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d302      	bcc.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e04e      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d037      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b80      	cmp	r3, #128	; 0x80
 80051d6:	d034      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d031      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d110      	bne.n	800520e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2208      	movs	r2, #8
 80051f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f920 	bl	800543a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2208      	movs	r2, #8
 80051fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e029      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800521c:	d111      	bne.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f906 	bl	800543a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e00f      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4013      	ands	r3, r2
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	429a      	cmp	r2, r3
 800525e:	d0a0      	beq.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b096      	sub	sp, #88	; 0x58
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2222      	movs	r2, #34	; 0x22
 8005294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d02d      	beq.n	80052fe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a8:	4a40      	ldr	r2, [pc, #256]	; (80053ac <UART_Start_Receive_DMA+0x140>)
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b2:	4a3f      	ldr	r2, [pc, #252]	; (80053b0 <UART_Start_Receive_DMA+0x144>)
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052bc:	4a3d      	ldr	r2, [pc, #244]	; (80053b4 <UART_Start_Receive_DMA+0x148>)
 80052be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c6:	2200      	movs	r2, #0
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3324      	adds	r3, #36	; 0x24
 80052d6:	4619      	mov	r1, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052dc:	461a      	mov	r2, r3
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	f7fc fa16 	bl	8001710 <HAL_DMA_Start_IT>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2210      	movs	r2, #16
 80052ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e051      	b.n	80053a2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d018      	beq.n	8005338 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531a:	657b      	str	r3, [r7, #84]	; 0x54
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005324:	64bb      	str	r3, [r7, #72]	; 0x48
 8005326:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800532a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e6      	bne.n	8005306 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3308      	adds	r3, #8
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	f043 0301 	orr.w	r3, r3, #1
 800534e:	653b      	str	r3, [r7, #80]	; 0x50
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3308      	adds	r3, #8
 8005356:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005358:	637a      	str	r2, [r7, #52]	; 0x34
 800535a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800535e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e5      	bne.n	8005338 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3308      	adds	r3, #8
 8005372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	613b      	str	r3, [r7, #16]
   return(result);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3308      	adds	r3, #8
 800538a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800538c:	623a      	str	r2, [r7, #32]
 800538e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	6a3a      	ldr	r2, [r7, #32]
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	61bb      	str	r3, [r7, #24]
   return(result);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e5      	bne.n	800536c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3758      	adds	r7, #88	; 0x58
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	08005507 	.word	0x08005507
 80053b0:	08005633 	.word	0x08005633
 80053b4:	08005671 	.word	0x08005671

080053b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b08f      	sub	sp, #60	; 0x3c
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e6      	bne.n	80053c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3308      	adds	r3, #8
 80053f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	60bb      	str	r3, [r7, #8]
   return(result);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005408:	633b      	str	r3, [r7, #48]	; 0x30
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	61ba      	str	r2, [r7, #24]
 8005414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6979      	ldr	r1, [r7, #20]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	613b      	str	r3, [r7, #16]
   return(result);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e5      	bne.n	80053f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800542e:	bf00      	nop
 8005430:	373c      	adds	r7, #60	; 0x3c
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800543a:	b480      	push	{r7}
 800543c:	b095      	sub	sp, #84	; 0x54
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005460:	643b      	str	r3, [r7, #64]	; 0x40
 8005462:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e6      	bne.n	8005442 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3308      	adds	r3, #8
 800547a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	61fb      	str	r3, [r7, #28]
   return(result);
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3308      	adds	r3, #8
 8005496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800549e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e3      	bne.n	8005474 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d118      	bne.n	80054e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f023 0310 	bic.w	r3, r3, #16
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	613b      	str	r3, [r7, #16]
   return(result);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e6      	bne.n	80054b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80054fa:	bf00      	nop
 80054fc:	3754      	adds	r7, #84	; 0x54
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b09c      	sub	sp, #112	; 0x70
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b00      	cmp	r3, #0
 8005520:	d171      	bne.n	8005606 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005524:	2200      	movs	r2, #0
 8005526:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800553e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005548:	65bb      	str	r3, [r7, #88]	; 0x58
 800554a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800554e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3308      	adds	r3, #8
 8005562:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	667b      	str	r3, [r7, #100]	; 0x64
 8005574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800557c:	647a      	str	r2, [r7, #68]	; 0x44
 800557e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	623b      	str	r3, [r7, #32]
   return(result);
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a6:	663b      	str	r3, [r7, #96]	; 0x60
 80055a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055b0:	633a      	str	r2, [r7, #48]	; 0x30
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c6:	2220      	movs	r2, #32
 80055c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d118      	bne.n	8005606 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 0310 	bic.w	r3, r3, #16
 80055e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	69b9      	ldr	r1, [r7, #24]
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005608:	2200      	movs	r2, #0
 800560a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d107      	bne.n	8005624 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800561a:	4619      	mov	r1, r3
 800561c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800561e:	f7ff f963 	bl	80048e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005622:	e002      	b.n	800562a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005624:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005626:	f7ff f941 	bl	80048ac <HAL_UART_RxCpltCallback>
}
 800562a:	bf00      	nop
 800562c:	3770      	adds	r7, #112	; 0x70
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d109      	bne.n	8005662 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	b29b      	uxth	r3, r3
 8005658:	4619      	mov	r1, r3
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff f944 	bl	80048e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005660:	e002      	b.n	8005668 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff f92c 	bl	80048c0 <HAL_UART_RxHalfCpltCallback>
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005684:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005698:	2b80      	cmp	r3, #128	; 0x80
 800569a:	d109      	bne.n	80056b0 <UART_DMAError+0x40>
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b21      	cmp	r3, #33	; 0x21
 80056a0:	d106      	bne.n	80056b0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80056aa:	6978      	ldr	r0, [r7, #20]
 80056ac:	f7ff fe84 	bl	80053b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d109      	bne.n	80056d2 <UART_DMAError+0x62>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b22      	cmp	r3, #34	; 0x22
 80056c2:	d106      	bne.n	80056d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80056cc:	6978      	ldr	r0, [r7, #20]
 80056ce:	f7ff feb4 	bl	800543a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f043 0210 	orr.w	r2, r3, #16
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f7ff f8f6 	bl	80048d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e8:	bf00      	nop
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_UARTEx_DisableFifoMode+0x16>
 8005702:	2302      	movs	r3, #2
 8005704:	e027      	b.n	8005756 <HAL_UARTEx_DisableFifoMode+0x66>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2224      	movs	r2, #36	; 0x24
 8005712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0201 	bic.w	r2, r2, #1
 800572c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005734:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005776:	2302      	movs	r3, #2
 8005778:	e02d      	b.n	80057d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2224      	movs	r2, #36	; 0x24
 8005786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f850 	bl	800585c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e02d      	b.n	8005852 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2224      	movs	r2, #36	; 0x24
 8005802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f812 	bl	800585c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005868:	2b00      	cmp	r3, #0
 800586a:	d108      	bne.n	800587e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800587c:	e031      	b.n	80058e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800587e:	2308      	movs	r3, #8
 8005880:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005882:	2308      	movs	r3, #8
 8005884:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	0e5b      	lsrs	r3, r3, #25
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	0f5b      	lsrs	r3, r3, #29
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
 80058a8:	7b3a      	ldrb	r2, [r7, #12]
 80058aa:	4911      	ldr	r1, [pc, #68]	; (80058f0 <UARTEx_SetNbDataToProcess+0x94>)
 80058ac:	5c8a      	ldrb	r2, [r1, r2]
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058b2:	7b3a      	ldrb	r2, [r7, #12]
 80058b4:	490f      	ldr	r1, [pc, #60]	; (80058f4 <UARTEx_SetNbDataToProcess+0x98>)
 80058b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	7b7a      	ldrb	r2, [r7, #13]
 80058c8:	4909      	ldr	r1, [pc, #36]	; (80058f0 <UARTEx_SetNbDataToProcess+0x94>)
 80058ca:	5c8a      	ldrb	r2, [r1, r2]
 80058cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058d0:	7b7a      	ldrb	r2, [r7, #13]
 80058d2:	4908      	ldr	r1, [pc, #32]	; (80058f4 <UARTEx_SetNbDataToProcess+0x98>)
 80058d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80058da:	b29a      	uxth	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	08005998 	.word	0x08005998
 80058f4:	080059a0 	.word	0x080059a0

080058f8 <memset>:
 80058f8:	4402      	add	r2, r0
 80058fa:	4603      	mov	r3, r0
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d100      	bne.n	8005902 <memset+0xa>
 8005900:	4770      	bx	lr
 8005902:	f803 1b01 	strb.w	r1, [r3], #1
 8005906:	e7f9      	b.n	80058fc <memset+0x4>

08005908 <__libc_init_array>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4d0d      	ldr	r5, [pc, #52]	; (8005940 <__libc_init_array+0x38>)
 800590c:	4c0d      	ldr	r4, [pc, #52]	; (8005944 <__libc_init_array+0x3c>)
 800590e:	1b64      	subs	r4, r4, r5
 8005910:	10a4      	asrs	r4, r4, #2
 8005912:	2600      	movs	r6, #0
 8005914:	42a6      	cmp	r6, r4
 8005916:	d109      	bne.n	800592c <__libc_init_array+0x24>
 8005918:	4d0b      	ldr	r5, [pc, #44]	; (8005948 <__libc_init_array+0x40>)
 800591a:	4c0c      	ldr	r4, [pc, #48]	; (800594c <__libc_init_array+0x44>)
 800591c:	f000 f818 	bl	8005950 <_init>
 8005920:	1b64      	subs	r4, r4, r5
 8005922:	10a4      	asrs	r4, r4, #2
 8005924:	2600      	movs	r6, #0
 8005926:	42a6      	cmp	r6, r4
 8005928:	d105      	bne.n	8005936 <__libc_init_array+0x2e>
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005930:	4798      	blx	r3
 8005932:	3601      	adds	r6, #1
 8005934:	e7ee      	b.n	8005914 <__libc_init_array+0xc>
 8005936:	f855 3b04 	ldr.w	r3, [r5], #4
 800593a:	4798      	blx	r3
 800593c:	3601      	adds	r6, #1
 800593e:	e7f2      	b.n	8005926 <__libc_init_array+0x1e>
 8005940:	080059b0 	.word	0x080059b0
 8005944:	080059b0 	.word	0x080059b0
 8005948:	080059b0 	.word	0x080059b0
 800594c:	080059b4 	.word	0x080059b4

08005950 <_init>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr

0800595c <_fini>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr
